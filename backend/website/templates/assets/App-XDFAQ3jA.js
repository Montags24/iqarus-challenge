import{_,R as b,g as x}from"./offlineWorker-DhH_RA-K.js";import{r as h,o as u,c as p,a as n,b as r,w as m,n as d,d as v,u as k}from"./index-CXXDljtV.js";class y{constructor(e){this.domainOrigin=e,this.id="",this.name="",this.username="",this.loggedIn=!1,this.sessionJwt="",this.latitude="",this.longitude=""}async api_register(e){console.log("In api_register");const o={name:e.name,username:e.username,password:e.password};console.log(o);const l={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)},i=this.domainOrigin+"/api/users/";try{const t=await fetch(i,l);if(!t.ok){const a=await t.json();throw{status:t.status,message:a.message||"Network response was not ok"}}return(await t.json()).new_user}catch(t){throw t.status?{status:t.status}:new Error("Failed to add user: "+t.message)}}async apiLogin(e,o){console.log("In api_login");const i={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:e,password:o})},t=this.domainOrigin+"/api/auth/login";try{const s=await fetch(t,i);if(!s.ok){const w=await s.json();throw{status:s.status,message:w.message||"Network response was not ok"}}const a=await s.json();return console.log(a),this.id=a.package.id,this.name=a.package.name,this.username=a.package.username,this.loggedIn=!0,this.sessionJwt=a.package.session_jwt,{status:s.status,message:a.message}}catch(s){throw s.status?{status:s.status}:new Error("Failed to login")}}async apiEditUser(e){console.log("In api_edit_user");const o={edited_name:e},l={method:"PUT",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.sessionJwt}`},body:JSON.stringify(o)},i=this.domainOrigin+"/api/users/";try{const t=await fetch(i,l);if(!t.ok){const a=await t.json();throw{status:t.status,message:a.message||"Network response was not ok"}}const s=await t.json();return this.name=s.user.name,s.user}catch(t){throw t.status?{status:t.status}:new Error("Failed to edit user: "+t.message)}}}const O={data(){return{}}},L={class:"bg-off-black text-white text-center fixed inset-x-0 bottom-0 pb-3 pt-2 px-6"},$={class:"max-w-lg mx-auto"},j={class:"flex justify-between font-montserrat text-xs"},M=n("p",{class:"pt-1"},"Update",-1),S=n("p",{class:"pt-1"},"Maps",-1),N=n("p",{class:"pt-1"},"Profile",-1);function E(c,e,o,l,i,t){const s=h("v-icon"),a=h("RouterLink");return u(),p("nav",L,[n("div",$,[n("div",j,[r(a,{to:"/"},{default:m(()=>[n("div",{class:d(["flex flex-col items-center pb-2",{"text-orange-500":c.$route.name=="home"}])},[r(s,{name:"io-send"}),M],2)]),_:1}),r(a,{to:"/map"},{default:m(()=>[n("div",{class:d(["flex flex-col items-center pb-2",{"text-orange-500":c.$route.name=="map"}])},[r(s,{name:"fa-map-marker-alt"}),S],2)]),_:1}),r(a,{to:"/profile"},{default:m(()=>[n("div",{class:d(["flex flex-col items-center pb-2",{"text-orange-500":c.$route.name=="profile"}])},[r(s,{name:"fa-user-alt"}),N],2)]),_:1})])])])}const f=_(O,[["render",E]]),B={props:{onLine:{type:Boolean,default:!0}},data(){return{mobileMenuOpen:!1}},methods:{toggleMobileMenu(){this.mobileMenuOpen=!this.mobileMenuOpen}}},C={class:"bg-off-black text-white py-3 fixed inset-x-0 top-0"},J={class:"flex justify-between text-center items-center max-container mx-auto px-8"},I={key:0},P={key:1},T=n("h1",{class:"flex font-montserrat font-semibold text-xl text-orange-500"},"[ ResQHub ] ",-1),z={class:"flex flex-col gap-1 pb-1 h-5 justify-center hover:cursor-pointer"},R=n("div",{class:"hidden sm:block"}," navlinks ",-1);function U(c,e,o,l,i,t){const s=h("v-icon");return u(),p("div",C,[n("div",J,[o.onLine?(u(),p("div",P,[r(s,{name:"hi-solid-status-online",class:"text-orange-500",scale:"1.5"})])):(u(),p("div",I,[r(s,{name:"hi-solid-status-offline",class:"text-orange-500",scale:"1.5"})])),T,n("div",{class:"flex pt-1 sm:items-center sm:hidden",onClick:e[0]||(e[0]=(...a)=>t.toggleMobileMenu&&t.toggleMobileMenu(...a))},[n("button",z,[n("span",{class:d(["w-6 h-[2px] bg-orange-500 transition transform duration-200",{"rotate-45 translate-y-[3px]":i.mobileMenuOpen}])},null,2),n("span",{class:d(["w-6 h-[2px] bg-orange-500 transition transform",{hidden:i.mobileMenuOpen}])},null,2),n("span",{class:d(["w-6 h-[2px] bg-orange-500 transition transform duration-200",{"rotate-[-45deg] translate-y-[-3px]":i.mobileMenuOpen}])},null,2)])]),R])])}const g=_(B,[["render",U]]),q={class:"bg-black min-h-screen"},A={class:"relative z-10"},D={class:"relative z-0"},F={class:"relative z-10"},V={components:{MobileNavBar:f,MobileHeader:g},data(){return{onLine:navigator.onLine}},watch:{async onLine(c){if(c){console.log("Back online");const e=await x();if(e)for(let o=0;o<e.length;o++)console.log(e[o]),console.log(JSON.parse(e[o].name.payload))}}},methods:{handleOnlineStatus(){this.onLine=navigator.onLine}},mounted(){window.addEventListener("online",this.handleOnlineStatus),window.addEventListener("offline",this.handleOnlineStatus)},beforeUnmount(){window.removeEventListener("online",this.handleOnlineStatus),window.removeEventListener("offline",this.handleOnlineStatus)}},K=Object.assign(V,{__name:"App",setup(c){let e=window.location.origin;e.slice(-5)==":5173"&&(e=e.replace(":5173",":5000"));const o=v(new y(e));return(l,i)=>(u(),p("div",q,[n("header",A,[r(g,{onLine:l.onLine},null,8,["onLine"])]),n("main",D,[r(k(b),{onLine:l.onLine,user:o},null,8,["onLine","user"])]),n("footer",F,[r(f)])]))}});export{K as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwLVhERkFRM2pBLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9mcm9udGVuZC9zcmMvc3RvcmVzL1VzZXIuanMiLCIuLi8uLi8uLi8uLi9mcm9udGVuZC9zcmMvY29tcG9uZW50cy9Nb2JpbGVOYXZCYXIudnVlIiwiLi4vLi4vLi4vLi4vZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvTW9iaWxlSGVhZGVyLnZ1ZSIsIi4uLy4uLy4uLy4uL2Zyb250ZW5kL3NyYy9BcHAudnVlIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFVzZXIge1xyXG4gIGNvbnN0cnVjdG9yIChkb21haW5PcmlnaW4pIHtcclxuICAgIHRoaXMuZG9tYWluT3JpZ2luID0gZG9tYWluT3JpZ2luXHJcbiAgICB0aGlzLmlkID0gJydcclxuICAgIHRoaXMubmFtZSA9ICcnXHJcbiAgICB0aGlzLnVzZXJuYW1lID0gJydcclxuICAgIHRoaXMubG9nZ2VkSW4gPSBmYWxzZVxyXG4gICAgdGhpcy5zZXNzaW9uSnd0ID0gJydcclxuICAgIHRoaXMubGF0aXR1ZGUgPSAnJ1xyXG4gICAgdGhpcy5sb25naXR1ZGUgPSAnJ1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgYXBpX3JlZ2lzdGVyIChwYXlsb2FkKSB7XHJcbiAgICBjb25zb2xlLmxvZygnSW4gYXBpX3JlZ2lzdGVyJylcclxuICAgIGNvbnN0IG5ld191c2VyX2NyZWRlbnRpYWxzID0ge1xyXG4gICAgICBuYW1lOiBwYXlsb2FkLm5hbWUsXHJcbiAgICAgIHVzZXJuYW1lOiBwYXlsb2FkLnVzZXJuYW1lLFxyXG4gICAgICBwYXNzd29yZDogcGF5bG9hZC5wYXNzd29yZFxyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKG5ld191c2VyX2NyZWRlbnRpYWxzKVxyXG5cclxuICAgIGNvbnN0IHJlcXVlc3Rfb3B0aW9ucyA9IHtcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgLy8gQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMudXNlci5zZXNzaW9uX2p3dH1gXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KG5ld191c2VyX2NyZWRlbnRpYWxzKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVybCA9IHRoaXMuZG9tYWluT3JpZ2luICsgJy9hcGkvdXNlcnMvJ1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCByZXF1ZXN0X29wdGlvbnMpXHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCkgLy8gVGhyb3cgYW4gZXJyb3Igb2JqZWN0IGNvbnRhaW5pbmcgYm90aCB0aGUgc3RhdHVzIGNvZGUgYW5kIHRoZSBlcnJvciBtZXNzYWdlXHJcbiAgICAgICAgdGhyb3cge1xyXG4gICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXHJcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvckRhdGEubWVzc2FnZSB8fCAnTmV0d29yayByZXNwb25zZSB3YXMgbm90IG9rJ1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBhcGlPYmplY3QgPSBhd2FpdCByZXNwb25zZS5qc29uKClcclxuICAgICAgcmV0dXJuIGFwaU9iamVjdC5uZXdfdXNlclxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgLy8gSWYgdGhlIGVycm9yIG9iamVjdCBjb250YWlucyBhIHN0YXR1cyBjb2RlLCByZXR1cm4gaXQgYWxvbmcgd2l0aCB0aGUgZXJyb3IgbWVzc2FnZVxyXG4gICAgICBpZiAoZXJyb3Iuc3RhdHVzKSB7XHJcbiAgICAgICAgdGhyb3cgeyBzdGF0dXM6IGVycm9yLnN0YXR1cyB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBqdXN0IHJldHVybiB0aGUgZXJyb3IgbWVzc2FnZVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGFkZCB1c2VyOiAnICsgZXJyb3IubWVzc2FnZSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgYXBpTG9naW4gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgY29uc29sZS5sb2coJ0luIGFwaV9sb2dpbicpXHJcbiAgICBjb25zdCBwYXlsb2FkID0ge1xyXG4gICAgICB1c2VybmFtZTogdXNlcm5hbWUsXHJcbiAgICAgIHBhc3N3b3JkOiBwYXNzd29yZFxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlcXVlc3Rfb3B0aW9ucyA9IHtcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgLy8gQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMudXNlci5zZXNzaW9uX2p3dH1gXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdXJsID0gdGhpcy5kb21haW5PcmlnaW4gKyAnL2FwaS9hdXRoL2xvZ2luJ1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCByZXF1ZXN0X29wdGlvbnMpXHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcclxuICAgICAgICAvLyBUaHJvdyBhbiBlcnJvciBvYmplY3QgY29udGFpbmluZyBib3RoIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGVycm9yIG1lc3NhZ2VcclxuICAgICAgICB0aHJvdyB7XHJcbiAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcclxuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yRGF0YS5tZXNzYWdlIHx8ICdOZXR3b3JrIHJlc3BvbnNlIHdhcyBub3Qgb2snXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGFwaU9iamVjdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxyXG4gICAgICAvLyB1cGRhdGUgdXNlciBkZXRhaWxzXHJcbiAgICAgIGNvbnNvbGUubG9nKGFwaU9iamVjdClcclxuICAgICAgdGhpcy5pZCA9IGFwaU9iamVjdC5wYWNrYWdlLmlkXHJcbiAgICAgIHRoaXMubmFtZSA9IGFwaU9iamVjdC5wYWNrYWdlLm5hbWVcclxuICAgICAgdGhpcy51c2VybmFtZSA9IGFwaU9iamVjdC5wYWNrYWdlLnVzZXJuYW1lXHJcbiAgICAgIHRoaXMubG9nZ2VkSW4gPSB0cnVlXHJcbiAgICAgIHRoaXMuc2Vzc2lvbkp3dCA9IGFwaU9iamVjdC5wYWNrYWdlLnNlc3Npb25fand0XHJcblxyXG4gICAgICBjb25zdCByZXNwb25zZVBhY2thZ2UgPSB7XHJcbiAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXHJcbiAgICAgICAgbWVzc2FnZTogYXBpT2JqZWN0Lm1lc3NhZ2VcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlc3BvbnNlUGFja2FnZVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgLy8gSWYgdGhlIGVycm9yIG9iamVjdCBjb250YWlucyBhIHN0YXR1cyBjb2RlLCByZXR1cm4gaXQgYWxvbmcgd2l0aCB0aGUgZXJyb3IgbWVzc2FnZVxyXG4gICAgICBpZiAoZXJyb3Iuc3RhdHVzKSB7XHJcbiAgICAgICAgdGhyb3cgeyBzdGF0dXM6IGVycm9yLnN0YXR1cyB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBqdXN0IHJldHVybiB0aGUgZXJyb3IgbWVzc2FnZVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGxvZ2luJylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgYXBpRWRpdFVzZXIgKGVkaXRlZE5hbWUpIHtcclxuICAgIGNvbnNvbGUubG9nKCdJbiBhcGlfZWRpdF91c2VyJylcclxuXHJcbiAgICBjb25zdCBwYXlsb2FkID0ge1xyXG4gICAgICBlZGl0ZWRfbmFtZTogZWRpdGVkTmFtZVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlcXVlc3Rfb3B0aW9ucyA9IHtcclxuICAgICAgbWV0aG9kOiAnUFVUJyxcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuc2Vzc2lvbkp3dH1gXHJcbiAgICAgIH0sXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdXJsID0gdGhpcy5kb21haW5PcmlnaW4gKyAnL2FwaS91c2Vycy8nXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHJlcXVlc3Rfb3B0aW9ucylcclxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKSAvLyBUaHJvdyBhbiBlcnJvciBvYmplY3QgY29udGFpbmluZyBib3RoIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGVycm9yIG1lc3NhZ2VcclxuICAgICAgICB0aHJvdyB7XHJcbiAgICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcclxuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yRGF0YS5tZXNzYWdlIHx8ICdOZXR3b3JrIHJlc3BvbnNlIHdhcyBub3Qgb2snXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGFwaU9iamVjdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxyXG4gICAgICB0aGlzLm5hbWUgPSBhcGlPYmplY3QudXNlci5uYW1lXHJcbiAgICAgIHJldHVybiBhcGlPYmplY3QudXNlclxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgLy8gSWYgdGhlIGVycm9yIG9iamVjdCBjb250YWlucyBhIHN0YXR1cyBjb2RlLCByZXR1cm4gaXQgYWxvbmcgd2l0aCB0aGUgZXJyb3IgbWVzc2FnZVxyXG4gICAgICBpZiAoZXJyb3Iuc3RhdHVzKSB7XHJcbiAgICAgICAgdGhyb3cgeyBzdGF0dXM6IGVycm9yLnN0YXR1cyB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBqdXN0IHJldHVybiB0aGUgZXJyb3IgbWVzc2FnZVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGVkaXQgdXNlcjogJyArIGVycm9yLm1lc3NhZ2UpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFVzZXJcclxuIiwiPHRlbXBsYXRlPlxyXG4gICAgPG5hdiBjbGFzcz1cImJnLW9mZi1ibGFjayB0ZXh0LXdoaXRlIHRleHQtY2VudGVyIGZpeGVkIGluc2V0LXgtMCBib3R0b20tMCBwYi0zIHB0LTIgcHgtNlwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYXgtdy1sZyBteC1hdXRvXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGp1c3RpZnktYmV0d2VlbiBmb250LW1vbnRzZXJyYXQgdGV4dC14c1wiPlxyXG4gICAgICAgICAgICAgICAgPFJvdXRlckxpbmsgdG89XCIvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIHBiLTJcIiA6Y2xhc3M9XCJ7ICd0ZXh0LW9yYW5nZS01MDAnOiAkcm91dGUubmFtZSA9PSAnaG9tZScgfVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uIG5hbWU9XCJpby1zZW5kXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJwdC0xXCI+VXBkYXRlPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9Sb3V0ZXJMaW5rPlxyXG4gICAgICAgICAgICAgICAgPFJvdXRlckxpbmsgdG89XCIvbWFwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIHBiLTJcIiA6Y2xhc3M9XCJ7ICd0ZXh0LW9yYW5nZS01MDAnOiAkcm91dGUubmFtZSA9PSAnbWFwJyB9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gbmFtZT1cImZhLW1hcC1tYXJrZXItYWx0XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJwdC0xXCI+TWFwczwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvUm91dGVyTGluaz5cclxuICAgICAgICAgICAgICAgIDxSb3V0ZXJMaW5rIHRvPVwiL3Byb2ZpbGVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LWNvbCBpdGVtcy1jZW50ZXIgcGItMlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsgJ3RleHQtb3JhbmdlLTUwMCc6ICRyb3V0ZS5uYW1lID09ICdwcm9maWxlJyB9XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24gbmFtZT1cImZhLXVzZXItYWx0XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJwdC0xXCI+UHJvZmlsZTwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvUm91dGVyTGluaz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L25hdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcblxyXG48c2NyaXB0PlxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBkYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbn1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+PC9zdHlsZT4iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwiYmctb2ZmLWJsYWNrIHRleHQtd2hpdGUgcHktMyBmaXhlZCBcclxuICAgICAgICAgICAgIGluc2V0LXgtMCBcclxuICAgICAgICAgICAgIHRvcC0wXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZsZXgganVzdGlmeS1iZXR3ZWVuIHRleHQtY2VudGVyIGl0ZW1zLWNlbnRlciBtYXgtY29udGFpbmVyIG14LWF1dG8gcHgtOFwiPlxyXG4gICAgICAgICAgICA8ZGl2IHYtaWY9XCIhb25MaW5lXCI+XHJcbiAgICAgICAgICAgICAgICA8di1pY29uIG5hbWU9XCJoaS1zb2xpZC1zdGF0dXMtb2ZmbGluZVwiIGNsYXNzPVwidGV4dC1vcmFuZ2UtNTAwXCIgc2NhbGU9XCIxLjVcIiAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiB2LWVsc2U+XHJcbiAgICAgICAgICAgICAgICA8di1pY29uIG5hbWU9XCJoaS1zb2xpZC1zdGF0dXMtb25saW5lXCIgY2xhc3M9XCJ0ZXh0LW9yYW5nZS01MDBcIiBzY2FsZT1cIjEuNVwiIC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8aDEgY2xhc3M9XCJmbGV4IGZvbnQtbW9udHNlcnJhdCBmb250LXNlbWlib2xkIHRleHQteGwgdGV4dC1vcmFuZ2UtNTAwXCI+WyBSZXNRSHViIF1cclxuICAgICAgICAgICAgPC9oMT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggcHQtMSBzbTppdGVtcy1jZW50ZXIgc206aGlkZGVuXCIgQGNsaWNrPVwidG9nZ2xlTW9iaWxlTWVudVwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImZsZXggZmxleC1jb2wgZ2FwLTEgcGItMSBoLTUganVzdGlmeS1jZW50ZXIgaG92ZXI6Y3Vyc29yLXBvaW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInctNiBoLVsycHhdIGJnLW9yYW5nZS01MDAgdHJhbnNpdGlvbiB0cmFuc2Zvcm0gZHVyYXRpb24tMjAwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieyAncm90YXRlLTQ1IHRyYW5zbGF0ZS15LVszcHhdJzogbW9iaWxlTWVudU9wZW4gfVwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInctNiBoLVsycHhdIGJnLW9yYW5nZS01MDAgdHJhbnNpdGlvbiB0cmFuc2Zvcm1cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7ICdoaWRkZW4nOiBtb2JpbGVNZW51T3BlbiB9XCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidy02IGgtWzJweF0gYmctb3JhbmdlLTUwMCB0cmFuc2l0aW9uIHRyYW5zZm9ybSBkdXJhdGlvbi0yMDBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7ICdyb3RhdGUtWy00NWRlZ10gdHJhbnNsYXRlLXktWy0zcHhdJzogbW9iaWxlTWVudU9wZW4gfVwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhpZGRlbiBzbTpibG9ja1wiPlxyXG4gICAgICAgICAgICAgICAgbmF2bGlua3NcclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIHByb3BzOiB7XHJcbiAgICAgICAgb25MaW5lOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBkYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1vYmlsZU1lbnVPcGVuOiBmYWxzZSxcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgIHRvZ2dsZU1vYmlsZU1lbnUoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9iaWxlTWVudU9wZW4gPSAhdGhpcy5tb2JpbGVNZW51T3BlblxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG5cclxufVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD48L3N0eWxlPiIsIjxzY3JpcHQgc2V0dXA+XHJcbmltcG9ydCB7IFJvdXRlclZpZXcgfSBmcm9tICd2dWUtcm91dGVyJ1xyXG5pbXBvcnQgeyByZWFjdGl2ZSB9IGZyb20gJ3Z1ZSc7XHJcblxyXG5pbXBvcnQgVXNlciBmcm9tICcuL3N0b3Jlcy9Vc2VyJztcclxuXHJcbi8vIHdoZW4gd2UgYXJlIGRldmVsb3BpbmcgdXNpbmcgbG9jYWxob3N0IG9uIHBvcnQgNTE3MyAodnVlJ3MgZGVmYXVsdCBwb3J0KSxcclxuLy8gdG8gaW50ZWdyYXRlIHdpdGggdGhlIGZsYXNrIGJhY2tlbmQsIHdlIG5lZWQgdG8gbW9kaWZ5IHRoZSBwb3J0IHRvIDUwMDAgKGZsYXNrIGRlZmF1bHQgcG9ydClcclxubGV0IGRvbWFpbk9yaWdpbiA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW5cclxuaWYgKGRvbWFpbk9yaWdpbi5zbGljZSgtNSkgPT0gXCI6NTE3M1wiKSB7XHJcbiAgZG9tYWluT3JpZ2luID0gZG9tYWluT3JpZ2luLnJlcGxhY2UoXCI6NTE3M1wiLCBcIjo1MDAwXCIpXHJcbn1cclxuXHJcbmNvbnN0IHVzZXIgPSByZWFjdGl2ZShuZXcgVXNlcihkb21haW5PcmlnaW4pKVxyXG48L3NjcmlwdD5cclxuXHJcbjx0ZW1wbGF0ZT5cclxuICA8ZGl2IGNsYXNzPVwiYmctYmxhY2sgbWluLWgtc2NyZWVuXCI+XHJcbiAgICA8IS0tIEhlYWRlciAtLT5cclxuICAgIDxoZWFkZXIgY2xhc3M9XCJyZWxhdGl2ZSB6LTEwXCI+XHJcbiAgICAgIDxNb2JpbGVIZWFkZXIgOm9uTGluZT1cIm9uTGluZVwiPjwvTW9iaWxlSGVhZGVyPlxyXG4gICAgPC9oZWFkZXI+XHJcblxyXG4gICAgPCEtLSBDb250ZW50IC0tPlxyXG4gICAgPG1haW4gY2xhc3M9XCJyZWxhdGl2ZSB6LTBcIj5cclxuICAgICAgPFJvdXRlclZpZXcgOm9uTGluZT1cIm9uTGluZVwiIDp1c2VyPVwidXNlclwiIC8+XHJcbiAgICA8L21haW4+XHJcblxyXG4gICAgPCEtLSBGb290ZXIgLS0+XHJcbiAgICA8Zm9vdGVyIGNsYXNzPVwicmVsYXRpdmUgei0xMFwiPlxyXG4gICAgICA8TW9iaWxlTmF2QmFyPjwvTW9iaWxlTmF2QmFyPlxyXG4gICAgPC9mb290ZXI+XHJcbiAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5pbXBvcnQgTW9iaWxlTmF2QmFyIGZyb20gJy4vY29tcG9uZW50cy9Nb2JpbGVOYXZCYXIudnVlJztcclxuaW1wb3J0IE1vYmlsZUhlYWRlciBmcm9tICcuL2NvbXBvbmVudHMvTW9iaWxlSGVhZGVyLnZ1ZSc7XHJcbmltcG9ydCB7IGdldEFsbEl0ZW1zIH0gZnJvbSAnLi9zdG9yZXMvb2ZmbGluZVdvcmtlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgY29tcG9uZW50czoge1xyXG4gICAgTW9iaWxlTmF2QmFyLFxyXG4gICAgTW9iaWxlSGVhZGVyXHJcbiAgfSxcclxuICBkYXRhKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgb25MaW5lOiBuYXZpZ2F0b3Iub25MaW5lXHJcbiAgICB9XHJcbiAgfSxcclxuICB3YXRjaDoge1xyXG4gICAgLy8gd2hlbmV2ZXIgb25MaW5lIGNoYW5nZXMgZnJvbSBmYWxzZSB0byB0cnVlIC0gdHJ5IHRvIHNlbmQgY2FjaGVkIGVudHJpZXMgdG8gc2VydmVyXHJcbiAgICBhc3luYyBvbkxpbmUobmV3U3RhdHVzKSB7XHJcbiAgICAgIGlmIChuZXdTdGF0dXMpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkJhY2sgb25saW5lXCIpXHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSBhd2FpdCBnZXRBbGxJdGVtcygpXHJcbiAgICAgICAgaWYgKGl0ZW1zKSB7XHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGl0ZW1zW2ldKVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhKU09OLnBhcnNlKGl0ZW1zW2ldLm5hbWUucGF5bG9hZCkpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBtZXRob2RzOiB7XHJcbiAgICBoYW5kbGVPbmxpbmVTdGF0dXMoKSB7XHJcbiAgICAgIHRoaXMub25MaW5lID0gbmF2aWdhdG9yLm9uTGluZTtcclxuICAgIH0sXHJcbiAgfSxcclxuICBtb3VudGVkKCkge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgdGhpcy5oYW5kbGVPbmxpbmVTdGF0dXMpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIHRoaXMuaGFuZGxlT25saW5lU3RhdHVzKTtcclxuICB9LFxyXG4gIGJlZm9yZVVubW91bnQoKSB7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9ubGluZVwiLCB0aGlzLmhhbmRsZU9ubGluZVN0YXR1cyk7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgdGhpcy5oYW5kbGVPbmxpbmVTdGF0dXMpO1xyXG4gIH1cclxufTtcclxuPC9zY3JpcHQ+XHJcbiJdLCJuYW1lcyI6WyJVc2VyIiwiZG9tYWluT3JpZ2luIiwicGF5bG9hZCIsIm5ld191c2VyX2NyZWRlbnRpYWxzIiwicmVxdWVzdF9vcHRpb25zIiwidXJsIiwicmVzcG9uc2UiLCJlcnJvckRhdGEiLCJlcnJvciIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJhcGlPYmplY3QiLCJlZGl0ZWROYW1lIiwiX3NmY19tYWluIiwiX2hvaXN0ZWRfMSIsIl9ob2lzdGVkXzIiLCJfaG9pc3RlZF8zIiwiX2hvaXN0ZWRfNCIsIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCJfaG9pc3RlZF81IiwiX2hvaXN0ZWRfNiIsIl9vcGVuQmxvY2siLCJfY3JlYXRlRWxlbWVudEJsb2NrIiwiX2NyZWF0ZVZOb2RlIiwiX2NvbXBvbmVudF9Sb3V0ZXJMaW5rIiwiX3dpdGhDdHgiLCJfbm9ybWFsaXplQ2xhc3MiLCJfY3R4IiwiX2NvbXBvbmVudF92X2ljb24iLCJfaG9pc3RlZF83IiwiJHByb3BzIiwiJG9wdGlvbnMiLCJhcmdzIiwiJGRhdGEiLCJfX2RlZmF1bHRfXyIsIk1vYmlsZU5hdkJhciIsIk1vYmlsZUhlYWRlciIsIm5ld1N0YXR1cyIsIml0ZW1zIiwiZ2V0QWxsSXRlbXMiLCJpIiwidXNlciIsInJlYWN0aXZlIl0sIm1hcHBpbmdzIjoieUpBQUEsTUFBTUEsQ0FBSyxDQUNULFlBQWFDLEVBQWMsQ0FDekIsS0FBSyxhQUFlQSxFQUNwQixLQUFLLEdBQUssR0FDVixLQUFLLEtBQU8sR0FDWixLQUFLLFNBQVcsR0FDaEIsS0FBSyxTQUFXLEdBQ2hCLEtBQUssV0FBYSxHQUNsQixLQUFLLFNBQVcsR0FD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
