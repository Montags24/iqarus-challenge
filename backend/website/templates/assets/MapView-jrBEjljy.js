import{d as G,r as v,p as M,w as x,o as ee,a as V,b as L,c as P,e as _,f as Z,n as te,g as oe,h as B,C as re,m as ie,i as q,j as I,t as ae,k as R,l as S,q as T,u as N,s as ne,v as se}from"./index-B1Hx-LR5.js";(function(){try{if(typeof document<"u"){var o=document.createElement("style");o.appendChild(document.createTextNode(".mapdiv[data-v-dbf82c40]{width:100%;height:100%}.custom-control-wrapper[data-v-d099a3a6]{display:none}.mapdiv .custom-control-wrapper[data-v-d099a3a6]{display:inline-block}.info-window-wrapper[data-v-cbe1707b]{display:none}.mapdiv .info-window-wrapper[data-v-cbe1707b]{display:inline-block}.custom-marker-wrapper[data-v-2d2d343a]{display:none}.mapdiv .custom-marker-wrapper[data-v-2d2d343a]{display:inline-block}")),document.head.appendChild(o)}}catch(e){console.error("vite-plugin-css-injected-by-js",e)}})();var le=Object.defineProperty,ce=(o,e,t)=>e in o?le(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t,z=(o,e,t)=>(ce(o,typeof e!="symbol"?e+"":e,t),t);const H=Symbol("map"),J=Symbol("api"),ue=Symbol("markerCluster"),j=Symbol("CustomMarker"),de=Symbol("mapTilesLoaded"),W=["click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","rightclick"];/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function pe(o,e,t,a){function r(i){return i instanceof t?i:new t(function(n){n(i)})}return new(t||(t=Promise))(function(i,n){function c(u){try{g(a.next(u))}catch(l){n(l)}}function m(u){try{g(a.throw(u))}catch(l){n(l)}}function g(u){u.done?i(u.value):r(u.value).then(c,m)}g((a=a.apply(o,e||[])).next())})}var he=function o(e,t){if(e===t)return!0;if(e&&t&&typeof e=="object"&&typeof t=="object"){if(e.constructor!==t.constructor)return!1;var a,r,i;if(Array.isArray(e)){if(a=e.length,a!=t.length)return!1;for(r=a;r--!==0;)if(!o(e[r],t[r]))return!1;return!0}if(e.constructor===RegExp)return e.source===t.source&&e.flags===t.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===t.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===t.toString();if(i=Object.keys(e),a=i.length,a!==Object.keys(t).length)return!1;for(r=a;r--!==0;)if(!Object.prototype.hasOwnProperty.call(t,i[r]))return!1;for(r=a;r--!==0;){var n=i[r];if(!o(e[n],t[n]))return!1}return!0}return e!==e&&t!==t};const U="__googleMapsScriptId";var O;(function(o){o[o.INITIALIZED=0]="INITIALIZED",o[o.LOADING=1]="LOADING",o[o.SUCCESS=2]="SUCCESS",o[o.FAILURE=3]="FAILURE"})(O||(O={}));class k{constructor({apiKey:e,authReferrerPolicy:t,channel:a,client:r,id:i=U,language:n,libraries:c=[],mapIds:m,nonce:g,region:u,retries:l=3,url:d="https://maps.googleapis.com/maps/api/js",version:h}){if(this.callbacks=[],this.done=!1,this.loading=!1,this.errors=[],this.apiKey=e,this.authReferrerPolicy=t,this.channel=a,this.client=r,this.id=i||U,this.language=n,this.libraries=c,this.mapIds=m,this.nonce=g,this.region=u,this.retries=l,this.url=d,this.version=h,k.instance){if(!he(this.options,k.instance.options))throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(k.instance.options)}`);return k.instance}k.instance=this}get options(){return{version:this.version,apiKey:this.apiKey,channel:this.channel,client:this.client,id:this.id,libraries:this.libraries,language:this.language,region:this.region,mapIds:this.mapIds,nonce:this.nonce,url:this.url,authReferrerPolicy:this.authReferrerPolicy}}get status(){return this.errors.length?O.FAILURE:this.done?O.SUCCESS:this.loading?O.LOADING:O.INITIALIZED}get failed(){return this.done&&!this.loading&&this.errors.length>=this.retries+1}createUrl(){let e=this.url;return e+="?callback=__googleMapsCallback",this.apiKey&&(e+=`&key=${this.apiKey}`),this.channel&&(e+=`&channel=${this.channel}`),this.client&&(e+=`&client=${this.client}`),this.libraries.length>0&&(e+=`&libraries=${this.libraries.join(",")}`),this.language&&(e+=`&language=${this.language}`),this.region&&(e+=`&region=${this.region}`),this.version&&(e+=`&v=${this.version}`),this.mapIds&&(e+=`&map_ids=${this.mapIds.join(",")}`),this.authReferrerPolicy&&(e+=`&auth_referrer_policy=${this.authReferrerPolicy}`),e}deleteScript(){const e=document.getElementById(this.id);e&&e.remove()}load(){return this.loadPromise()}loadPromise(){return new Promise((e,t)=>{this.loadCallback(a=>{a?t(a.error):e(window.google)})})}importLibrary(e){return this.execute(),google.maps.importLibrary(e)}loadCallback(e){this.callbacks.push(e),this.execute()}setScript(){var e,t;if(document.getElementById(this.id)){this.callback();return}const a={key:this.apiKey,channel:this.channel,client:this.client,libraries:this.libraries.length&&this.libraries,v:this.version,mapIds:this.mapIds,language:this.language,region:this.region,authReferrerPolicy:this.authReferrerPolicy};Object.keys(a).forEach(i=>!a[i]&&delete a[i]),!((t=(e=window==null?void 0:window.google)===null||e===void 0?void 0:e.maps)===null||t===void 0)&&t.importLibrary||(i=>{let n,c,m,g="The Google Maps JavaScript API",u="google",l="importLibrary",d="__ib__",h=document,s=window;s=s[u]||(s[u]={});const p=s.maps||(s.maps={}),y=new Set,f=new URLSearchParams,C=()=>n||(n=new Promise((b,w)=>pe(this,void 0,void 0,function*(){var E;yield c=h.createElement("script"),c.id=this.id,f.set("libraries",[...y]+"");for(m in i)f.set(m.replace(/[A-Z]/g,$=>"_"+$[0].toLowerCase()),i[m]);f.set("callback",u+".maps."+d),c.src=this.url+"?"+f,p[d]=b,c.onerror=()=>n=w(Error(g+" could not load.")),c.nonce=this.nonce||((E=h.querySelector("script[nonce]"))===null||E===void 0?void 0:E.nonce)||"",h.head.append(c)})));p[l]?console.warn(g+" only loads once. Ignoring:",i):p[l]=(b,...w)=>y.add(b)&&C().then(()=>p[l](b,...w))})(a);const r=this.libraries.map(i=>this.importLibrary(i));r.length||r.push(this.importLibrary("core")),Promise.all(r).then(()=>this.callback(),i=>{const n=new ErrorEvent("error",{error:i});this.loadErrorCallback(n)})}reset(){this.deleteScript(),this.done=!1,this.loading=!1,this.errors=[],this.onerrorEvent=null}resetIfRetryingFailed(){this.failed&&this.reset()}loadErrorCallback(e){if(this.errors.push(e),this.errors.length<=this.retries){const t=this.errors.length*Math.pow(2,this.errors.length);console.error(`Failed to load Google Maps script, retrying in ${t} ms.`),setTimeout(()=>{this.deleteScript(),this.setScript()},t)}else this.onerrorEvent=e,this.callback()}callback(){this.done=!0,this.loading=!1,this.callbacks.forEach(e=>{e(this.onerrorEvent)}),this.callbacks=[]}execute(){if(this.resetIfRetryingFailed(),this.done)this.callback();else{if(window.google&&window.google.maps&&window.google.maps.version){console.warn("Google Maps already loaded outside @googlemaps/js-api-loader.This may result in undesirable behavior as options and script parameters may not match."),this.callback();return}this.loading||(this.loading=!0,this.setScript())}}}function me(o){return class extends o.OverlayView{constructor(e){super(),z(this,"element"),z(this,"opts");const{element:t,...a}=e;this.element=t,this.opts=a,this.opts.map&&this.setMap(this.opts.map)}getPosition(){return this.opts.position?this.opts.position instanceof o.LatLng?this.opts.position:new o.LatLng(this.opts.position):null}getVisible(){if(!this.element)return!1;const e=this.element;return e.style.display!=="none"&&e.style.visibility!=="hidden"&&(e.style.opacity===""||Number(e.style.opacity)>.01)}onAdd(){if(!this.element)return;const e=this.getPanes();e&&e.overlayMouseTarget.appendChild(this.element)}draw(){if(!this.element)return;const e=this.getProjection(),t=e==null?void 0:e.fromLatLngToDivPixel(this.getPosition());if(t){this.element.style.position="absolute";const a=this.element.offsetHeight,r=this.element.offsetWidth;let i,n;switch(this.opts.anchorPoint){case"TOP_CENTER":i=t.x-r/2,n=t.y;break;case"BOTTOM_CENTER":i=t.x-r/2,n=t.y-a;break;case"LEFT_CENTER":i=t.x,n=t.y-a/2;break;case"RIGHT_CENTER":i=t.x-r,n=t.y-a/2;break;case"TOP_LEFT":i=t.x,n=t.y;break;case"TOP_RIGHT":i=t.x-r,n=t.y;break;case"BOTTOM_LEFT":i=t.x,n=t.y-a;break;case"BOTTOM_RIGHT":i=t.x-r,n=t.y-a;break;default:i=t.x-r/2,n=t.y-a/2}this.element.style.left=i+"px",this.element.style.top=n+"px",this.element.style.transform=`translateX(${this.opts.offsetX||0}px) translateY(${this.opts.offsetY||0}px)`,this.opts.zIndex&&(this.element.style.zIndex=this.opts.zIndex.toString())}}onRemove(){this.element&&this.element.remove()}setOptions(e){const{element:t,...a}=e;this.element=t,this.opts=a,this.draw()}}}let D;const K=["bounds_changed","center_changed","click","contextmenu","dblclick","drag","dragend","dragstart","heading_changed","idle","isfractionalzoomenabled_changed","mapcapabilities_changed","maptypeid_changed","mousemove","mouseout","mouseover","projection_changed","renderingtype_changed","rightclick","tilesloaded","tilt_changed","zoom_changed"],ge=G({props:{apiPromise:{type:Promise},apiKey:{type:String,default:""},version:{type:String,default:"weekly"},libraries:{type:Array,default:()=>["places"]},region:{type:String,required:!1},language:{type:String,required:!1},backgroundColor:{type:String,required:!1},center:{type:Object,default:()=>({lat:0,lng:0})},clickableIcons:{type:Boolean,required:!1,default:void 0},controlSize:{type:Number,required:!1},disableDefaultUi:{type:Boolean,required:!1,default:void 0},disableDoubleClickZoom:{type:Boolean,required:!1,default:void 0},draggable:{type:Boolean,required:!1,default:void 0},draggableCursor:{type:String,required:!1},draggingCursor:{type:String,required:!1},fullscreenControl:{type:Boolean,required:!1,default:void 0},fullscreenControlPosition:{type:String,required:!1},gestureHandling:{type:String,required:!1},heading:{type:Number,required:!1},isFractionalZoomEnabled:{type:Boolean,required:!1,default:void 0},keyboardShortcuts:{type:Boolean,required:!1,default:void 0},mapTypeControl:{type:Boolean,required:!1,default:void 0},mapTypeControlOptions:{type:Object,required:!1},mapTypeId:{type:[Number,String],required:!1},mapId:{type:String,required:!1},maxZoom:{type:Number,required:!1},minZoom:{type:Number,required:!1},noClear:{type:Boolean,required:!1,default:void 0},panControl:{type:Boolean,required:!1,default:void 0},panControlPosition:{type:String,required:!1},restriction:{type:Object,required:!1},rotateControl:{type:Boolean,required:!1,default:void 0},rotateControlPosition:{type:String,required:!1},scaleControl:{type:Boolean,required:!1,default:void 0},scaleControlStyle:{type:Number,required:!1},scrollwheel:{type:Boolean,required:!1,default:void 0},streetView:{type:Object,required:!1},streetViewControl:{type:Boolean,required:!1,default:void 0},streetViewControlPosition:{type:String,required:!1},styles:{type:Array,required:!1},tilt:{type:Number,required:!1},zoom:{type:Number,required:!1},zoomControl:{type:Boolean,required:!1,default:void 0},zoomControlPosition:{type:String,required:!1},nonce:{type:String,default:""}},emits:K,setup(o,{emit:e}){const t=v(),a=v(!1),r=v(),i=v(),n=v(!1);M(H,r),M(J,i),M(de,n);const c=()=>{const l={...o};Object.keys(l).forEach(s=>{l[s]===void 0&&delete l[s]});const d=s=>{var p;return s?{position:(p=i.value)==null?void 0:p.ControlPosition[s]}:{}},h={scaleControlOptions:o.scaleControlStyle?{style:o.scaleControlStyle}:{},panControlOptions:d(o.panControlPosition),zoomControlOptions:d(o.zoomControlPosition),rotateControlOptions:d(o.rotateControlPosition),streetViewControlOptions:d(o.streetViewControlPosition),fullscreenControlOptions:d(o.fullscreenControlPosition),disableDefaultUI:o.disableDefaultUi};return{...l,...h}},m=x([i,r],([l,d])=>{const h=l,s=d;h&&s&&(h.event.addListenerOnce(s,"tilesloaded",()=>{n.value=!0}),setTimeout(m,0))},{immediate:!0}),g=()=>{try{const{apiKey:l,region:d,version:h,language:s,libraries:p,nonce:y}=o;D=new k({apiKey:l,region:d,version:h,language:s,libraries:p,nonce:y})}catch(l){console.error(l)}},u=l=>{i.value=I(l.maps),r.value=I(new l.maps.Map(t.value,c()));const d=me(i.value);i.value[j]=d,K.forEach(s=>{var p;(p=r.value)==null||p.addListener(s,y=>e(s,y))}),a.value=!0;const h=Object.keys(o).filter(s=>!["apiPromise","apiKey","version","libraries","region","language","center","zoom","nonce"].includes(s)).map(s=>ae(o,s));x([()=>o.center,()=>o.zoom,...h],([s,p],[y,f])=>{var C,b,w;const{center:E,zoom:$,...Y}=c();(C=r.value)==null||C.setOptions(Y),p!==void 0&&p!==f&&((b=r.value)==null||b.setZoom(p));const Q=!y||s.lng!==y.lng||s.lat!==y.lat;s&&Q&&((w=r.value)==null||w.panTo(s))})};return ee(()=>{o.apiPromise&&o.apiPromise instanceof Promise?o.apiPromise.then(u):(g(),D.load().then(u))}),V(()=>{var l;n.value=!1,r.value&&((l=i.value)==null||l.event.clearInstanceListeners(r.value))}),{mapRef:t,ready:a,map:r,api:i,mapTilesLoaded:n}}}),X=(o,e)=>{const t=o.__vccOpts||o;for(const[a,r]of e)t[a]=r;return t},ye={ref:"mapRef",class:"mapdiv"};function ve(o,e,t,a,r,i){return L(),P("div",null,[_("div",ye,null,512),Z(o.$slots,"default",te(oe({ready:o.ready,map:o.map,api:o.api,mapTilesLoaded:o.mapTilesLoaded})),void 0,!0)])}const fe=X(ge,[["render",ve],["__scopeId","data-v-dbf82c40"]]);function be(o){return o&&o.__esModule&&Object.prototype.hasOwnProperty.call(o,"default")?o.default:o}var ke=function o(e,t){if(e===t)return!0;if(e&&t&&typeof e=="object"&&typeof t=="object"){if(e.constructor!==t.constructor)return!1;var a,r,i;if(Array.isArray(e)){if(a=e.length,a!=t.length)return!1;for(r=a;r--!==0;)if(!o(e[r],t[r]))return!1;return!0}if(e.constructor===RegExp)return e.source===t.source&&e.flags===t.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===t.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===t.toString();if(i=Object.keys(e),a=i.length,a!==Object.keys(t).length)return!1;for(r=a;r--!==0;)if(!Object.prototype.hasOwnProperty.call(t,i[r]))return!1;for(r=a;r--!==0;){var n=i[r];if(!o(e[n],t[n]))return!1}return!0}return e!==e&&t!==t};const Ce=be(ke),we=o=>o==="Marker",Oe=o=>o===j,Se=(o,e,t,a)=>{const r=v(),i=R(H,v()),n=R(J,v()),c=R(ue,v()),m=B(()=>!!(c.value&&n.value&&(r.value instanceof n.value.Marker||r.value instanceof n.value[j])));return x([i,t],(g,[u,l])=>{var d,h,s;const p=!Ce(t.value,l)||i.value!==u;!i.value||!n.value||!p||(r.value?(r.value.setOptions(t.value),m.value&&((d=c.value)==null||d.removeMarker(r.value),(h=c.value)==null||h.addMarker(r.value))):(we(o)?r.value=I(new n.value[o](t.value)):Oe(o)?r.value=I(new n.value[o](t.value)):r.value=I(new n.value[o]({...t.value,map:i.value})),m.value?(s=c.value)==null||s.addMarker(r.value):r.value.setMap(i.value),e.forEach(y=>{var f;(f=r.value)==null||f.addListener(y,C=>a(y,C))})))},{immediate:!0}),V(()=>{var g,u;r.value&&((g=n.value)==null||g.event.clearInstanceListeners(r.value),m.value?(u=c.value)==null||u.removeMarker(r.value):r.value.setMap(null))}),r};W.concat(["bounds_changed"]);W.concat(["center_changed","radius_changed"]);var A;(function(o){o.CLUSTERING_BEGIN="clusteringbegin",o.CLUSTERING_END="clusteringend",o.CLUSTER_CLICK="click"})(A||(A={}));Object.values(A);const Le=G({inheritAttrs:!1,props:{options:{type:Object,required:!0}},setup(o,{slots:e,emit:t,expose:a}){const r=v(),i=B(()=>{var m;return(m=e.default)==null?void 0:m.call(e).some(g=>g.type!==re)}),n=B(()=>({...o.options,element:r.value})),c=Se(j,[],n,t);return a({customMarker:c}),{customMarkerRef:r,customMarker:c,hasSlotContent:i}}}),Pe={key:0,class:"custom-marker-wrapper"};function _e(o,e,t,a,r,i){return o.hasSlotContent?(L(),P("div",Pe,[_("div",ie({ref:"customMarkerRef",style:{cursor:o.$attrs.onClick?"pointer":void 0}},o.$attrs),[Z(o.$slots,"default",{},void 0,!0)],16)])):q("",!0)}const F=X(Le,[["render",_e],["__scopeId","data-v-2d2d343a"]]),Ie={key:0},Ee={key:0},qe={style:{"text-align":"center"},class:"hover:cursor-pointer"},je={key:1},Me={style:{"text-align":"center"},class:"hover:cursor-pointer"},Re={props:{user:{type:Object},onLine:{type:Boolean}},data(){return{googleMapsApiKey:"AIzaSyDXjC1FcOxhFWaPYaPqA4jnjocup7wr0fw",mapZoom:2,mapCenter:{lat:33,lng:44},latitude:"",longitude:"",userPosition:{},markerOptions:{},ownLocationRequested:!1,selectedLocationMarkerOptions:{},selectedLocationCenter:{lat:0,lng:0},selectedLocation:!1}},methods:{async getMyLocation(){try{const o=await ne();this.latitude=o.coords.latitude,this.longitude=o.coords.longitude,this.userPosition={lat:this.latitude,lng:this.longitude},this.markerOptions={position:this.userPosition,label:"U",title:"Current Location"},this.mapCenter=this.userPosition,this.mapZoom=12,this.ownLocationRequested=!0}catch(o){console.error("Error getting location:",o)}},handleMapClick(o){const e=o.latLng,t=e.lat(),a=e.lng();this.selectedLocationCenter={lat:t,lng:a},this.selectedLocation=!0,this.selectedLocationMarkerOptions={position:this.selectedLocationCenter},this.mapCenter=this.selectedLocationCenter}}},Ne=Object.assign(Re,{__name:"MapView",setup(o){return(e,t)=>{const a=se("v-icon");return o.onLine?(L(),P("section",Ie,[_("button",{class:"mt-12 px-2 py-2 rounded-sm border border-red-400 bg-slate-50",onClick:t[0]||(t[0]=(...r)=>e.getMyLocation&&e.getMyLocation(...r))},"My location"),S(N(fe),{"api-key":e.googleMapsApiKey,style:{width:"100%",height:"75vh"},center:e.mapCenter,zoom:e.mapZoom,onClick:e.handleMapClick},{default:T(()=>[e.ownLocationRequested?(L(),P("div",Ee,[S(N(F),{options:e.markerOptions},{default:T(()=>[_("div",qe,[S(a,{name:"fa-map-marker-alt",scale:"2",fill:"red"})])]),_:1},8,["options"])])):q("",!0),e.selectedLocation?(L(),P("div",je,[S(N(F),{options:e.selectedLocationMarkerOptions},{default:T(()=>[_("div",Me,[S(a,{name:"fa-map-marker-alt",scale:"2",fill:"orange"})])]),_:1},8,["options"])])):q("",!0)]),_:1},8,["api-key","center","zoom","onClick"])])):q("",!0)}}});export{Ne as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwVmlldy1qckJFamxqeS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vZnJvbnRlbmQvbm9kZV9tb2R1bGVzL3Z1ZTMtZ29vZ2xlLW1hcC9kaXN0L2luZGV4Lm1qcyIsIi4uLy4uLy4uLy4uL2Zyb250ZW5kL3NyYy92aWV3cy9NYXBWaWV3LnZ1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt0cnl7aWYodHlwZW9mIGRvY3VtZW50PFwidVwiKXt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7YS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIi5tYXBkaXZbZGF0YS12LWRiZjgyYzQwXXt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS5jdXN0b20tY29udHJvbC13cmFwcGVyW2RhdGEtdi1kMDk5YTNhNl17ZGlzcGxheTpub25lfS5tYXBkaXYgLmN1c3RvbS1jb250cm9sLXdyYXBwZXJbZGF0YS12LWQwOTlhM2E2XXtkaXNwbGF5OmlubGluZS1ibG9ja30uaW5mby13aW5kb3ctd3JhcHBlcltkYXRhLXYtY2JlMTcwN2Jde2Rpc3BsYXk6bm9uZX0ubWFwZGl2IC5pbmZvLXdpbmRvdy13cmFwcGVyW2RhdGEtdi1jYmUxNzA3Yl17ZGlzcGxheTppbmxpbmUtYmxvY2t9LmN1c3RvbS1tYXJrZXItd3JhcHBlcltkYXRhLXYtMmQyZDM0M2Fde2Rpc3BsYXk6bm9uZX0ubWFwZGl2IC5jdXN0b20tbWFya2VyLXdyYXBwZXJbZGF0YS12LTJkMmQzNDNhXXtkaXNwbGF5OmlubGluZS1ibG9ja31cIikpLGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoYSl9fWNhdGNoKGQpe2NvbnNvbGUuZXJyb3IoXCJ2aXRlLXBsdWdpbi1jc3MtaW5qZWN0ZWQtYnktanNcIixkKX19KSgpO1xudmFyIHFlID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIEJlID0gKG4sIGUsIHQpID0+IGUgaW4gbiA/IHFlKG4sIGUsIHsgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCwgdmFsdWU6IHQgfSkgOiBuW2VdID0gdDtcbnZhciBzZSA9IChuLCBlLCB0KSA9PiAoQmUobiwgdHlwZW9mIGUgIT0gXCJzeW1ib2xcIiA/IGUgKyBcIlwiIDogZSwgdCksIHQpO1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IGFzIFAsIHJlZiBhcyB5LCBwcm92aWRlIGFzIEcsIHdhdGNoIGFzIE8sIG9uTW91bnRlZCBhcyBNZSwgb25CZWZvcmVVbm1vdW50IGFzIEIsIG1hcmtSYXcgYXMgSSwgdG9SZWYgYXMgWiwgb3BlbkJsb2NrIGFzIFksIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBYLCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgYWUsIHJlbmRlclNsb3QgYXMgUSwgbm9ybWFsaXplUHJvcHMgYXMgWmUsIGd1YXJkUmVhY3RpdmVQcm9wcyBhcyBOZSwgaW5qZWN0IGFzIEMsIGNvbXB1dGVkIGFzIEosIENvbW1lbnQgYXMgRWUsIG1lcmdlUHJvcHMgYXMgUGUsIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyBPZSB9IGZyb20gXCJ2dWVcIjtcbmNvbnN0IE4gPSBTeW1ib2woXCJtYXBcIiksIFUgPSBTeW1ib2woXCJhcGlcIiksIHhlID0gU3ltYm9sKFwibWFya2VyXCIpLCBMZSA9IFN5bWJvbChcIm1hcmtlckNsdXN0ZXJcIiksIGVlID0gU3ltYm9sKFwiQ3VzdG9tTWFya2VyXCIpLCBTZSA9IFN5bWJvbChcIm1hcFRpbGVzTG9hZGVkXCIpLCBxID0gW1xuICBcImNsaWNrXCIsXG4gIFwiZGJsY2xpY2tcIixcbiAgXCJkcmFnXCIsXG4gIFwiZHJhZ2VuZFwiLFxuICBcImRyYWdzdGFydFwiLFxuICBcIm1vdXNlZG93blwiLFxuICBcIm1vdXNlbW92ZVwiLFxuICBcIm1vdXNlb3V0XCIsXG4gIFwibW91c2VvdmVyXCIsXG4gIFwibW91c2V1cFwiLFxuICBcInJpZ2h0Y2xpY2tcIlxuXTtcbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuZnVuY3Rpb24gVWUobiwgZSwgdCwgcykge1xuICBmdW5jdGlvbiByKG8pIHtcbiAgICByZXR1cm4gbyBpbnN0YW5jZW9mIHQgPyBvIDogbmV3IHQoZnVuY3Rpb24oYSkge1xuICAgICAgYShvKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbmV3ICh0IHx8ICh0ID0gUHJvbWlzZSkpKGZ1bmN0aW9uKG8sIGEpIHtcbiAgICBmdW5jdGlvbiBsKHUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGQocy5uZXh0KHUpKTtcbiAgICAgIH0gY2F0Y2ggKGMpIHtcbiAgICAgICAgYShjKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaSh1KSB7XG4gICAgICB0cnkge1xuICAgICAgICBkKHMudGhyb3codSkpO1xuICAgICAgfSBjYXRjaCAoYykge1xuICAgICAgICBhKGMpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBkKHUpIHtcbiAgICAgIHUuZG9uZSA/IG8odS52YWx1ZSkgOiByKHUudmFsdWUpLnRoZW4obCwgaSk7XG4gICAgfVxuICAgIGQoKHMgPSBzLmFwcGx5KG4sIGUgfHwgW10pKS5uZXh0KCkpO1xuICB9KTtcbn1cbnZhciBEZSA9IGZ1bmN0aW9uIG4oZSwgdCkge1xuICBpZiAoZSA9PT0gdClcbiAgICByZXR1cm4gITA7XG4gIGlmIChlICYmIHQgJiYgdHlwZW9mIGUgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdCA9PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKGUuY29uc3RydWN0b3IgIT09IHQuY29uc3RydWN0b3IpXG4gICAgICByZXR1cm4gITE7XG4gICAgdmFyIHMsIHIsIG87XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGlmIChzID0gZS5sZW5ndGgsIHMgIT0gdC5sZW5ndGgpXG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIGZvciAociA9IHM7IHItLSAhPT0gMDsgKVxuICAgICAgICBpZiAoIW4oZVtyXSwgdFtyXSkpXG4gICAgICAgICAgcmV0dXJuICExO1xuICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICBpZiAoZS5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwKVxuICAgICAgcmV0dXJuIGUuc291cmNlID09PSB0LnNvdXJjZSAmJiBlLmZsYWdzID09PSB0LmZsYWdzO1xuICAgIGlmIChlLnZhbHVlT2YgIT09IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZilcbiAgICAgIHJldHVybiBlLnZhbHVlT2YoKSA9PT0gdC52YWx1ZU9mKCk7XG4gICAgaWYgKGUudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpXG4gICAgICByZXR1cm4gZS50b1N0cmluZygpID09PSB0LnRvU3RyaW5nKCk7XG4gICAgaWYgKG8gPSBPYmplY3Qua2V5cyhlKSwgcyA9IG8ubGVuZ3RoLCBzICE9PSBPYmplY3Qua2V5cyh0KS5sZW5ndGgpXG4gICAgICByZXR1cm4gITE7XG4gICAgZm9yIChyID0gczsgci0tICE9PSAwOyApXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LCBvW3JdKSlcbiAgICAgICAgcmV0dXJuICExO1xuICAgIGZvciAociA9IHM7IHItLSAhPT0gMDsgKSB7XG4gICAgICB2YXIgYSA9IG9bcl07XG4gICAgICBpZiAoIW4oZVthXSwgdFthXSkpXG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIHJldHVybiBlICE9PSBlICYmIHQgIT09IHQ7XG59O1xuY29uc3QgZGUgPSBcIl9fZ29vZ2xlTWFwc1NjcmlwdElkXCI7XG52YXIgUjtcbihmdW5jdGlvbihuKSB7XG4gIG5bbi5JTklUSUFMSVpFRCA9IDBdID0gXCJJTklUSUFMSVpFRFwiLCBuW24uTE9BRElORyA9IDFdID0gXCJMT0FESU5HXCIsIG5bbi5TVUNDRVNTID0gMl0gPSBcIlNVQ0NFU1NcIiwgbltuLkZBSUxVUkUgPSAzXSA9IFwiRkFJTFVSRVwiO1xufSkoUiB8fCAoUiA9IHt9KSk7XG5jbGFzcyBUIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgTG9hZGVyIHVzaW5nIFtbTG9hZGVyT3B0aW9uc11dLiBObyBkZWZhdWx0cyBhcmUgc2V0XG4gICAqIHVzaW5nIHRoaXMgbGlicmFyeSwgaW5zdGVhZCB0aGUgZGVmYXVsdHMgYXJlIHNldCBieSB0aGUgR29vZ2xlIE1hcHNcbiAgICogSmF2YVNjcmlwdCBBUEkgc2VydmVyLlxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgbG9hZGVyID0gTG9hZGVyKHthcGlLZXksIHZlcnNpb246ICd3ZWVrbHknLCBsaWJyYXJpZXM6IFsncGxhY2VzJ119KTtcbiAgICogYGBgXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGFwaUtleTogZSwgYXV0aFJlZmVycmVyUG9saWN5OiB0LCBjaGFubmVsOiBzLCBjbGllbnQ6IHIsIGlkOiBvID0gZGUsIGxhbmd1YWdlOiBhLCBsaWJyYXJpZXM6IGwgPSBbXSwgbWFwSWRzOiBpLCBub25jZTogZCwgcmVnaW9uOiB1LCByZXRyaWVzOiBjID0gMywgdXJsOiBoID0gXCJodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanNcIiwgdmVyc2lvbjogcCB9KSB7XG4gICAgaWYgKHRoaXMuY2FsbGJhY2tzID0gW10sIHRoaXMuZG9uZSA9ICExLCB0aGlzLmxvYWRpbmcgPSAhMSwgdGhpcy5lcnJvcnMgPSBbXSwgdGhpcy5hcGlLZXkgPSBlLCB0aGlzLmF1dGhSZWZlcnJlclBvbGljeSA9IHQsIHRoaXMuY2hhbm5lbCA9IHMsIHRoaXMuY2xpZW50ID0gciwgdGhpcy5pZCA9IG8gfHwgZGUsIHRoaXMubGFuZ3VhZ2UgPSBhLCB0aGlzLmxpYnJhcmllcyA9IGwsIHRoaXMubWFwSWRzID0gaSwgdGhpcy5ub25jZSA9IGQsIHRoaXMucmVnaW9uID0gdSwgdGhpcy5yZXRyaWVzID0gYywgdGhpcy51cmwgPSBoLCB0aGlzLnZlcnNpb24gPSBwLCBULmluc3RhbmNlKSB7XG4gICAgICBpZiAoIURlKHRoaXMub3B0aW9ucywgVC5pbnN0YW5jZS5vcHRpb25zKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMb2FkZXIgbXVzdCBub3QgYmUgY2FsbGVkIGFnYWluIHdpdGggZGlmZmVyZW50IG9wdGlvbnMuICR7SlNPTi5zdHJpbmdpZnkodGhpcy5vcHRpb25zKX0gIT09ICR7SlNPTi5zdHJpbmdpZnkoVC5pbnN0YW5jZS5vcHRpb25zKX1gKTtcbiAgICAgIHJldHVybiBULmluc3RhbmNlO1xuICAgIH1cbiAgICBULmluc3RhbmNlID0gdGhpcztcbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmVyc2lvbjogdGhpcy52ZXJzaW9uLFxuICAgICAgYXBpS2V5OiB0aGlzLmFwaUtleSxcbiAgICAgIGNoYW5uZWw6IHRoaXMuY2hhbm5lbCxcbiAgICAgIGNsaWVudDogdGhpcy5jbGllbnQsXG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIGxpYnJhcmllczogdGhpcy5saWJyYXJpZXMsXG4gICAgICBsYW5ndWFnZTogdGhpcy5sYW5ndWFnZSxcbiAgICAgIHJlZ2lvbjogdGhpcy5yZWdpb24sXG4gICAgICBtYXBJZHM6IHRoaXMubWFwSWRzLFxuICAgICAgbm9uY2U6IHRoaXMubm9uY2UsXG4gICAgICB1cmw6IHRoaXMudXJsLFxuICAgICAgYXV0aFJlZmVycmVyUG9saWN5OiB0aGlzLmF1dGhSZWZlcnJlclBvbGljeVxuICAgIH07XG4gIH1cbiAgZ2V0IHN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5lcnJvcnMubGVuZ3RoID8gUi5GQUlMVVJFIDogdGhpcy5kb25lID8gUi5TVUNDRVNTIDogdGhpcy5sb2FkaW5nID8gUi5MT0FESU5HIDogUi5JTklUSUFMSVpFRDtcbiAgfVxuICBnZXQgZmFpbGVkKCkge1xuICAgIHJldHVybiB0aGlzLmRvbmUgJiYgIXRoaXMubG9hZGluZyAmJiB0aGlzLmVycm9ycy5sZW5ndGggPj0gdGhpcy5yZXRyaWVzICsgMTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlVXJsIHJldHVybnMgdGhlIEdvb2dsZSBNYXBzIEphdmFTY3JpcHQgQVBJIHNjcmlwdCB1cmwgZ2l2ZW4gdGhlIFtbTG9hZGVyT3B0aW9uc11dLlxuICAgKlxuICAgKiBAaWdub3JlXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBjcmVhdGVVcmwoKSB7XG4gICAgbGV0IGUgPSB0aGlzLnVybDtcbiAgICByZXR1cm4gZSArPSBcIj9jYWxsYmFjaz1fX2dvb2dsZU1hcHNDYWxsYmFja1wiLCB0aGlzLmFwaUtleSAmJiAoZSArPSBgJmtleT0ke3RoaXMuYXBpS2V5fWApLCB0aGlzLmNoYW5uZWwgJiYgKGUgKz0gYCZjaGFubmVsPSR7dGhpcy5jaGFubmVsfWApLCB0aGlzLmNsaWVudCAmJiAoZSArPSBgJmNsaWVudD0ke3RoaXMuY2xpZW50fWApLCB0aGlzLmxpYnJhcmllcy5sZW5ndGggPiAwICYmIChlICs9IGAmbGlicmFyaWVzPSR7dGhpcy5saWJyYXJpZXMuam9pbihcIixcIil9YCksIHRoaXMubGFuZ3VhZ2UgJiYgKGUgKz0gYCZsYW5ndWFnZT0ke3RoaXMubGFuZ3VhZ2V9YCksIHRoaXMucmVnaW9uICYmIChlICs9IGAmcmVnaW9uPSR7dGhpcy5yZWdpb259YCksIHRoaXMudmVyc2lvbiAmJiAoZSArPSBgJnY9JHt0aGlzLnZlcnNpb259YCksIHRoaXMubWFwSWRzICYmIChlICs9IGAmbWFwX2lkcz0ke3RoaXMubWFwSWRzLmpvaW4oXCIsXCIpfWApLCB0aGlzLmF1dGhSZWZlcnJlclBvbGljeSAmJiAoZSArPSBgJmF1dGhfcmVmZXJyZXJfcG9saWN5PSR7dGhpcy5hdXRoUmVmZXJyZXJQb2xpY3l9YCksIGU7XG4gIH1cbiAgZGVsZXRlU2NyaXB0KCkge1xuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKTtcbiAgICBlICYmIGUucmVtb3ZlKCk7XG4gIH1cbiAgLyoqXG4gICAqIExvYWQgdGhlIEdvb2dsZSBNYXBzIEphdmFTY3JpcHQgQVBJIHNjcmlwdCBhbmQgcmV0dXJuIGEgUHJvbWlzZS5cbiAgICogQGRlcHJlY2F0ZWQsIHVzZSBpbXBvcnRMaWJyYXJ5KCkgaW5zdGVhZC5cbiAgICovXG4gIGxvYWQoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9hZFByb21pc2UoKTtcbiAgfVxuICAvKipcbiAgICogTG9hZCB0aGUgR29vZ2xlIE1hcHMgSmF2YVNjcmlwdCBBUEkgc2NyaXB0IGFuZCByZXR1cm4gYSBQcm9taXNlLlxuICAgKlxuICAgKiBAaWdub3JlXG4gICAqIEBkZXByZWNhdGVkLCB1c2UgaW1wb3J0TGlicmFyeSgpIGluc3RlYWQuXG4gICAqL1xuICBsb2FkUHJvbWlzZSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKGUsIHQpID0+IHtcbiAgICAgIHRoaXMubG9hZENhbGxiYWNrKChzKSA9PiB7XG4gICAgICAgIHMgPyB0KHMuZXJyb3IpIDogZSh3aW5kb3cuZ29vZ2xlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGltcG9ydExpYnJhcnkoZSkge1xuICAgIHJldHVybiB0aGlzLmV4ZWN1dGUoKSwgZ29vZ2xlLm1hcHMuaW1wb3J0TGlicmFyeShlKTtcbiAgfVxuICAvKipcbiAgICogTG9hZCB0aGUgR29vZ2xlIE1hcHMgSmF2YVNjcmlwdCBBUEkgc2NyaXB0IHdpdGggYSBjYWxsYmFjay5cbiAgICogQGRlcHJlY2F0ZWQsIHVzZSBpbXBvcnRMaWJyYXJ5KCkgaW5zdGVhZC5cbiAgICovXG4gIGxvYWRDYWxsYmFjayhlKSB7XG4gICAgdGhpcy5jYWxsYmFja3MucHVzaChlKSwgdGhpcy5leGVjdXRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgc2NyaXB0IG9uIGRvY3VtZW50LlxuICAgKi9cbiAgc2V0U2NyaXB0KCkge1xuICAgIHZhciBlLCB0O1xuICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKSkge1xuICAgICAgdGhpcy5jYWxsYmFjaygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzID0ge1xuICAgICAga2V5OiB0aGlzLmFwaUtleSxcbiAgICAgIGNoYW5uZWw6IHRoaXMuY2hhbm5lbCxcbiAgICAgIGNsaWVudDogdGhpcy5jbGllbnQsXG4gICAgICBsaWJyYXJpZXM6IHRoaXMubGlicmFyaWVzLmxlbmd0aCAmJiB0aGlzLmxpYnJhcmllcyxcbiAgICAgIHY6IHRoaXMudmVyc2lvbixcbiAgICAgIG1hcElkczogdGhpcy5tYXBJZHMsXG4gICAgICBsYW5ndWFnZTogdGhpcy5sYW5ndWFnZSxcbiAgICAgIHJlZ2lvbjogdGhpcy5yZWdpb24sXG4gICAgICBhdXRoUmVmZXJyZXJQb2xpY3k6IHRoaXMuYXV0aFJlZmVycmVyUG9saWN5XG4gICAgfTtcbiAgICBPYmplY3Qua2V5cyhzKS5mb3JFYWNoKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgIChvKSA9PiAhc1tvXSAmJiBkZWxldGUgc1tvXVxuICAgICksICEoKHQgPSAoZSA9IHdpbmRvdyA9PSBudWxsID8gdm9pZCAwIDogd2luZG93Lmdvb2dsZSkgPT09IG51bGwgfHwgZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZS5tYXBzKSA9PT0gbnVsbCB8fCB0ID09PSB2b2lkIDApICYmIHQuaW1wb3J0TGlicmFyeSB8fCAoKG8pID0+IHtcbiAgICAgIGxldCBhLCBsLCBpLCBkID0gXCJUaGUgR29vZ2xlIE1hcHMgSmF2YVNjcmlwdCBBUElcIiwgdSA9IFwiZ29vZ2xlXCIsIGMgPSBcImltcG9ydExpYnJhcnlcIiwgaCA9IFwiX19pYl9fXCIsIHAgPSBkb2N1bWVudCwgbSA9IHdpbmRvdztcbiAgICAgIG0gPSBtW3VdIHx8IChtW3VdID0ge30pO1xuICAgICAgY29uc3QgZiA9IG0ubWFwcyB8fCAobS5tYXBzID0ge30pLCBnID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSwgdiA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKSwgdyA9ICgpID0+IChcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBhIHx8IChhID0gbmV3IFByb21pc2UoKF8sIEUpID0+IFVlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgIHZhciBiO1xuICAgICAgICAgIHlpZWxkIGwgPSBwLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksIGwuaWQgPSB0aGlzLmlkLCB2LnNldChcImxpYnJhcmllc1wiLCBbLi4uZ10gKyBcIlwiKTtcbiAgICAgICAgICBmb3IgKGkgaW4gbylcbiAgICAgICAgICAgIHYuc2V0KGkucmVwbGFjZSgvW0EtWl0vZywgKHgpID0+IFwiX1wiICsgeFswXS50b0xvd2VyQ2FzZSgpKSwgb1tpXSk7XG4gICAgICAgICAgdi5zZXQoXCJjYWxsYmFja1wiLCB1ICsgXCIubWFwcy5cIiArIGgpLCBsLnNyYyA9IHRoaXMudXJsICsgXCI/XCIgKyB2LCBmW2hdID0gXywgbC5vbmVycm9yID0gKCkgPT4gYSA9IEUoRXJyb3IoZCArIFwiIGNvdWxkIG5vdCBsb2FkLlwiKSksIGwubm9uY2UgPSB0aGlzLm5vbmNlIHx8ICgoYiA9IHAucXVlcnlTZWxlY3RvcihcInNjcmlwdFtub25jZV1cIikpID09PSBudWxsIHx8IGIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGIubm9uY2UpIHx8IFwiXCIsIHAuaGVhZC5hcHBlbmQobCk7XG4gICAgICAgIH0pKSlcbiAgICAgICk7XG4gICAgICBmW2NdID8gY29uc29sZS53YXJuKGQgKyBcIiBvbmx5IGxvYWRzIG9uY2UuIElnbm9yaW5nOlwiLCBvKSA6IGZbY10gPSAoXywgLi4uRSkgPT4gZy5hZGQoXykgJiYgdygpLnRoZW4oKCkgPT4gZltjXShfLCAuLi5FKSk7XG4gICAgfSkocyk7XG4gICAgY29uc3QgciA9IHRoaXMubGlicmFyaWVzLm1hcCgobykgPT4gdGhpcy5pbXBvcnRMaWJyYXJ5KG8pKTtcbiAgICByLmxlbmd0aCB8fCByLnB1c2godGhpcy5pbXBvcnRMaWJyYXJ5KFwiY29yZVwiKSksIFByb21pc2UuYWxsKHIpLnRoZW4oKCkgPT4gdGhpcy5jYWxsYmFjaygpLCAobykgPT4ge1xuICAgICAgY29uc3QgYSA9IG5ldyBFcnJvckV2ZW50KFwiZXJyb3JcIiwgeyBlcnJvcjogbyB9KTtcbiAgICAgIHRoaXMubG9hZEVycm9yQ2FsbGJhY2soYSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBsb2FkZXIgc3RhdGUuXG4gICAqL1xuICByZXNldCgpIHtcbiAgICB0aGlzLmRlbGV0ZVNjcmlwdCgpLCB0aGlzLmRvbmUgPSAhMSwgdGhpcy5sb2FkaW5nID0gITEsIHRoaXMuZXJyb3JzID0gW10sIHRoaXMub25lcnJvckV2ZW50ID0gbnVsbDtcbiAgfVxuICByZXNldElmUmV0cnlpbmdGYWlsZWQoKSB7XG4gICAgdGhpcy5mYWlsZWQgJiYgdGhpcy5yZXNldCgpO1xuICB9XG4gIGxvYWRFcnJvckNhbGxiYWNrKGUpIHtcbiAgICBpZiAodGhpcy5lcnJvcnMucHVzaChlKSwgdGhpcy5lcnJvcnMubGVuZ3RoIDw9IHRoaXMucmV0cmllcykge1xuICAgICAgY29uc3QgdCA9IHRoaXMuZXJyb3JzLmxlbmd0aCAqIE1hdGgucG93KDIsIHRoaXMuZXJyb3JzLmxlbmd0aCk7XG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gbG9hZCBHb29nbGUgTWFwcyBzY3JpcHQsIHJldHJ5aW5nIGluICR7dH0gbXMuYCksIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmRlbGV0ZVNjcmlwdCgpLCB0aGlzLnNldFNjcmlwdCgpO1xuICAgICAgfSwgdCk7XG4gICAgfSBlbHNlXG4gICAgICB0aGlzLm9uZXJyb3JFdmVudCA9IGUsIHRoaXMuY2FsbGJhY2soKTtcbiAgfVxuICBjYWxsYmFjaygpIHtcbiAgICB0aGlzLmRvbmUgPSAhMCwgdGhpcy5sb2FkaW5nID0gITEsIHRoaXMuY2FsbGJhY2tzLmZvckVhY2goKGUpID0+IHtcbiAgICAgIGUodGhpcy5vbmVycm9yRXZlbnQpO1xuICAgIH0pLCB0aGlzLmNhbGxiYWNrcyA9IFtdO1xuICB9XG4gIGV4ZWN1dGUoKSB7XG4gICAgaWYgKHRoaXMucmVzZXRJZlJldHJ5aW5nRmFpbGVkKCksIHRoaXMuZG9uZSlcbiAgICAgIHRoaXMuY2FsbGJhY2soKTtcbiAgICBlbHNlIHtcbiAgICAgIGlmICh3aW5kb3cuZ29vZ2xlICYmIHdpbmRvdy5nb29nbGUubWFwcyAmJiB3aW5kb3cuZ29vZ2xlLm1hcHMudmVyc2lvbikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJHb29nbGUgTWFwcyBhbHJlYWR5IGxvYWRlZCBvdXRzaWRlIEBnb29nbGVtYXBzL2pzLWFwaS1sb2FkZXIuVGhpcyBtYXkgcmVzdWx0IGluIHVuZGVzaXJhYmxlIGJlaGF2aW9yIGFzIG9wdGlvbnMgYW5kIHNjcmlwdCBwYXJhbWV0ZXJzIG1heSBub3QgbWF0Y2guXCIpLCB0aGlzLmNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMubG9hZGluZyB8fCAodGhpcy5sb2FkaW5nID0gITAsIHRoaXMuc2V0U2NyaXB0KCkpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gRmUobikge1xuICByZXR1cm4gY2xhc3MgZXh0ZW5kcyBuLk92ZXJsYXlWaWV3IHtcbiAgICBjb25zdHJ1Y3RvcihzKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgc2UodGhpcywgXCJlbGVtZW50XCIpO1xuICAgICAgc2UodGhpcywgXCJvcHRzXCIpO1xuICAgICAgY29uc3QgeyBlbGVtZW50OiByLCAuLi5vIH0gPSBzO1xuICAgICAgdGhpcy5lbGVtZW50ID0gciwgdGhpcy5vcHRzID0gbywgdGhpcy5vcHRzLm1hcCAmJiB0aGlzLnNldE1hcCh0aGlzLm9wdHMubWFwKTtcbiAgICB9XG4gICAgZ2V0UG9zaXRpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRzLnBvc2l0aW9uID8gdGhpcy5vcHRzLnBvc2l0aW9uIGluc3RhbmNlb2Ygbi5MYXRMbmcgPyB0aGlzLm9wdHMucG9zaXRpb24gOiBuZXcgbi5MYXRMbmcodGhpcy5vcHRzLnBvc2l0aW9uKSA6IG51bGw7XG4gICAgfVxuICAgIGdldFZpc2libGUoKSB7XG4gICAgICBpZiAoIXRoaXMuZWxlbWVudClcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgY29uc3QgcyA9IHRoaXMuZWxlbWVudDtcbiAgICAgIHJldHVybiBzLnN0eWxlLmRpc3BsYXkgIT09IFwibm9uZVwiICYmIHMuc3R5bGUudmlzaWJpbGl0eSAhPT0gXCJoaWRkZW5cIiAmJiAocy5zdHlsZS5vcGFjaXR5ID09PSBcIlwiIHx8IE51bWJlcihzLnN0eWxlLm9wYWNpdHkpID4gMC4wMSk7XG4gICAgfVxuICAgIG9uQWRkKCkge1xuICAgICAgaWYgKCF0aGlzLmVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHMgPSB0aGlzLmdldFBhbmVzKCk7XG4gICAgICBzICYmIHMub3ZlcmxheU1vdXNlVGFyZ2V0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICBpZiAoIXRoaXMuZWxlbWVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgcyA9IHRoaXMuZ2V0UHJvamVjdGlvbigpLCByID0gcyA9PSBudWxsID8gdm9pZCAwIDogcy5mcm9tTGF0TG5nVG9EaXZQaXhlbCh0aGlzLmdldFBvc2l0aW9uKCkpO1xuICAgICAgaWYgKHIpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICBjb25zdCBvID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodCwgYSA9IHRoaXMuZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgbGV0IGwsIGk7XG4gICAgICAgIHN3aXRjaCAodGhpcy5vcHRzLmFuY2hvclBvaW50KSB7XG4gICAgICAgICAgY2FzZSBcIlRPUF9DRU5URVJcIjpcbiAgICAgICAgICAgIGwgPSByLnggLSBhIC8gMiwgaSA9IHIueTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJCT1RUT01fQ0VOVEVSXCI6XG4gICAgICAgICAgICBsID0gci54IC0gYSAvIDIsIGkgPSByLnkgLSBvO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkxFRlRfQ0VOVEVSXCI6XG4gICAgICAgICAgICBsID0gci54LCBpID0gci55IC0gbyAvIDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiUklHSFRfQ0VOVEVSXCI6XG4gICAgICAgICAgICBsID0gci54IC0gYSwgaSA9IHIueSAtIG8gLyAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIlRPUF9MRUZUXCI6XG4gICAgICAgICAgICBsID0gci54LCBpID0gci55O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIlRPUF9SSUdIVFwiOlxuICAgICAgICAgICAgbCA9IHIueCAtIGEsIGkgPSByLnk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiQk9UVE9NX0xFRlRcIjpcbiAgICAgICAgICAgIGwgPSByLngsIGkgPSByLnkgLSBvO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkJPVFRPTV9SSUdIVFwiOlxuICAgICAgICAgICAgbCA9IHIueCAtIGEsIGkgPSByLnkgLSBvO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGwgPSByLnggLSBhIC8gMiwgaSA9IHIueSAtIG8gLyAyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5sZWZ0ID0gbCArIFwicHhcIiwgdGhpcy5lbGVtZW50LnN0eWxlLnRvcCA9IGkgKyBcInB4XCIsIHRoaXMuZWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RoaXMub3B0cy5vZmZzZXRYIHx8IDB9cHgpIHRyYW5zbGF0ZVkoJHt0aGlzLm9wdHMub2Zmc2V0WSB8fCAwfXB4KWAsIHRoaXMub3B0cy56SW5kZXggJiYgKHRoaXMuZWxlbWVudC5zdHlsZS56SW5kZXggPSB0aGlzLm9wdHMuekluZGV4LnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgIH1cbiAgICBvblJlbW92ZSgpIHtcbiAgICAgIHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfVxuICAgIHNldE9wdGlvbnMocykge1xuICAgICAgY29uc3QgeyBlbGVtZW50OiByLCAuLi5vIH0gPSBzO1xuICAgICAgdGhpcy5lbGVtZW50ID0gciwgdGhpcy5vcHRzID0gbywgdGhpcy5kcmF3KCk7XG4gICAgfVxuICB9O1xufVxubGV0IGhlO1xuY29uc3QgcGUgPSBbXG4gIFwiYm91bmRzX2NoYW5nZWRcIixcbiAgXCJjZW50ZXJfY2hhbmdlZFwiLFxuICBcImNsaWNrXCIsXG4gIFwiY29udGV4dG1lbnVcIixcbiAgXCJkYmxjbGlja1wiLFxuICBcImRyYWdcIixcbiAgXCJkcmFnZW5kXCIsXG4gIFwiZHJhZ3N0YXJ0XCIsXG4gIFwiaGVhZGluZ19jaGFuZ2VkXCIsXG4gIFwiaWRsZVwiLFxuICBcImlzZnJhY3Rpb25hbHpvb21lbmFibGVkX2NoYW5nZWRcIixcbiAgXCJtYXBjYXBhYmlsaXRpZXNfY2hhbmdlZFwiLFxuICBcIm1hcHR5cGVpZF9jaGFuZ2VkXCIsXG4gIFwibW91c2Vtb3ZlXCIsXG4gIFwibW91c2VvdXRcIixcbiAgXCJtb3VzZW92ZXJcIixcbiAgXCJwcm9qZWN0aW9uX2NoYW5nZWRcIixcbiAgXCJyZW5kZXJpbmd0eXBlX2NoYW5nZWRcIixcbiAgXCJyaWdodGNsaWNrXCIsXG4gIFwidGlsZXNsb2FkZWRcIixcbiAgXCJ0aWx0X2NoYW5nZWRcIixcbiAgXCJ6b29tX2NoYW5nZWRcIlxuXSwgVmUgPSBQKHtcbiAgcHJvcHM6IHtcbiAgICBhcGlQcm9taXNlOiB7XG4gICAgICB0eXBlOiBQcm9taXNlXG4gICAgfSxcbiAgICBhcGlLZXk6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IFwiXCJcbiAgICB9LFxuICAgIHZlcnNpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IFwid2Vla2x5XCJcbiAgICB9LFxuICAgIGxpYnJhcmllczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICBkZWZhdWx0OiAoKSA9PiBbXCJwbGFjZXNcIl1cbiAgICB9LFxuICAgIHJlZ2lvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBsYW5ndWFnZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgY2VudGVyOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiAoeyBsYXQ6IDAsIGxuZzogMCB9KVxuICAgIH0sXG4gICAgY2xpY2thYmxlSWNvbnM6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIGNvbnRyb2xTaXplOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIGRpc2FibGVEZWZhdWx0VWk6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIGRpc2FibGVEb3VibGVDbGlja1pvb206IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIGRyYWdnYWJsZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgZHJhZ2dhYmxlQ3Vyc29yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIGRyYWdnaW5nQ3Vyc29yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIGZ1bGxzY3JlZW5Db250cm9sOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBmdWxsc2NyZWVuQ29udHJvbFBvc2l0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIGdlc3R1cmVIYW5kbGluZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBoZWFkaW5nOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIGlzRnJhY3Rpb25hbFpvb21FbmFibGVkOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBrZXlib2FyZFNob3J0Y3V0czoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgbWFwVHlwZUNvbnRyb2w6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIG1hcFR5cGVDb250cm9sT3B0aW9uczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBtYXBUeXBlSWQ6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIG1hcElkOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIG1heFpvb206IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgbWluWm9vbToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBub0NsZWFyOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBwYW5Db250cm9sOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBwYW5Db250cm9sUG9zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgcmVzdHJpY3Rpb246IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgcm90YXRlQ29udHJvbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgcm90YXRlQ29udHJvbFBvc2l0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIHNjYWxlQ29udHJvbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgc2NhbGVDb250cm9sU3R5bGU6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgc2Nyb2xsd2hlZWw6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIHN0cmVldFZpZXc6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgc3RyZWV0Vmlld0NvbnRyb2w6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIHN0cmVldFZpZXdDb250cm9sUG9zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgc3R5bGVzOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgdGlsdDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICB6b29tOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIHpvb21Db250cm9sOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICB6b29tQ29udHJvbFBvc2l0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIG5vbmNlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBcIlwiXG4gICAgfVxuICB9LFxuICBlbWl0czogcGUsXG4gIHNldHVwKG4sIHsgZW1pdDogZSB9KSB7XG4gICAgY29uc3QgdCA9IHkoKSwgcyA9IHkoITEpLCByID0geSgpLCBvID0geSgpLCBhID0geSghMSk7XG4gICAgRyhOLCByKSwgRyhVLCBvKSwgRyhTZSwgYSk7XG4gICAgY29uc3QgbCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGMgPSB7IC4uLm4gfTtcbiAgICAgIE9iamVjdC5rZXlzKGMpLmZvckVhY2goKGYpID0+IHtcbiAgICAgICAgY1tmXSA9PT0gdm9pZCAwICYmIGRlbGV0ZSBjW2ZdO1xuICAgICAgfSk7XG4gICAgICBjb25zdCBwID0gKGYpID0+IHtcbiAgICAgICAgdmFyIGc7XG4gICAgICAgIHJldHVybiBmID8geyBwb3NpdGlvbjogKGcgPSBvLnZhbHVlKSA9PSBudWxsID8gdm9pZCAwIDogZy5Db250cm9sUG9zaXRpb25bZl0gfSA6IHt9O1xuICAgICAgfSwgbSA9IHtcbiAgICAgICAgc2NhbGVDb250cm9sT3B0aW9uczogbi5zY2FsZUNvbnRyb2xTdHlsZSA/IHsgc3R5bGU6IG4uc2NhbGVDb250cm9sU3R5bGUgfSA6IHt9LFxuICAgICAgICBwYW5Db250cm9sT3B0aW9uczogcChuLnBhbkNvbnRyb2xQb3NpdGlvbiksXG4gICAgICAgIHpvb21Db250cm9sT3B0aW9uczogcChuLnpvb21Db250cm9sUG9zaXRpb24pLFxuICAgICAgICByb3RhdGVDb250cm9sT3B0aW9uczogcChuLnJvdGF0ZUNvbnRyb2xQb3NpdGlvbiksXG4gICAgICAgIHN0cmVldFZpZXdDb250cm9sT3B0aW9uczogcChuLnN0cmVldFZpZXdDb250cm9sUG9zaXRpb24pLFxuICAgICAgICBmdWxsc2NyZWVuQ29udHJvbE9wdGlvbnM6IHAobi5mdWxsc2NyZWVuQ29udHJvbFBvc2l0aW9uKSxcbiAgICAgICAgZGlzYWJsZURlZmF1bHRVSTogbi5kaXNhYmxlRGVmYXVsdFVpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHsgLi4uYywgLi4ubSB9O1xuICAgIH0sIGkgPSBPKFxuICAgICAgW28sIHJdLFxuICAgICAgKFtjLCBoXSkgPT4ge1xuICAgICAgICBjb25zdCBwID0gYywgbSA9IGg7XG4gICAgICAgIHAgJiYgbSAmJiAocC5ldmVudC5hZGRMaXN0ZW5lck9uY2UobSwgXCJ0aWxlc2xvYWRlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgYS52YWx1ZSA9ICEwO1xuICAgICAgICB9KSwgc2V0VGltZW91dChpLCAwKSk7XG4gICAgICB9LFxuICAgICAgeyBpbW1lZGlhdGU6ICEwIH1cbiAgICApLCBkID0gKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBhcGlLZXk6IGMsIHJlZ2lvbjogaCwgdmVyc2lvbjogcCwgbGFuZ3VhZ2U6IG0sIGxpYnJhcmllczogZiwgbm9uY2U6IGcgfSA9IG47XG4gICAgICAgIGhlID0gbmV3IFQoeyBhcGlLZXk6IGMsIHJlZ2lvbjogaCwgdmVyc2lvbjogcCwgbGFuZ3VhZ2U6IG0sIGxpYnJhcmllczogZiwgbm9uY2U6IGcgfSk7XG4gICAgICB9IGNhdGNoIChjKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYyk7XG4gICAgICB9XG4gICAgfSwgdSA9IChjKSA9PiB7XG4gICAgICBvLnZhbHVlID0gSShjLm1hcHMpLCByLnZhbHVlID0gSShuZXcgYy5tYXBzLk1hcCh0LnZhbHVlLCBsKCkpKTtcbiAgICAgIGNvbnN0IGggPSBGZShvLnZhbHVlKTtcbiAgICAgIG8udmFsdWVbZWVdID0gaCwgcGUuZm9yRWFjaCgobSkgPT4ge1xuICAgICAgICB2YXIgZjtcbiAgICAgICAgKGYgPSByLnZhbHVlKSA9PSBudWxsIHx8IGYuYWRkTGlzdGVuZXIobSwgKGcpID0+IGUobSwgZykpO1xuICAgICAgfSksIHMudmFsdWUgPSAhMDtcbiAgICAgIGNvbnN0IHAgPSBPYmplY3Qua2V5cyhuKS5maWx0ZXIoXG4gICAgICAgIChtKSA9PiAhW1wiYXBpUHJvbWlzZVwiLCBcImFwaUtleVwiLCBcInZlcnNpb25cIiwgXCJsaWJyYXJpZXNcIiwgXCJyZWdpb25cIiwgXCJsYW5ndWFnZVwiLCBcImNlbnRlclwiLCBcInpvb21cIiwgXCJub25jZVwiXS5pbmNsdWRlcyhtKVxuICAgICAgKS5tYXAoKG0pID0+IFoobiwgbSkpO1xuICAgICAgTyhcbiAgICAgICAgWygpID0+IG4uY2VudGVyLCAoKSA9PiBuLnpvb20sIC4uLnBdLFxuICAgICAgICAoW20sIGZdLCBbZywgdl0pID0+IHtcbiAgICAgICAgICB2YXIgeCwgTSwgRjtcbiAgICAgICAgICBjb25zdCB7IGNlbnRlcjogdywgem9vbTogXywgLi4uRSB9ID0gbCgpO1xuICAgICAgICAgICh4ID0gci52YWx1ZSkgPT0gbnVsbCB8fCB4LnNldE9wdGlvbnMoRSksIGYgIT09IHZvaWQgMCAmJiBmICE9PSB2ICYmICgoTSA9IHIudmFsdWUpID09IG51bGwgfHwgTS5zZXRab29tKGYpKTtcbiAgICAgICAgICBjb25zdCBiID0gIWcgfHwgbS5sbmcgIT09IGcubG5nIHx8IG0ubGF0ICE9PSBnLmxhdDtcbiAgICAgICAgICBtICYmIGIgJiYgKChGID0gci52YWx1ZSkgPT0gbnVsbCB8fCBGLnBhblRvKG0pKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9O1xuICAgIHJldHVybiBNZSgoKSA9PiB7XG4gICAgICBuLmFwaVByb21pc2UgJiYgbi5hcGlQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSA/IG4uYXBpUHJvbWlzZS50aGVuKHUpIDogKGQoKSwgaGUubG9hZCgpLnRoZW4odSkpO1xuICAgIH0pLCBCKCgpID0+IHtcbiAgICAgIHZhciBjO1xuICAgICAgYS52YWx1ZSA9ICExLCByLnZhbHVlICYmICgoYyA9IG8udmFsdWUpID09IG51bGwgfHwgYy5ldmVudC5jbGVhckluc3RhbmNlTGlzdGVuZXJzKHIudmFsdWUpKTtcbiAgICB9KSwgeyBtYXBSZWY6IHQsIHJlYWR5OiBzLCBtYXA6IHIsIGFwaTogbywgbWFwVGlsZXNMb2FkZWQ6IGEgfTtcbiAgfVxufSk7XG5jb25zdCB0ZSA9IChuLCBlKSA9PiB7XG4gIGNvbnN0IHQgPSBuLl9fdmNjT3B0cyB8fCBuO1xuICBmb3IgKGNvbnN0IFtzLCByXSBvZiBlKVxuICAgIHRbc10gPSByO1xuICByZXR1cm4gdDtcbn0sIHplID0ge1xuICByZWY6IFwibWFwUmVmXCIsXG4gIGNsYXNzOiBcIm1hcGRpdlwiXG59O1xuZnVuY3Rpb24gR2UobiwgZSwgdCwgcywgciwgbykge1xuICByZXR1cm4gWSgpLCBYKFwiZGl2XCIsIG51bGwsIFtcbiAgICBhZShcImRpdlwiLCB6ZSwgbnVsbCwgNTEyKSxcbiAgICBRKG4uJHNsb3RzLCBcImRlZmF1bHRcIiwgWmUoTmUoeyByZWFkeTogbi5yZWFkeSwgbWFwOiBuLm1hcCwgYXBpOiBuLmFwaSwgbWFwVGlsZXNMb2FkZWQ6IG4ubWFwVGlsZXNMb2FkZWQgfSkpLCB2b2lkIDAsICEwKVxuICBdKTtcbn1cbmNvbnN0IEV0ID0gLyogQF9fUFVSRV9fICovIHRlKFZlLCBbW1wicmVuZGVyXCIsIEdlXSwgW1wiX19zY29wZUlkXCIsIFwiZGF0YS12LWRiZjgyYzQwXCJdXSk7XG5mdW5jdGlvbiBIZShuKSB7XG4gIHJldHVybiBuICYmIG4uX19lc01vZHVsZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobiwgXCJkZWZhdWx0XCIpID8gbi5kZWZhdWx0IDogbjtcbn1cbnZhciBXZSA9IGZ1bmN0aW9uIG4oZSwgdCkge1xuICBpZiAoZSA9PT0gdClcbiAgICByZXR1cm4gITA7XG4gIGlmIChlICYmIHQgJiYgdHlwZW9mIGUgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdCA9PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKGUuY29uc3RydWN0b3IgIT09IHQuY29uc3RydWN0b3IpXG4gICAgICByZXR1cm4gITE7XG4gICAgdmFyIHMsIHIsIG87XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGlmIChzID0gZS5sZW5ndGgsIHMgIT0gdC5sZW5ndGgpXG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIGZvciAociA9IHM7IHItLSAhPT0gMDsgKVxuICAgICAgICBpZiAoIW4oZVtyXSwgdFtyXSkpXG4gICAgICAgICAgcmV0dXJuICExO1xuICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICBpZiAoZS5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwKVxuICAgICAgcmV0dXJuIGUuc291cmNlID09PSB0LnNvdXJjZSAmJiBlLmZsYWdzID09PSB0LmZsYWdzO1xuICAgIGlmIChlLnZhbHVlT2YgIT09IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZilcbiAgICAgIHJldHVybiBlLnZhbHVlT2YoKSA9PT0gdC52YWx1ZU9mKCk7XG4gICAgaWYgKGUudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpXG4gICAgICByZXR1cm4gZS50b1N0cmluZygpID09PSB0LnRvU3RyaW5nKCk7XG4gICAgaWYgKG8gPSBPYmplY3Qua2V5cyhlKSwgcyA9IG8ubGVuZ3RoLCBzICE9PSBPYmplY3Qua2V5cyh0KS5sZW5ndGgpXG4gICAgICByZXR1cm4gITE7XG4gICAgZm9yIChyID0gczsgci0tICE9PSAwOyApXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LCBvW3JdKSlcbiAgICAgICAgcmV0dXJuICExO1xuICAgIGZvciAociA9IHM7IHItLSAhPT0gMDsgKSB7XG4gICAgICB2YXIgYSA9IG9bcl07XG4gICAgICBpZiAoIW4oZVthXSwgdFthXSkpXG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIHJldHVybiBlICE9PSBlICYmIHQgIT09IHQ7XG59O1xuY29uc3QgJCA9IC8qIEBfX1BVUkVfXyAqLyBIZShXZSksIEtlID0gKG4pID0+IG4gPT09IFwiTWFya2VyXCIsIEplID0gKG4pID0+IG4gPT09IGVlLCBEID0gKG4sIGUsIHQsIHMpID0+IHtcbiAgY29uc3QgciA9IHkoKSwgbyA9IEMoTiwgeSgpKSwgYSA9IEMoVSwgeSgpKSwgbCA9IEMoTGUsIHkoKSksIGkgPSBKKFxuICAgICgpID0+ICEhKGwudmFsdWUgJiYgYS52YWx1ZSAmJiAoci52YWx1ZSBpbnN0YW5jZW9mIGEudmFsdWUuTWFya2VyIHx8IHIudmFsdWUgaW5zdGFuY2VvZiBhLnZhbHVlW2VlXSkpXG4gICk7XG4gIHJldHVybiBPKFxuICAgIFtvLCB0XSxcbiAgICAoZCwgW3UsIGNdKSA9PiB7XG4gICAgICB2YXIgcCwgbSwgZjtcbiAgICAgIGNvbnN0IGggPSAhJCh0LnZhbHVlLCBjKSB8fCBvLnZhbHVlICE9PSB1O1xuICAgICAgIW8udmFsdWUgfHwgIWEudmFsdWUgfHwgIWggfHwgKHIudmFsdWUgPyAoci52YWx1ZS5zZXRPcHRpb25zKHQudmFsdWUpLCBpLnZhbHVlICYmICgocCA9IGwudmFsdWUpID09IG51bGwgfHwgcC5yZW1vdmVNYXJrZXIoci52YWx1ZSksIChtID0gbC52YWx1ZSkgPT0gbnVsbCB8fCBtLmFkZE1hcmtlcihyLnZhbHVlKSkpIDogKEtlKG4pID8gci52YWx1ZSA9IEkoXG4gICAgICAgIG5ldyBhLnZhbHVlW25dKHQudmFsdWUpXG4gICAgICApIDogSmUobikgPyByLnZhbHVlID0gSShcbiAgICAgICAgbmV3IGEudmFsdWVbbl0odC52YWx1ZSlcbiAgICAgICkgOiByLnZhbHVlID0gSShcbiAgICAgICAgbmV3IGEudmFsdWVbbl0oe1xuICAgICAgICAgIC4uLnQudmFsdWUsXG4gICAgICAgICAgbWFwOiBvLnZhbHVlXG4gICAgICAgIH0pXG4gICAgICApLCBpLnZhbHVlID8gKGYgPSBsLnZhbHVlKSA9PSBudWxsIHx8IGYuYWRkTWFya2VyKHIudmFsdWUpIDogci52YWx1ZS5zZXRNYXAoby52YWx1ZSksIGUuZm9yRWFjaCgoZykgPT4ge1xuICAgICAgICB2YXIgdjtcbiAgICAgICAgKHYgPSByLnZhbHVlKSA9PSBudWxsIHx8IHYuYWRkTGlzdGVuZXIoZywgKHcpID0+IHMoZywgdykpO1xuICAgICAgfSkpKTtcbiAgICB9LFxuICAgIHtcbiAgICAgIGltbWVkaWF0ZTogITBcbiAgICB9XG4gICksIEIoKCkgPT4ge1xuICAgIHZhciBkLCB1O1xuICAgIHIudmFsdWUgJiYgKChkID0gYS52YWx1ZSkgPT0gbnVsbCB8fCBkLmV2ZW50LmNsZWFySW5zdGFuY2VMaXN0ZW5lcnMoci52YWx1ZSksIGkudmFsdWUgPyAodSA9IGwudmFsdWUpID09IG51bGwgfHwgdS5yZW1vdmVNYXJrZXIoci52YWx1ZSkgOiByLnZhbHVlLnNldE1hcChudWxsKSk7XG4gIH0pLCByO1xufSwgZmUgPSBbXG4gIFwiYW5pbWF0aW9uX2NoYW5nZWRcIixcbiAgXCJjbGlja1wiLFxuICBcImRibGNsaWNrXCIsXG4gIFwicmlnaHRjbGlja1wiLFxuICBcImRyYWdzdGFydFwiLFxuICBcImRyYWdlbmRcIixcbiAgXCJkcmFnXCIsXG4gIFwibW91c2VvdmVyXCIsXG4gIFwibW91c2Vkb3duXCIsXG4gIFwibW91c2VvdXRcIixcbiAgXCJtb3VzZXVwXCIsXG4gIFwiZHJhZ2dhYmxlX2NoYW5nZWRcIixcbiAgXCJjbGlja2FibGVfY2hhbmdlZFwiLFxuICBcImNvbnRleHRtZW51XCIsXG4gIFwiY3Vyc29yX2NoYW5nZWRcIixcbiAgXCJmbGF0X2NoYW5nZWRcIixcbiAgXCJyaWdodGNsaWNrXCIsXG4gIFwiemluZGV4X2NoYW5nZWRcIixcbiAgXCJpY29uX2NoYW5nZWRcIixcbiAgXCJwb3NpdGlvbl9jaGFuZ2VkXCIsXG4gIFwic2hhcGVfY2hhbmdlZFwiLFxuICBcInRpdGxlX2NoYW5nZWRcIixcbiAgXCJ2aXNpYmxlX2NoYW5nZWRcIlxuXSwgUHQgPSBQKHtcbiAgbmFtZTogXCJNYXJrZXJcIixcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITBcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBmZSxcbiAgc2V0dXAobiwgeyBlbWl0OiBlLCBleHBvc2U6IHQsIHNsb3RzOiBzIH0pIHtcbiAgICBjb25zdCByID0gWihuLCBcIm9wdGlvbnNcIiksIG8gPSBEKFwiTWFya2VyXCIsIGZlLCByLCBlKTtcbiAgICByZXR1cm4gRyh4ZSwgbyksIHQoeyBtYXJrZXI6IG8gfSksICgpID0+IHtcbiAgICAgIHZhciBhO1xuICAgICAgcmV0dXJuIChhID0gcy5kZWZhdWx0KSA9PSBudWxsID8gdm9pZCAwIDogYS5jYWxsKHMpO1xuICAgIH07XG4gIH1cbn0pLCBPdCA9IFAoe1xuICBuYW1lOiBcIlBvbHlsaW5lXCIsXG4gIHByb3BzOiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6ICEwXG4gICAgfVxuICB9LFxuICBlbWl0czogcSxcbiAgc2V0dXAobiwgeyBlbWl0OiBlIH0pIHtcbiAgICBjb25zdCB0ID0gWihuLCBcIm9wdGlvbnNcIik7XG4gICAgcmV0dXJuIHsgcG9seWxpbmU6IEQoXCJQb2x5bGluZVwiLCBxLCB0LCBlKSB9O1xuICB9LFxuICByZW5kZXI6ICgpID0+IG51bGxcbn0pLCB4dCA9IFAoe1xuICBuYW1lOiBcIlBvbHlnb25cIixcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITBcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBxLFxuICBzZXR1cChuLCB7IGVtaXQ6IGUgfSkge1xuICAgIGNvbnN0IHQgPSBaKG4sIFwib3B0aW9uc1wiKTtcbiAgICByZXR1cm4geyBwb2x5Z29uOiBEKFwiUG9seWdvblwiLCBxLCB0LCBlKSB9O1xuICB9LFxuICByZW5kZXI6ICgpID0+IG51bGxcbn0pLCBtZSA9IHEuY29uY2F0KFtcImJvdW5kc19jaGFuZ2VkXCJdKSwgTHQgPSBQKHtcbiAgbmFtZTogXCJSZWN0YW5nbGVcIixcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITBcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBtZSxcbiAgc2V0dXAobiwgeyBlbWl0OiBlIH0pIHtcbiAgICBjb25zdCB0ID0gWihuLCBcIm9wdGlvbnNcIik7XG4gICAgcmV0dXJuIHsgcmVjdGFuZ2xlOiBEKFwiUmVjdGFuZ2xlXCIsIG1lLCB0LCBlKSB9O1xuICB9LFxuICByZW5kZXI6ICgpID0+IG51bGxcbn0pLCBnZSA9IHEuY29uY2F0KFtcImNlbnRlcl9jaGFuZ2VkXCIsIFwicmFkaXVzX2NoYW5nZWRcIl0pLCBTdCA9IFAoe1xuICBuYW1lOiBcIkNpcmNsZVwiLFxuICBwcm9wczoge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIHJlcXVpcmVkOiAhMFxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IGdlLFxuICBzZXR1cChuLCB7IGVtaXQ6IGUgfSkge1xuICAgIGNvbnN0IHQgPSBaKG4sIFwib3B0aW9uc1wiKTtcbiAgICByZXR1cm4geyBjaXJjbGU6IEQoXCJDaXJjbGVcIiwgZ2UsIHQsIGUpIH07XG4gIH0sXG4gIHJlbmRlcjogKCkgPT4gbnVsbFxufSksIFllID0gUCh7XG4gIHByb3BzOiB7XG4gICAgcG9zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMFxuICAgIH0sXG4gICAgaW5kZXg6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDFcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbXCJjb250ZW50OmxvYWRlZFwiXSxcbiAgc2V0dXAobiwgeyBlbWl0OiBlIH0pIHtcbiAgICBjb25zdCB0ID0geShudWxsKSwgcyA9IEMoTiwgeSgpKSwgciA9IEMoVSwgeSgpKSwgbyA9IEMoU2UsIHkoITEpKSwgYSA9IE8oXG4gICAgICBbbywgciwgdF0sXG4gICAgICAoW2QsIHUsIGNdKSA9PiB7XG4gICAgICAgIHUgJiYgZCAmJiBjICYmIChsKG4ucG9zaXRpb24pLCBlKFwiY29udGVudDpsb2FkZWRcIiksIHNldFRpbWVvdXQoYSwgMCkpO1xuICAgICAgfSxcbiAgICAgIHsgaW1tZWRpYXRlOiAhMCB9XG4gICAgKSwgbCA9IChkKSA9PiB7XG4gICAgICBpZiAocy52YWx1ZSAmJiByLnZhbHVlICYmIHQudmFsdWUpIHtcbiAgICAgICAgY29uc3QgdSA9IHIudmFsdWUuQ29udHJvbFBvc2l0aW9uW2RdO1xuICAgICAgICBzLnZhbHVlLmNvbnRyb2xzW3VdLnB1c2godC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSwgaSA9IChkKSA9PiB7XG4gICAgICBpZiAocy52YWx1ZSAmJiByLnZhbHVlKSB7XG4gICAgICAgIGxldCB1ID0gbnVsbDtcbiAgICAgICAgY29uc3QgYyA9IHIudmFsdWUuQ29udHJvbFBvc2l0aW9uW2RdO1xuICAgICAgICBzLnZhbHVlLmNvbnRyb2xzW2NdLmZvckVhY2goKGgsIHApID0+IHtcbiAgICAgICAgICBoID09PSB0LnZhbHVlICYmICh1ID0gcCk7XG4gICAgICAgIH0pLCB1ICE9PSBudWxsICYmIHMudmFsdWUuY29udHJvbHNbY10ucmVtb3ZlQXQodSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQigoKSA9PiBpKG4ucG9zaXRpb24pKSwgTyhcbiAgICAgICgpID0+IG4ucG9zaXRpb24sXG4gICAgICAoZCwgdSkgPT4ge1xuICAgICAgICBpKHUpLCBsKGQpO1xuICAgICAgfVxuICAgICksIE8oXG4gICAgICAoKSA9PiBuLmluZGV4LFxuICAgICAgKGQpID0+IHtcbiAgICAgICAgZCAmJiB0LnZhbHVlICYmICh0LnZhbHVlLmluZGV4ID0gbi5pbmRleCk7XG4gICAgICB9XG4gICAgKSwgeyBjb250cm9sUmVmOiB0IH07XG4gIH1cbn0pO1xuY29uc3QgWGUgPSB7XG4gIHJlZjogXCJjb250cm9sUmVmXCIsXG4gIGNsYXNzOiBcImN1c3RvbS1jb250cm9sLXdyYXBwZXJcIlxufTtcbmZ1bmN0aW9uIFFlKG4sIGUsIHQsIHMsIHIsIG8pIHtcbiAgcmV0dXJuIFkoKSwgWChcImRpdlwiLCBYZSwgW1xuICAgIFEobi4kc2xvdHMsIFwiZGVmYXVsdFwiLCB7fSwgdm9pZCAwLCAhMClcbiAgXSwgNTEyKTtcbn1cbmNvbnN0IEl0ID0gLyogQF9fUFVSRV9fICovIHRlKFllLCBbW1wicmVuZGVyXCIsIFFlXSwgW1wiX19zY29wZUlkXCIsIFwiZGF0YS12LWQwOTlhM2E2XCJdXSksIHZlID0gW1wiY2xvc2VjbGlja1wiLCBcImNvbnRlbnRfY2hhbmdlZFwiLCBcImRvbXJlYWR5XCIsIFwicG9zaXRpb25fY2hhbmdlZFwiLCBcInZpc2libGVcIiwgXCJ6aW5kZXhfY2hhbmdlZFwiXSwgZXQgPSBQKHtcbiAgaW5oZXJpdEF0dHJzOiAhMSxcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiAoe30pXG4gICAgfSxcbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuXG4gICAgfVxuICB9LFxuICBlbWl0czogWy4uLnZlLCBcInVwZGF0ZTptb2RlbFZhbHVlXCJdLFxuICBzZXR1cChuLCB7IHNsb3RzOiBlLCBlbWl0OiB0LCBleHBvc2U6IHMgfSkge1xuICAgIGNvbnN0IHIgPSB5KCksIG8gPSB5KCksIGEgPSBDKE4sIHkoKSksIGwgPSBDKFUsIHkoKSksIGkgPSBDKHhlLCB5KCkpO1xuICAgIGxldCBkLCB1ID0gbi5tb2RlbFZhbHVlO1xuICAgIGNvbnN0IGMgPSBKKCgpID0+IHtcbiAgICAgIHZhciBmO1xuICAgICAgcmV0dXJuIChmID0gZS5kZWZhdWx0KSA9PSBudWxsID8gdm9pZCAwIDogZi5jYWxsKGUpLnNvbWUoKGcpID0+IGcudHlwZSAhPT0gRWUpO1xuICAgIH0pLCBoID0gKGYpID0+IHtcbiAgICAgIHUgPSBmLCB0KFwidXBkYXRlOm1vZGVsVmFsdWVcIiwgZik7XG4gICAgfSwgcCA9IChmKSA9PiB7XG4gICAgICByLnZhbHVlICYmIChyLnZhbHVlLm9wZW4oeyBtYXA6IGEudmFsdWUsIGFuY2hvcjogaS52YWx1ZSwgLi4uZiB9KSwgaCghMCkpO1xuICAgIH0sIG0gPSAoKSA9PiB7XG4gICAgICByLnZhbHVlICYmIChyLnZhbHVlLmNsb3NlKCksIGgoITEpKTtcbiAgICB9O1xuICAgIHJldHVybiBNZSgoKSA9PiB7XG4gICAgICBPKFxuICAgICAgICBbYSwgKCkgPT4gbi5vcHRpb25zXSxcbiAgICAgICAgKFtmLCBnXSwgW3YsIHddKSA9PiB7XG4gICAgICAgICAgdmFyIEU7XG4gICAgICAgICAgY29uc3QgXyA9ICEkKGcsIHcpIHx8IGEudmFsdWUgIT09IHY7XG4gICAgICAgICAgYS52YWx1ZSAmJiBsLnZhbHVlICYmIF8gJiYgKHIudmFsdWUgPyAoci52YWx1ZS5zZXRPcHRpb25zKHtcbiAgICAgICAgICAgIC4uLmcsXG4gICAgICAgICAgICBjb250ZW50OiBjLnZhbHVlID8gby52YWx1ZSA6IGcuY29udGVudFxuICAgICAgICAgIH0pLCBpLnZhbHVlIHx8IHAoKSkgOiAoci52YWx1ZSA9IEkoXG4gICAgICAgICAgICBuZXcgbC52YWx1ZS5JbmZvV2luZG93KHtcbiAgICAgICAgICAgICAgLi4uZyxcbiAgICAgICAgICAgICAgY29udGVudDogYy52YWx1ZSA/IG8udmFsdWUgOiBnLmNvbnRlbnRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSwgaS52YWx1ZSAmJiAoZCA9IGkudmFsdWUuYWRkTGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBwKCk7XG4gICAgICAgICAgfSkpLCAoIWkudmFsdWUgfHwgdSkgJiYgcCgpLCB2ZS5mb3JFYWNoKChiKSA9PiB7XG4gICAgICAgICAgICB2YXIgeDtcbiAgICAgICAgICAgICh4ID0gci52YWx1ZSkgPT0gbnVsbCB8fCB4LmFkZExpc3RlbmVyKGIsIChNKSA9PiB0KGIsIE0pKTtcbiAgICAgICAgICB9KSwgKEUgPSByLnZhbHVlKSA9PSBudWxsIHx8IEUuYWRkTGlzdGVuZXIoXCJjbG9zZWNsaWNrXCIsICgpID0+IGgoITEpKSkpO1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW1tZWRpYXRlOiAhMFxuICAgICAgICB9XG4gICAgICApLCBPKFxuICAgICAgICAoKSA9PiBuLm1vZGVsVmFsdWUsXG4gICAgICAgIChmKSA9PiB7XG4gICAgICAgICAgZiAhPT0gdSAmJiAoZiA/IHAoKSA6IG0oKSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSksIEIoKCkgPT4ge1xuICAgICAgdmFyIGY7XG4gICAgICBkICYmIGQucmVtb3ZlKCksIHIudmFsdWUgJiYgKChmID0gbC52YWx1ZSkgPT0gbnVsbCB8fCBmLmV2ZW50LmNsZWFySW5zdGFuY2VMaXN0ZW5lcnMoci52YWx1ZSksIG0oKSk7XG4gICAgfSksIHMoeyBpbmZvV2luZG93OiByLCBvcGVuOiBwLCBjbG9zZTogbSB9KSwgeyBpbmZvV2luZG93OiByLCBpbmZvV2luZG93UmVmOiBvLCBoYXNTbG90Q29udGVudDogYywgb3BlbjogcCwgY2xvc2U6IG0gfTtcbiAgfVxufSk7XG5jb25zdCB0dCA9IHtcbiAga2V5OiAwLFxuICBjbGFzczogXCJpbmZvLXdpbmRvdy13cmFwcGVyXCJcbn07XG5mdW5jdGlvbiBzdChuLCBlLCB0LCBzLCByLCBvKSB7XG4gIHJldHVybiBuLmhhc1Nsb3RDb250ZW50ID8gKFkoKSwgWChcImRpdlwiLCB0dCwgW1xuICAgIGFlKFwiZGl2XCIsIFBlKHsgcmVmOiBcImluZm9XaW5kb3dSZWZcIiB9LCBuLiRhdHRycyksIFtcbiAgICAgIFEobi4kc2xvdHMsIFwiZGVmYXVsdFwiLCB7fSwgdm9pZCAwLCAhMClcbiAgICBdLCAxNilcbiAgXSkpIDogT2UoXCJcIiwgITApO1xufVxuY29uc3QgQXQgPSAvKiBAX19QVVJFX18gKi8gdGUoZXQsIFtbXCJyZW5kZXJcIiwgc3RdLCBbXCJfX3Njb3BlSWRcIiwgXCJkYXRhLXYtY2JlMTcwN2JcIl1dKSwgeWUgPSBbXG4gIEludDhBcnJheSxcbiAgVWludDhBcnJheSxcbiAgVWludDhDbGFtcGVkQXJyYXksXG4gIEludDE2QXJyYXksXG4gIFVpbnQxNkFycmF5LFxuICBJbnQzMkFycmF5LFxuICBVaW50MzJBcnJheSxcbiAgRmxvYXQzMkFycmF5LFxuICBGbG9hdDY0QXJyYXlcbl0sIHJlID0gMSwgViA9IDg7XG5jbGFzcyBsZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluZGV4IGZyb20gcmF3IGBBcnJheUJ1ZmZlcmAgZGF0YS5cbiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gZGF0YVxuICAgKi9cbiAgc3RhdGljIGZyb20oZSkge1xuICAgIGlmICghKGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEYXRhIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgQXJyYXlCdWZmZXIuXCIpO1xuICAgIGNvbnN0IFt0LCBzXSA9IG5ldyBVaW50OEFycmF5KGUsIDAsIDIpO1xuICAgIGlmICh0ICE9PSAyMTkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEYXRhIGRvZXMgbm90IGFwcGVhciB0byBiZSBpbiBhIEtEQnVzaCBmb3JtYXQuXCIpO1xuICAgIGNvbnN0IHIgPSBzID4+IDQ7XG4gICAgaWYgKHIgIT09IHJlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBHb3QgdiR7cn0gZGF0YSB3aGVuIGV4cGVjdGVkIHYke3JlfS5gKTtcbiAgICBjb25zdCBvID0geWVbcyAmIDE1XTtcbiAgICBpZiAoIW8pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgYXJyYXkgdHlwZS5cIik7XG4gICAgY29uc3QgW2FdID0gbmV3IFVpbnQxNkFycmF5KGUsIDIsIDEpLCBbbF0gPSBuZXcgVWludDMyQXJyYXkoZSwgNCwgMSk7XG4gICAgcmV0dXJuIG5ldyBsZShsLCBhLCBvLCBlKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbmRleCB0aGF0IHdpbGwgaG9sZCBhIGdpdmVuIG51bWJlciBvZiBpdGVtcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bUl0ZW1zXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbm9kZVNpemU9NjRdIFNpemUgb2YgdGhlIEtELXRyZWUgbm9kZSAoNjQgYnkgZGVmYXVsdCkuXG4gICAqIEBwYXJhbSB7VHlwZWRBcnJheUNvbnN0cnVjdG9yfSBbQXJyYXlUeXBlPUZsb2F0NjRBcnJheV0gVGhlIGFycmF5IHR5cGUgdXNlZCBmb3IgY29vcmRpbmF0ZXMgc3RvcmFnZSAoYEZsb2F0NjRBcnJheWAgYnkgZGVmYXVsdCkuXG4gICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IFtkYXRhXSAoRm9yIGludGVybmFsIHVzZSBvbmx5KVxuICAgKi9cbiAgY29uc3RydWN0b3IoZSwgdCA9IDY0LCBzID0gRmxvYXQ2NEFycmF5LCByKSB7XG4gICAgaWYgKGlzTmFOKGUpIHx8IGUgPCAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnBleHBlY3RlZCBudW1JdGVtcyB2YWx1ZTogJHtlfS5gKTtcbiAgICB0aGlzLm51bUl0ZW1zID0gK2UsIHRoaXMubm9kZVNpemUgPSBNYXRoLm1pbihNYXRoLm1heCgrdCwgMiksIDY1NTM1KSwgdGhpcy5BcnJheVR5cGUgPSBzLCB0aGlzLkluZGV4QXJyYXlUeXBlID0gZSA8IDY1NTM2ID8gVWludDE2QXJyYXkgOiBVaW50MzJBcnJheTtcbiAgICBjb25zdCBvID0geWUuaW5kZXhPZih0aGlzLkFycmF5VHlwZSksIGEgPSBlICogMiAqIHRoaXMuQXJyYXlUeXBlLkJZVEVTX1BFUl9FTEVNRU5ULCBsID0gZSAqIHRoaXMuSW5kZXhBcnJheVR5cGUuQllURVNfUEVSX0VMRU1FTlQsIGkgPSAoOCAtIGwgJSA4KSAlIDg7XG4gICAgaWYgKG8gPCAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHR5cGVkIGFycmF5IGNsYXNzOiAke3N9LmApO1xuICAgIHIgJiYgciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gKHRoaXMuZGF0YSA9IHIsIHRoaXMuaWRzID0gbmV3IHRoaXMuSW5kZXhBcnJheVR5cGUodGhpcy5kYXRhLCBWLCBlKSwgdGhpcy5jb29yZHMgPSBuZXcgdGhpcy5BcnJheVR5cGUodGhpcy5kYXRhLCBWICsgbCArIGksIGUgKiAyKSwgdGhpcy5fcG9zID0gZSAqIDIsIHRoaXMuX2ZpbmlzaGVkID0gITApIDogKHRoaXMuZGF0YSA9IG5ldyBBcnJheUJ1ZmZlcihWICsgYSArIGwgKyBpKSwgdGhpcy5pZHMgPSBuZXcgdGhpcy5JbmRleEFycmF5VHlwZSh0aGlzLmRhdGEsIFYsIGUpLCB0aGlzLmNvb3JkcyA9IG5ldyB0aGlzLkFycmF5VHlwZSh0aGlzLmRhdGEsIFYgKyBsICsgaSwgZSAqIDIpLCB0aGlzLl9wb3MgPSAwLCB0aGlzLl9maW5pc2hlZCA9ICExLCBuZXcgVWludDhBcnJheSh0aGlzLmRhdGEsIDAsIDIpLnNldChbMjE5LCAocmUgPDwgNCkgKyBvXSksIG5ldyBVaW50MTZBcnJheSh0aGlzLmRhdGEsIDIsIDEpWzBdID0gdCwgbmV3IFVpbnQzMkFycmF5KHRoaXMuZGF0YSwgNCwgMSlbMF0gPSBlKTtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgcG9pbnQgdG8gdGhlIGluZGV4LlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBBbiBpbmNyZW1lbnRhbCBpbmRleCBhc3NvY2lhdGVkIHdpdGggdGhlIGFkZGVkIGl0ZW0gKHN0YXJ0aW5nIGZyb20gYDBgKS5cbiAgICovXG4gIGFkZChlLCB0KSB7XG4gICAgY29uc3QgcyA9IHRoaXMuX3BvcyA+PiAxO1xuICAgIHJldHVybiB0aGlzLmlkc1tzXSA9IHMsIHRoaXMuY29vcmRzW3RoaXMuX3BvcysrXSA9IGUsIHRoaXMuY29vcmRzW3RoaXMuX3BvcysrXSA9IHQsIHM7XG4gIH1cbiAgLyoqXG4gICAqIFBlcmZvcm0gaW5kZXhpbmcgb2YgdGhlIGFkZGVkIHBvaW50cy5cbiAgICovXG4gIGZpbmlzaCgpIHtcbiAgICBjb25zdCBlID0gdGhpcy5fcG9zID4+IDE7XG4gICAgaWYgKGUgIT09IHRoaXMubnVtSXRlbXMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFkZGVkICR7ZX0gaXRlbXMgd2hlbiBleHBlY3RlZCAke3RoaXMubnVtSXRlbXN9LmApO1xuICAgIHJldHVybiBpZSh0aGlzLmlkcywgdGhpcy5jb29yZHMsIHRoaXMubm9kZVNpemUsIDAsIHRoaXMubnVtSXRlbXMgLSAxLCAwKSwgdGhpcy5fZmluaXNoZWQgPSAhMCwgdGhpcztcbiAgfVxuICAvKipcbiAgICogU2VhcmNoIHRoZSBpbmRleCBmb3IgaXRlbXMgd2l0aGluIGEgZ2l2ZW4gYm91bmRpbmcgYm94LlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWluWFxuICAgKiBAcGFyYW0ge251bWJlcn0gbWluWVxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4WFxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4WVxuICAgKiBAcmV0dXJucyB7bnVtYmVyW119IEFuIGFycmF5IG9mIGluZGljZXMgY29ycmVwb25kaW5nIHRvIHRoZSBmb3VuZCBpdGVtcy5cbiAgICovXG4gIHJhbmdlKGUsIHQsIHMsIHIpIHtcbiAgICBpZiAoIXRoaXMuX2ZpbmlzaGVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0YSBub3QgeWV0IGluZGV4ZWQgLSBjYWxsIGluZGV4LmZpbmlzaCgpLlwiKTtcbiAgICBjb25zdCB7IGlkczogbywgY29vcmRzOiBhLCBub2RlU2l6ZTogbCB9ID0gdGhpcywgaSA9IFswLCBvLmxlbmd0aCAtIDEsIDBdLCBkID0gW107XG4gICAgZm9yICg7IGkubGVuZ3RoOyApIHtcbiAgICAgIGNvbnN0IHUgPSBpLnBvcCgpIHx8IDAsIGMgPSBpLnBvcCgpIHx8IDAsIGggPSBpLnBvcCgpIHx8IDA7XG4gICAgICBpZiAoYyAtIGggPD0gbCkge1xuICAgICAgICBmb3IgKGxldCBnID0gaDsgZyA8PSBjOyBnKyspIHtcbiAgICAgICAgICBjb25zdCB2ID0gYVsyICogZ10sIHcgPSBhWzIgKiBnICsgMV07XG4gICAgICAgICAgdiA+PSBlICYmIHYgPD0gcyAmJiB3ID49IHQgJiYgdyA8PSByICYmIGQucHVzaChvW2ddKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHAgPSBoICsgYyA+PiAxLCBtID0gYVsyICogcF0sIGYgPSBhWzIgKiBwICsgMV07XG4gICAgICBtID49IGUgJiYgbSA8PSBzICYmIGYgPj0gdCAmJiBmIDw9IHIgJiYgZC5wdXNoKG9bcF0pLCAodSA9PT0gMCA/IGUgPD0gbSA6IHQgPD0gZikgJiYgKGkucHVzaChoKSwgaS5wdXNoKHAgLSAxKSwgaS5wdXNoKDEgLSB1KSksICh1ID09PSAwID8gcyA+PSBtIDogciA+PSBmKSAmJiAoaS5wdXNoKHAgKyAxKSwgaS5wdXNoKGMpLCBpLnB1c2goMSAtIHUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGQ7XG4gIH1cbiAgLyoqXG4gICAqIFNlYXJjaCB0aGUgaW5kZXggZm9yIGl0ZW1zIHdpdGhpbiBhIGdpdmVuIHJhZGl1cy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHF4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBxeVxuICAgKiBAcGFyYW0ge251bWJlcn0gciBRdWVyeSByYWRpdXMuXG4gICAqIEByZXR1cm5zIHtudW1iZXJbXX0gQW4gYXJyYXkgb2YgaW5kaWNlcyBjb3JyZXBvbmRpbmcgdG8gdGhlIGZvdW5kIGl0ZW1zLlxuICAgKi9cbiAgd2l0aGluKGUsIHQsIHMpIHtcbiAgICBpZiAoIXRoaXMuX2ZpbmlzaGVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0YSBub3QgeWV0IGluZGV4ZWQgLSBjYWxsIGluZGV4LmZpbmlzaCgpLlwiKTtcbiAgICBjb25zdCB7IGlkczogciwgY29vcmRzOiBvLCBub2RlU2l6ZTogYSB9ID0gdGhpcywgbCA9IFswLCByLmxlbmd0aCAtIDEsIDBdLCBpID0gW10sIGQgPSBzICogcztcbiAgICBmb3IgKDsgbC5sZW5ndGg7ICkge1xuICAgICAgY29uc3QgdSA9IGwucG9wKCkgfHwgMCwgYyA9IGwucG9wKCkgfHwgMCwgaCA9IGwucG9wKCkgfHwgMDtcbiAgICAgIGlmIChjIC0gaCA8PSBhKSB7XG4gICAgICAgIGZvciAobGV0IGcgPSBoOyBnIDw9IGM7IGcrKylcbiAgICAgICAgICB3ZShvWzIgKiBnXSwgb1syICogZyArIDFdLCBlLCB0KSA8PSBkICYmIGkucHVzaChyW2ddKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBwID0gaCArIGMgPj4gMSwgbSA9IG9bMiAqIHBdLCBmID0gb1syICogcCArIDFdO1xuICAgICAgd2UobSwgZiwgZSwgdCkgPD0gZCAmJiBpLnB1c2gocltwXSksICh1ID09PSAwID8gZSAtIHMgPD0gbSA6IHQgLSBzIDw9IGYpICYmIChsLnB1c2goaCksIGwucHVzaChwIC0gMSksIGwucHVzaCgxIC0gdSkpLCAodSA9PT0gMCA/IGUgKyBzID49IG0gOiB0ICsgcyA+PSBmKSAmJiAobC5wdXNoKHAgKyAxKSwgbC5wdXNoKGMpLCBsLnB1c2goMSAtIHUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGk7XG4gIH1cbn1cbmZ1bmN0aW9uIGllKG4sIGUsIHQsIHMsIHIsIG8pIHtcbiAgaWYgKHIgLSBzIDw9IHQpXG4gICAgcmV0dXJuO1xuICBjb25zdCBhID0gcyArIHIgPj4gMTtcbiAgSWUobiwgZSwgYSwgcywgciwgbyksIGllKG4sIGUsIHQsIHMsIGEgLSAxLCAxIC0gbyksIGllKG4sIGUsIHQsIGEgKyAxLCByLCAxIC0gbyk7XG59XG5mdW5jdGlvbiBJZShuLCBlLCB0LCBzLCByLCBvKSB7XG4gIGZvciAoOyByID4gczsgKSB7XG4gICAgaWYgKHIgLSBzID4gNjAwKSB7XG4gICAgICBjb25zdCBkID0gciAtIHMgKyAxLCB1ID0gdCAtIHMgKyAxLCBjID0gTWF0aC5sb2coZCksIGggPSAwLjUgKiBNYXRoLmV4cCgyICogYyAvIDMpLCBwID0gMC41ICogTWF0aC5zcXJ0KGMgKiBoICogKGQgLSBoKSAvIGQpICogKHUgLSBkIC8gMiA8IDAgPyAtMSA6IDEpLCBtID0gTWF0aC5tYXgocywgTWF0aC5mbG9vcih0IC0gdSAqIGggLyBkICsgcCkpLCBmID0gTWF0aC5taW4ociwgTWF0aC5mbG9vcih0ICsgKGQgLSB1KSAqIGggLyBkICsgcCkpO1xuICAgICAgSWUobiwgZSwgdCwgbSwgZiwgbyk7XG4gICAgfVxuICAgIGNvbnN0IGEgPSBlWzIgKiB0ICsgb107XG4gICAgbGV0IGwgPSBzLCBpID0gcjtcbiAgICBmb3IgKHoobiwgZSwgcywgdCksIGVbMiAqIHIgKyBvXSA+IGEgJiYgeihuLCBlLCBzLCByKTsgbCA8IGk7ICkge1xuICAgICAgZm9yICh6KG4sIGUsIGwsIGkpLCBsKyssIGktLTsgZVsyICogbCArIG9dIDwgYTsgKVxuICAgICAgICBsKys7XG4gICAgICBmb3IgKDsgZVsyICogaSArIG9dID4gYTsgKVxuICAgICAgICBpLS07XG4gICAgfVxuICAgIGVbMiAqIHMgKyBvXSA9PT0gYSA/IHoobiwgZSwgcywgaSkgOiAoaSsrLCB6KG4sIGUsIGksIHIpKSwgaSA8PSB0ICYmIChzID0gaSArIDEpLCB0IDw9IGkgJiYgKHIgPSBpIC0gMSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHoobiwgZSwgdCwgcykge1xuICBuZShuLCB0LCBzKSwgbmUoZSwgMiAqIHQsIDIgKiBzKSwgbmUoZSwgMiAqIHQgKyAxLCAyICogcyArIDEpO1xufVxuZnVuY3Rpb24gbmUobiwgZSwgdCkge1xuICBjb25zdCBzID0gbltlXTtcbiAgbltlXSA9IG5bdF0sIG5bdF0gPSBzO1xufVxuZnVuY3Rpb24gd2UobiwgZSwgdCwgcykge1xuICBjb25zdCByID0gbiAtIHQsIG8gPSBlIC0gcztcbiAgcmV0dXJuIHIgKiByICsgbyAqIG87XG59XG5jb25zdCBydCA9IHtcbiAgbWluWm9vbTogMCxcbiAgLy8gbWluIHpvb20gdG8gZ2VuZXJhdGUgY2x1c3RlcnMgb25cbiAgbWF4Wm9vbTogMTYsXG4gIC8vIG1heCB6b29tIGxldmVsIHRvIGNsdXN0ZXIgdGhlIHBvaW50cyBvblxuICBtaW5Qb2ludHM6IDIsXG4gIC8vIG1pbmltdW0gcG9pbnRzIHRvIGZvcm0gYSBjbHVzdGVyXG4gIHJhZGl1czogNDAsXG4gIC8vIGNsdXN0ZXIgcmFkaXVzIGluIHBpeGVsc1xuICBleHRlbnQ6IDUxMixcbiAgLy8gdGlsZSBleHRlbnQgKHJhZGl1cyBpcyBjYWxjdWxhdGVkIHJlbGF0aXZlIHRvIGl0KVxuICBub2RlU2l6ZTogNjQsXG4gIC8vIHNpemUgb2YgdGhlIEtELXRyZWUgbGVhZiBub2RlLCBhZmZlY3RzIHBlcmZvcm1hbmNlXG4gIGxvZzogITEsXG4gIC8vIHdoZXRoZXIgdG8gbG9nIHRpbWluZyBpbmZvXG4gIC8vIHdoZXRoZXIgdG8gZ2VuZXJhdGUgbnVtZXJpYyBpZHMgZm9yIGlucHV0IGZlYXR1cmVzIChpbiB2ZWN0b3IgdGlsZXMpXG4gIGdlbmVyYXRlSWQ6ICExLFxuICAvLyBhIHJlZHVjZSBmdW5jdGlvbiBmb3IgY2FsY3VsYXRpbmcgY3VzdG9tIGNsdXN0ZXIgcHJvcGVydGllc1xuICByZWR1Y2U6IG51bGwsXG4gIC8vIChhY2N1bXVsYXRlZCwgcHJvcHMpID0+IHsgYWNjdW11bGF0ZWQuc3VtICs9IHByb3BzLnN1bTsgfVxuICAvLyBwcm9wZXJ0aWVzIHRvIHVzZSBmb3IgaW5kaXZpZHVhbCBwb2ludHMgd2hlbiBydW5uaW5nIHRoZSByZWR1Y2VyXG4gIG1hcDogKG4pID0+IG5cbiAgLy8gcHJvcHMgPT4gKHtzdW06IHByb3BzLm15X3ZhbHVlfSlcbn0sIF9lID0gTWF0aC5mcm91bmQgfHwgKChuKSA9PiAoZSkgPT4gKG5bMF0gPSArZSwgblswXSkpKG5ldyBGbG9hdDMyQXJyYXkoMSkpLCBBID0gMiwgUyA9IDMsIG9lID0gNCwgTCA9IDUsIEFlID0gNjtcbmNsYXNzIFRlIHtcbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShydCksIGUpLCB0aGlzLnRyZWVzID0gbmV3IEFycmF5KHRoaXMub3B0aW9ucy5tYXhab29tICsgMSksIHRoaXMuc3RyaWRlID0gdGhpcy5vcHRpb25zLnJlZHVjZSA/IDcgOiA2LCB0aGlzLmNsdXN0ZXJQcm9wcyA9IFtdO1xuICB9XG4gIGxvYWQoZSkge1xuICAgIGNvbnN0IHsgbG9nOiB0LCBtaW5ab29tOiBzLCBtYXhab29tOiByIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgdCAmJiBjb25zb2xlLnRpbWUoXCJ0b3RhbCB0aW1lXCIpO1xuICAgIGNvbnN0IG8gPSBgcHJlcGFyZSAke2UubGVuZ3RofSBwb2ludHNgO1xuICAgIHQgJiYgY29uc29sZS50aW1lKG8pLCB0aGlzLnBvaW50cyA9IGU7XG4gICAgY29uc3QgYSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZCA9IGVbaV07XG4gICAgICBpZiAoIWQuZ2VvbWV0cnkpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY29uc3QgW3UsIGNdID0gZC5nZW9tZXRyeS5jb29yZGluYXRlcywgaCA9IF9lKFcodSkpLCBwID0gX2UoSyhjKSk7XG4gICAgICBhLnB1c2goXG4gICAgICAgIGgsXG4gICAgICAgIHAsXG4gICAgICAgIC8vIHByb2plY3RlZCBwb2ludCBjb29yZGluYXRlc1xuICAgICAgICAxIC8gMCxcbiAgICAgICAgLy8gdGhlIGxhc3Qgem9vbSB0aGUgcG9pbnQgd2FzIHByb2Nlc3NlZCBhdFxuICAgICAgICBpLFxuICAgICAgICAvLyBpbmRleCBvZiB0aGUgc291cmNlIGZlYXR1cmUgaW4gdGhlIG9yaWdpbmFsIGlucHV0IGFycmF5XG4gICAgICAgIC0xLFxuICAgICAgICAvLyBwYXJlbnQgY2x1c3RlciBpZFxuICAgICAgICAxXG4gICAgICAgIC8vIG51bWJlciBvZiBwb2ludHMgaW4gYSBjbHVzdGVyXG4gICAgICApLCB0aGlzLm9wdGlvbnMucmVkdWNlICYmIGEucHVzaCgwKTtcbiAgICB9XG4gICAgbGV0IGwgPSB0aGlzLnRyZWVzW3IgKyAxXSA9IHRoaXMuX2NyZWF0ZVRyZWUoYSk7XG4gICAgdCAmJiBjb25zb2xlLnRpbWVFbmQobyk7XG4gICAgZm9yIChsZXQgaSA9IHI7IGkgPj0gczsgaS0tKSB7XG4gICAgICBjb25zdCBkID0gK0RhdGUubm93KCk7XG4gICAgICBsID0gdGhpcy50cmVlc1tpXSA9IHRoaXMuX2NyZWF0ZVRyZWUodGhpcy5fY2x1c3RlcihsLCBpKSksIHQgJiYgY29uc29sZS5sb2coXCJ6JWQ6ICVkIGNsdXN0ZXJzIGluICVkbXNcIiwgaSwgbC5udW1JdGVtcywgK0RhdGUubm93KCkgLSBkKTtcbiAgICB9XG4gICAgcmV0dXJuIHQgJiYgY29uc29sZS50aW1lRW5kKFwidG90YWwgdGltZVwiKSwgdGhpcztcbiAgfVxuICBnZXRDbHVzdGVycyhlLCB0KSB7XG4gICAgbGV0IHMgPSAoKGVbMF0gKyAxODApICUgMzYwICsgMzYwKSAlIDM2MCAtIDE4MDtcbiAgICBjb25zdCByID0gTWF0aC5tYXgoLTkwLCBNYXRoLm1pbig5MCwgZVsxXSkpO1xuICAgIGxldCBvID0gZVsyXSA9PT0gMTgwID8gMTgwIDogKChlWzJdICsgMTgwKSAlIDM2MCArIDM2MCkgJSAzNjAgLSAxODA7XG4gICAgY29uc3QgYSA9IE1hdGgubWF4KC05MCwgTWF0aC5taW4oOTAsIGVbM10pKTtcbiAgICBpZiAoZVsyXSAtIGVbMF0gPj0gMzYwKVxuICAgICAgcyA9IC0xODAsIG8gPSAxODA7XG4gICAgZWxzZSBpZiAocyA+IG8pIHtcbiAgICAgIGNvbnN0IGMgPSB0aGlzLmdldENsdXN0ZXJzKFtzLCByLCAxODAsIGFdLCB0KSwgaCA9IHRoaXMuZ2V0Q2x1c3RlcnMoWy0xODAsIHIsIG8sIGFdLCB0KTtcbiAgICAgIHJldHVybiBjLmNvbmNhdChoKTtcbiAgICB9XG4gICAgY29uc3QgbCA9IHRoaXMudHJlZXNbdGhpcy5fbGltaXRab29tKHQpXSwgaSA9IGwucmFuZ2UoVyhzKSwgSyhhKSwgVyhvKSwgSyhyKSksIGQgPSBsLmRhdGEsIHUgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGMgb2YgaSkge1xuICAgICAgY29uc3QgaCA9IHRoaXMuc3RyaWRlICogYztcbiAgICAgIHUucHVzaChkW2ggKyBMXSA+IDEgPyBrZShkLCBoLCB0aGlzLmNsdXN0ZXJQcm9wcykgOiB0aGlzLnBvaW50c1tkW2ggKyBTXV0pO1xuICAgIH1cbiAgICByZXR1cm4gdTtcbiAgfVxuICBnZXRDaGlsZHJlbihlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuX2dldE9yaWdpbklkKGUpLCBzID0gdGhpcy5fZ2V0T3JpZ2luWm9vbShlKSwgciA9IFwiTm8gY2x1c3RlciB3aXRoIHRoZSBzcGVjaWZpZWQgaWQuXCIsIG8gPSB0aGlzLnRyZWVzW3NdO1xuICAgIGlmICghbylcbiAgICAgIHRocm93IG5ldyBFcnJvcihyKTtcbiAgICBjb25zdCBhID0gby5kYXRhO1xuICAgIGlmICh0ICogdGhpcy5zdHJpZGUgPj0gYS5sZW5ndGgpXG4gICAgICB0aHJvdyBuZXcgRXJyb3Iocik7XG4gICAgY29uc3QgbCA9IHRoaXMub3B0aW9ucy5yYWRpdXMgLyAodGhpcy5vcHRpb25zLmV4dGVudCAqIE1hdGgucG93KDIsIHMgLSAxKSksIGkgPSBhW3QgKiB0aGlzLnN0cmlkZV0sIGQgPSBhW3QgKiB0aGlzLnN0cmlkZSArIDFdLCB1ID0gby53aXRoaW4oaSwgZCwgbCksIGMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGggb2YgdSkge1xuICAgICAgY29uc3QgcCA9IGggKiB0aGlzLnN0cmlkZTtcbiAgICAgIGFbcCArIG9lXSA9PT0gZSAmJiBjLnB1c2goYVtwICsgTF0gPiAxID8ga2UoYSwgcCwgdGhpcy5jbHVzdGVyUHJvcHMpIDogdGhpcy5wb2ludHNbYVtwICsgU11dKTtcbiAgICB9XG4gICAgaWYgKGMubGVuZ3RoID09PSAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKHIpO1xuICAgIHJldHVybiBjO1xuICB9XG4gIGdldExlYXZlcyhlLCB0LCBzKSB7XG4gICAgdCA9IHQgfHwgMTAsIHMgPSBzIHx8IDA7XG4gICAgY29uc3QgciA9IFtdO1xuICAgIHJldHVybiB0aGlzLl9hcHBlbmRMZWF2ZXMociwgZSwgdCwgcywgMCksIHI7XG4gIH1cbiAgZ2V0VGlsZShlLCB0LCBzKSB7XG4gICAgY29uc3QgciA9IHRoaXMudHJlZXNbdGhpcy5fbGltaXRab29tKGUpXSwgbyA9IE1hdGgucG93KDIsIGUpLCB7IGV4dGVudDogYSwgcmFkaXVzOiBsIH0gPSB0aGlzLm9wdGlvbnMsIGkgPSBsIC8gYSwgZCA9IChzIC0gaSkgLyBvLCB1ID0gKHMgKyAxICsgaSkgLyBvLCBjID0ge1xuICAgICAgZmVhdHVyZXM6IFtdXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5fYWRkVGlsZUZlYXR1cmVzKFxuICAgICAgci5yYW5nZSgodCAtIGkpIC8gbywgZCwgKHQgKyAxICsgaSkgLyBvLCB1KSxcbiAgICAgIHIuZGF0YSxcbiAgICAgIHQsXG4gICAgICBzLFxuICAgICAgbyxcbiAgICAgIGNcbiAgICApLCB0ID09PSAwICYmIHRoaXMuX2FkZFRpbGVGZWF0dXJlcyhcbiAgICAgIHIucmFuZ2UoMSAtIGkgLyBvLCBkLCAxLCB1KSxcbiAgICAgIHIuZGF0YSxcbiAgICAgIG8sXG4gICAgICBzLFxuICAgICAgbyxcbiAgICAgIGNcbiAgICApLCB0ID09PSBvIC0gMSAmJiB0aGlzLl9hZGRUaWxlRmVhdHVyZXMoXG4gICAgICByLnJhbmdlKDAsIGQsIGkgLyBvLCB1KSxcbiAgICAgIHIuZGF0YSxcbiAgICAgIC0xLFxuICAgICAgcyxcbiAgICAgIG8sXG4gICAgICBjXG4gICAgKSwgYy5mZWF0dXJlcy5sZW5ndGggPyBjIDogbnVsbDtcbiAgfVxuICBnZXRDbHVzdGVyRXhwYW5zaW9uWm9vbShlKSB7XG4gICAgbGV0IHQgPSB0aGlzLl9nZXRPcmlnaW5ab29tKGUpIC0gMTtcbiAgICBmb3IgKDsgdCA8PSB0aGlzLm9wdGlvbnMubWF4Wm9vbTsgKSB7XG4gICAgICBjb25zdCBzID0gdGhpcy5nZXRDaGlsZHJlbihlKTtcbiAgICAgIGlmICh0KyssIHMubGVuZ3RoICE9PSAxKVxuICAgICAgICBicmVhaztcbiAgICAgIGUgPSBzWzBdLnByb3BlcnRpZXMuY2x1c3Rlcl9pZDtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgX2FwcGVuZExlYXZlcyhlLCB0LCBzLCByLCBvKSB7XG4gICAgY29uc3QgYSA9IHRoaXMuZ2V0Q2hpbGRyZW4odCk7XG4gICAgZm9yIChjb25zdCBsIG9mIGEpIHtcbiAgICAgIGNvbnN0IGkgPSBsLnByb3BlcnRpZXM7XG4gICAgICBpZiAoaSAmJiBpLmNsdXN0ZXIgPyBvICsgaS5wb2ludF9jb3VudCA8PSByID8gbyArPSBpLnBvaW50X2NvdW50IDogbyA9IHRoaXMuX2FwcGVuZExlYXZlcyhlLCBpLmNsdXN0ZXJfaWQsIHMsIHIsIG8pIDogbyA8IHIgPyBvKysgOiBlLnB1c2gobCksIGUubGVuZ3RoID09PSBzKVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG87XG4gIH1cbiAgX2NyZWF0ZVRyZWUoZSkge1xuICAgIGNvbnN0IHQgPSBuZXcgbGUoZS5sZW5ndGggLyB0aGlzLnN0cmlkZSB8IDAsIHRoaXMub3B0aW9ucy5ub2RlU2l6ZSwgRmxvYXQzMkFycmF5KTtcbiAgICBmb3IgKGxldCBzID0gMDsgcyA8IGUubGVuZ3RoOyBzICs9IHRoaXMuc3RyaWRlKVxuICAgICAgdC5hZGQoZVtzXSwgZVtzICsgMV0pO1xuICAgIHJldHVybiB0LmZpbmlzaCgpLCB0LmRhdGEgPSBlLCB0O1xuICB9XG4gIF9hZGRUaWxlRmVhdHVyZXMoZSwgdCwgcywgciwgbywgYSkge1xuICAgIGZvciAoY29uc3QgbCBvZiBlKSB7XG4gICAgICBjb25zdCBpID0gbCAqIHRoaXMuc3RyaWRlLCBkID0gdFtpICsgTF0gPiAxO1xuICAgICAgbGV0IHUsIGMsIGg7XG4gICAgICBpZiAoZClcbiAgICAgICAgdSA9ICRlKHQsIGksIHRoaXMuY2x1c3RlclByb3BzKSwgYyA9IHRbaV0sIGggPSB0W2kgKyAxXTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBmID0gdGhpcy5wb2ludHNbdFtpICsgU11dO1xuICAgICAgICB1ID0gZi5wcm9wZXJ0aWVzO1xuICAgICAgICBjb25zdCBbZywgdl0gPSBmLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgICBjID0gVyhnKSwgaCA9IEsodik7XG4gICAgICB9XG4gICAgICBjb25zdCBwID0ge1xuICAgICAgICB0eXBlOiAxLFxuICAgICAgICBnZW9tZXRyeTogW1tcbiAgICAgICAgICBNYXRoLnJvdW5kKHRoaXMub3B0aW9ucy5leHRlbnQgKiAoYyAqIG8gLSBzKSksXG4gICAgICAgICAgTWF0aC5yb3VuZCh0aGlzLm9wdGlvbnMuZXh0ZW50ICogKGggKiBvIC0gcikpXG4gICAgICAgIF1dLFxuICAgICAgICB0YWdzOiB1XG4gICAgICB9O1xuICAgICAgbGV0IG07XG4gICAgICBkIHx8IHRoaXMub3B0aW9ucy5nZW5lcmF0ZUlkID8gbSA9IHRbaSArIFNdIDogbSA9IHRoaXMucG9pbnRzW3RbaSArIFNdXS5pZCwgbSAhPT0gdm9pZCAwICYmIChwLmlkID0gbSksIGEuZmVhdHVyZXMucHVzaChwKTtcbiAgICB9XG4gIH1cbiAgX2xpbWl0Wm9vbShlKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KHRoaXMub3B0aW9ucy5taW5ab29tLCBNYXRoLm1pbihNYXRoLmZsb29yKCtlKSwgdGhpcy5vcHRpb25zLm1heFpvb20gKyAxKSk7XG4gIH1cbiAgX2NsdXN0ZXIoZSwgdCkge1xuICAgIGNvbnN0IHsgcmFkaXVzOiBzLCBleHRlbnQ6IHIsIHJlZHVjZTogbywgbWluUG9pbnRzOiBhIH0gPSB0aGlzLm9wdGlvbnMsIGwgPSBzIC8gKHIgKiBNYXRoLnBvdygyLCB0KSksIGkgPSBlLmRhdGEsIGQgPSBbXSwgdSA9IHRoaXMuc3RyaWRlO1xuICAgIGZvciAobGV0IGMgPSAwOyBjIDwgaS5sZW5ndGg7IGMgKz0gdSkge1xuICAgICAgaWYgKGlbYyArIEFdIDw9IHQpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgaVtjICsgQV0gPSB0O1xuICAgICAgY29uc3QgaCA9IGlbY10sIHAgPSBpW2MgKyAxXSwgbSA9IGUud2l0aGluKGlbY10sIGlbYyArIDFdLCBsKSwgZiA9IGlbYyArIExdO1xuICAgICAgbGV0IGcgPSBmO1xuICAgICAgZm9yIChjb25zdCB2IG9mIG0pIHtcbiAgICAgICAgY29uc3QgdyA9IHYgKiB1O1xuICAgICAgICBpW3cgKyBBXSA+IHQgJiYgKGcgKz0gaVt3ICsgTF0pO1xuICAgICAgfVxuICAgICAgaWYgKGcgPiBmICYmIGcgPj0gYSkge1xuICAgICAgICBsZXQgdiA9IGggKiBmLCB3ID0gcCAqIGYsIF8sIEUgPSAtMTtcbiAgICAgICAgY29uc3QgYiA9ICgoYyAvIHUgfCAwKSA8PCA1KSArICh0ICsgMSkgKyB0aGlzLnBvaW50cy5sZW5ndGg7XG4gICAgICAgIGZvciAoY29uc3QgeCBvZiBtKSB7XG4gICAgICAgICAgY29uc3QgTSA9IHggKiB1O1xuICAgICAgICAgIGlmIChpW00gKyBBXSA8PSB0KVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgaVtNICsgQV0gPSB0O1xuICAgICAgICAgIGNvbnN0IEYgPSBpW00gKyBMXTtcbiAgICAgICAgICB2ICs9IGlbTV0gKiBGLCB3ICs9IGlbTSArIDFdICogRiwgaVtNICsgb2VdID0gYiwgbyAmJiAoXyB8fCAoXyA9IHRoaXMuX21hcChpLCBjLCAhMCksIEUgPSB0aGlzLmNsdXN0ZXJQcm9wcy5sZW5ndGgsIHRoaXMuY2x1c3RlclByb3BzLnB1c2goXykpLCBvKF8sIHRoaXMuX21hcChpLCBNKSkpO1xuICAgICAgICB9XG4gICAgICAgIGlbYyArIG9lXSA9IGIsIGQucHVzaCh2IC8gZywgdyAvIGcsIDEgLyAwLCBiLCAtMSwgZyksIG8gJiYgZC5wdXNoKEUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgdiA9IDA7IHYgPCB1OyB2KyspXG4gICAgICAgICAgZC5wdXNoKGlbYyArIHZdKTtcbiAgICAgICAgaWYgKGcgPiAxKVxuICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtKSB7XG4gICAgICAgICAgICBjb25zdCB3ID0gdiAqIHU7XG4gICAgICAgICAgICBpZiAoIShpW3cgKyBBXSA8PSB0KSkge1xuICAgICAgICAgICAgICBpW3cgKyBBXSA9IHQ7XG4gICAgICAgICAgICAgIGZvciAobGV0IF8gPSAwOyBfIDwgdTsgXysrKVxuICAgICAgICAgICAgICAgIGQucHVzaChpW3cgKyBfXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDtcbiAgfVxuICAvLyBnZXQgaW5kZXggb2YgdGhlIHBvaW50IGZyb20gd2hpY2ggdGhlIGNsdXN0ZXIgb3JpZ2luYXRlZFxuICBfZ2V0T3JpZ2luSWQoZSkge1xuICAgIHJldHVybiBlIC0gdGhpcy5wb2ludHMubGVuZ3RoID4+IDU7XG4gIH1cbiAgLy8gZ2V0IHpvb20gb2YgdGhlIHBvaW50IGZyb20gd2hpY2ggdGhlIGNsdXN0ZXIgb3JpZ2luYXRlZFxuICBfZ2V0T3JpZ2luWm9vbShlKSB7XG4gICAgcmV0dXJuIChlIC0gdGhpcy5wb2ludHMubGVuZ3RoKSAlIDMyO1xuICB9XG4gIF9tYXAoZSwgdCwgcykge1xuICAgIGlmIChlW3QgKyBMXSA+IDEpIHtcbiAgICAgIGNvbnN0IGEgPSB0aGlzLmNsdXN0ZXJQcm9wc1tlW3QgKyBBZV1dO1xuICAgICAgcmV0dXJuIHMgPyBPYmplY3QuYXNzaWduKHt9LCBhKSA6IGE7XG4gICAgfVxuICAgIGNvbnN0IHIgPSB0aGlzLnBvaW50c1tlW3QgKyBTXV0ucHJvcGVydGllcywgbyA9IHRoaXMub3B0aW9ucy5tYXAocik7XG4gICAgcmV0dXJuIHMgJiYgbyA9PT0gciA/IE9iamVjdC5hc3NpZ24oe30sIG8pIDogbztcbiAgfVxufVxuZnVuY3Rpb24ga2UobiwgZSwgdCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiRmVhdHVyZVwiLFxuICAgIGlkOiBuW2UgKyBTXSxcbiAgICBwcm9wZXJ0aWVzOiAkZShuLCBlLCB0KSxcbiAgICBnZW9tZXRyeToge1xuICAgICAgdHlwZTogXCJQb2ludFwiLFxuICAgICAgY29vcmRpbmF0ZXM6IFtudChuW2VdKSwgb3QobltlICsgMV0pXVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uICRlKG4sIGUsIHQpIHtcbiAgY29uc3QgcyA9IG5bZSArIExdLCByID0gcyA+PSAxZTQgPyBgJHtNYXRoLnJvdW5kKHMgLyAxZTMpfWtgIDogcyA+PSAxZTMgPyBgJHtNYXRoLnJvdW5kKHMgLyAxMDApIC8gMTB9a2AgOiBzLCBvID0gbltlICsgQWVdLCBhID0gbyA9PT0gLTEgPyB7fSA6IE9iamVjdC5hc3NpZ24oe30sIHRbb10pO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihhLCB7XG4gICAgY2x1c3RlcjogITAsXG4gICAgY2x1c3Rlcl9pZDogbltlICsgU10sXG4gICAgcG9pbnRfY291bnQ6IHMsXG4gICAgcG9pbnRfY291bnRfYWJicmV2aWF0ZWQ6IHJcbiAgfSk7XG59XG5mdW5jdGlvbiBXKG4pIHtcbiAgcmV0dXJuIG4gLyAzNjAgKyAwLjU7XG59XG5mdW5jdGlvbiBLKG4pIHtcbiAgY29uc3QgZSA9IE1hdGguc2luKG4gKiBNYXRoLlBJIC8gMTgwKSwgdCA9IDAuNSAtIDAuMjUgKiBNYXRoLmxvZygoMSArIGUpIC8gKDEgLSBlKSkgLyBNYXRoLlBJO1xuICByZXR1cm4gdCA8IDAgPyAwIDogdCA+IDEgPyAxIDogdDtcbn1cbmZ1bmN0aW9uIG50KG4pIHtcbiAgcmV0dXJuIChuIC0gMC41KSAqIDM2MDtcbn1cbmZ1bmN0aW9uIG90KG4pIHtcbiAgY29uc3QgZSA9ICgxODAgLSBuICogMzYwKSAqIE1hdGguUEkgLyAxODA7XG4gIHJldHVybiAzNjAgKiBNYXRoLmF0YW4oTWF0aC5leHAoZSkpIC8gTWF0aC5QSSAtIDkwO1xufVxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5mdW5jdGlvbiBjZShuLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHMgaW4gbilcbiAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobiwgcykgJiYgZS5pbmRleE9mKHMpIDwgMCAmJiAodFtzXSA9IG5bc10pO1xuICBpZiAobiAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09IFwiZnVuY3Rpb25cIilcbiAgICBmb3IgKHZhciByID0gMCwgcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobik7IHIgPCBzLmxlbmd0aDsgcisrKVxuICAgICAgZS5pbmRleE9mKHNbcl0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwobiwgc1tyXSkgJiYgKHRbc1tyXV0gPSBuW3Nbcl1dKTtcbiAgcmV0dXJuIHQ7XG59XG5jbGFzcyBrIHtcbiAgc3RhdGljIGlzQWR2YW5jZWRNYXJrZXJBdmFpbGFibGUoZSkge1xuICAgIHJldHVybiBnb29nbGUubWFwcy5tYXJrZXIgJiYgZS5nZXRNYXBDYXBhYmlsaXRpZXMoKS5pc0FkdmFuY2VkTWFya2Vyc0F2YWlsYWJsZSA9PT0gITA7XG4gIH1cbiAgc3RhdGljIGlzQWR2YW5jZWRNYXJrZXIoZSkge1xuICAgIHJldHVybiBnb29nbGUubWFwcy5tYXJrZXIgJiYgZSBpbnN0YW5jZW9mIGdvb2dsZS5tYXBzLm1hcmtlci5BZHZhbmNlZE1hcmtlckVsZW1lbnQ7XG4gIH1cbiAgc3RhdGljIHNldE1hcChlLCB0KSB7XG4gICAgdGhpcy5pc0FkdmFuY2VkTWFya2VyKGUpID8gZS5tYXAgPSB0IDogZS5zZXRNYXAodCk7XG4gIH1cbiAgc3RhdGljIGdldFBvc2l0aW9uKGUpIHtcbiAgICBpZiAodGhpcy5pc0FkdmFuY2VkTWFya2VyKGUpKSB7XG4gICAgICBpZiAoZS5wb3NpdGlvbikge1xuICAgICAgICBpZiAoZS5wb3NpdGlvbiBpbnN0YW5jZW9mIGdvb2dsZS5tYXBzLkxhdExuZylcbiAgICAgICAgICByZXR1cm4gZS5wb3NpdGlvbjtcbiAgICAgICAgaWYgKGUucG9zaXRpb24ubGF0ICYmIGUucG9zaXRpb24ubG5nKVxuICAgICAgICAgIHJldHVybiBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGUucG9zaXRpb24ubGF0LCBlLnBvc2l0aW9uLmxuZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIGUuZ2V0UG9zaXRpb24oKTtcbiAgfVxuICBzdGF0aWMgZ2V0VmlzaWJsZShlKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNBZHZhbmNlZE1hcmtlcihlKSA/ICEwIDogZS5nZXRWaXNpYmxlKCk7XG4gIH1cbn1cbmNsYXNzIEgge1xuICBjb25zdHJ1Y3Rvcih7IG1hcmtlcnM6IGUsIHBvc2l0aW9uOiB0IH0pIHtcbiAgICB0aGlzLm1hcmtlcnMgPSBlLCB0ICYmICh0IGluc3RhbmNlb2YgZ29vZ2xlLm1hcHMuTGF0TG5nID8gdGhpcy5fcG9zaXRpb24gPSB0IDogdGhpcy5fcG9zaXRpb24gPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKHQpKTtcbiAgfVxuICBnZXQgYm91bmRzKCkge1xuICAgIGlmICh0aGlzLm1hcmtlcnMubGVuZ3RoID09PSAwICYmICF0aGlzLl9wb3NpdGlvbilcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBlID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcyh0aGlzLl9wb3NpdGlvbiwgdGhpcy5fcG9zaXRpb24pO1xuICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLm1hcmtlcnMpXG4gICAgICBlLmV4dGVuZChrLmdldFBvc2l0aW9uKHQpKTtcbiAgICByZXR1cm4gZTtcbiAgfVxuICBnZXQgcG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uIHx8IHRoaXMuYm91bmRzLmdldENlbnRlcigpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvdW50IG9mICoqdmlzaWJsZSoqIG1hcmtlcnMuXG4gICAqL1xuICBnZXQgY291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFya2Vycy5maWx0ZXIoKGUpID0+IGsuZ2V0VmlzaWJsZShlKSkubGVuZ3RoO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBtYXJrZXIgdG8gdGhlIGNsdXN0ZXIuXG4gICAqL1xuICBwdXNoKGUpIHtcbiAgICB0aGlzLm1hcmtlcnMucHVzaChlKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYW51cCByZWZlcmVuY2VzIGFuZCByZW1vdmUgbWFya2VyIGZyb20gbWFwLlxuICAgKi9cbiAgZGVsZXRlKCkge1xuICAgIHRoaXMubWFya2VyICYmIChrLnNldE1hcCh0aGlzLm1hcmtlciwgbnVsbCksIHRoaXMubWFya2VyID0gdm9pZCAwKSwgdGhpcy5tYXJrZXJzLmxlbmd0aCA9IDA7XG4gIH1cbn1cbmNvbnN0IGl0ID0gKG4sIGUsIHQsIHMpID0+IHtcbiAgY29uc3QgciA9IFJlKG4uZ2V0Qm91bmRzKCksIGUsIHMpO1xuICByZXR1cm4gdC5maWx0ZXIoKG8pID0+IHIuY29udGFpbnMoay5nZXRQb3NpdGlvbihvKSkpO1xufSwgUmUgPSAobiwgZSwgdCkgPT4ge1xuICBjb25zdCB7IG5vcnRoRWFzdDogcywgc291dGhXZXN0OiByIH0gPSBhdChuLCBlKSwgbyA9IGx0KHsgbm9ydGhFYXN0OiBzLCBzb3V0aFdlc3Q6IHIgfSwgdCk7XG4gIHJldHVybiBjdChvLCBlKTtcbn0sIENlID0gKG4sIGUsIHQpID0+IHtcbiAgY29uc3QgcyA9IFJlKG4sIGUsIHQpLCByID0gcy5nZXROb3J0aEVhc3QoKSwgbyA9IHMuZ2V0U291dGhXZXN0KCk7XG4gIHJldHVybiBbby5sbmcoKSwgby5sYXQoKSwgci5sbmcoKSwgci5sYXQoKV07XG59LCBhdCA9IChuLCBlKSA9PiAoe1xuICBub3J0aEVhc3Q6IGUuZnJvbUxhdExuZ1RvRGl2UGl4ZWwobi5nZXROb3J0aEVhc3QoKSksXG4gIHNvdXRoV2VzdDogZS5mcm9tTGF0TG5nVG9EaXZQaXhlbChuLmdldFNvdXRoV2VzdCgpKVxufSksIGx0ID0gKHsgbm9ydGhFYXN0OiBuLCBzb3V0aFdlc3Q6IGUgfSwgdCkgPT4gKG4ueCArPSB0LCBuLnkgLT0gdCwgZS54IC09IHQsIGUueSArPSB0LCB7IG5vcnRoRWFzdDogbiwgc291dGhXZXN0OiBlIH0pLCBjdCA9ICh7IG5vcnRoRWFzdDogbiwgc291dGhXZXN0OiBlIH0sIHQpID0+IHtcbiAgY29uc3QgcyA9IHQuZnJvbURpdlBpeGVsVG9MYXRMbmcoZSksIHIgPSB0LmZyb21EaXZQaXhlbFRvTGF0TG5nKG4pO1xuICByZXR1cm4gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcyhzLCByKTtcbn07XG5jbGFzcyBqZSB7XG4gIGNvbnN0cnVjdG9yKHsgbWF4Wm9vbTogZSA9IDE2IH0pIHtcbiAgICB0aGlzLm1heFpvb20gPSBlO1xuICB9XG4gIC8qKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gYnlwYXNzIGNsdXN0ZXJpbmcgYmFzZWQgdXBvbiBzb21lIG1hcCBzdGF0ZSBzdWNoIGFzXG4gICAqIHpvb20sIG51bWJlciBvZiBtYXJrZXJzLCBldGMuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogIGNsdXN0ZXIoe21hcmtlcnMsIG1hcH06IEFsZ29yaXRobUlucHV0KTogQ2x1c3RlcltdIHtcbiAgICogICAgaWYgKHNob3VsZEJ5cGFzc0NsdXN0ZXJpbmcobWFwKSkge1xuICAgKiAgICAgIHJldHVybiB0aGlzLm5vb3Aoe21hcmtlcnN9KVxuICAgKiAgICB9XG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICBub29wKHsgbWFya2VyczogZSB9KSB7XG4gICAgcmV0dXJuIGR0KGUpO1xuICB9XG59XG5jbGFzcyB1dCBleHRlbmRzIGplIHtcbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHZhciB7IHZpZXdwb3J0UGFkZGluZzogdCA9IDYwIH0gPSBlLCBzID0gY2UoZSwgW1widmlld3BvcnRQYWRkaW5nXCJdKTtcbiAgICBzdXBlcihzKSwgdGhpcy52aWV3cG9ydFBhZGRpbmcgPSA2MCwgdGhpcy52aWV3cG9ydFBhZGRpbmcgPSB0O1xuICB9XG4gIGNhbGN1bGF0ZSh7IG1hcmtlcnM6IGUsIG1hcDogdCwgbWFwQ2FudmFzUHJvamVjdGlvbjogcyB9KSB7XG4gICAgcmV0dXJuIHQuZ2V0Wm9vbSgpID49IHRoaXMubWF4Wm9vbSA/IHtcbiAgICAgIGNsdXN0ZXJzOiB0aGlzLm5vb3Aoe1xuICAgICAgICBtYXJrZXJzOiBlXG4gICAgICB9KSxcbiAgICAgIGNoYW5nZWQ6ICExXG4gICAgfSA6IHtcbiAgICAgIGNsdXN0ZXJzOiB0aGlzLmNsdXN0ZXIoe1xuICAgICAgICBtYXJrZXJzOiBpdCh0LCBzLCBlLCB0aGlzLnZpZXdwb3J0UGFkZGluZyksXG4gICAgICAgIG1hcDogdCxcbiAgICAgICAgbWFwQ2FudmFzUHJvamVjdGlvbjogc1xuICAgICAgfSlcbiAgICB9O1xuICB9XG59XG5jb25zdCBkdCA9IChuKSA9PiBuLm1hcCgodCkgPT4gbmV3IEgoe1xuICBwb3NpdGlvbjogay5nZXRQb3NpdGlvbih0KSxcbiAgbWFya2VyczogW3RdXG59KSk7XG5jbGFzcyBodCBleHRlbmRzIGplIHtcbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHZhciB7IG1heFpvb206IHQsIHJhZGl1czogcyA9IDYwIH0gPSBlLCByID0gY2UoZSwgW1wibWF4Wm9vbVwiLCBcInJhZGl1c1wiXSk7XG4gICAgc3VwZXIoeyBtYXhab29tOiB0IH0pLCB0aGlzLnN0YXRlID0geyB6b29tOiAtMSB9LCB0aGlzLnN1cGVyQ2x1c3RlciA9IG5ldyBUZShPYmplY3QuYXNzaWduKHsgbWF4Wm9vbTogdGhpcy5tYXhab29tLCByYWRpdXM6IHMgfSwgcikpO1xuICB9XG4gIGNhbGN1bGF0ZShlKSB7XG4gICAgbGV0IHQgPSAhMTtcbiAgICBjb25zdCBzID0geyB6b29tOiBlLm1hcC5nZXRab29tKCkgfTtcbiAgICBpZiAoISQoZS5tYXJrZXJzLCB0aGlzLm1hcmtlcnMpKSB7XG4gICAgICB0ID0gITAsIHRoaXMubWFya2VycyA9IFsuLi5lLm1hcmtlcnNdO1xuICAgICAgY29uc3QgciA9IHRoaXMubWFya2Vycy5tYXAoKG8pID0+IHtcbiAgICAgICAgY29uc3QgYSA9IGsuZ2V0UG9zaXRpb24obyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogXCJGZWF0dXJlXCIsXG4gICAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICAgIHR5cGU6IFwiUG9pbnRcIixcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBbYS5sbmcoKSwgYS5sYXQoKV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHByb3BlcnRpZXM6IHsgbWFya2VyOiBvIH1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zdXBlckNsdXN0ZXIubG9hZChyKTtcbiAgICB9XG4gICAgcmV0dXJuIHQgfHwgKHRoaXMuc3RhdGUuem9vbSA8PSB0aGlzLm1heFpvb20gfHwgcy56b29tIDw9IHRoaXMubWF4Wm9vbSkgJiYgKHQgPSAhJCh0aGlzLnN0YXRlLCBzKSksIHRoaXMuc3RhdGUgPSBzLCB0ICYmICh0aGlzLmNsdXN0ZXJzID0gdGhpcy5jbHVzdGVyKGUpKSwgeyBjbHVzdGVyczogdGhpcy5jbHVzdGVycywgY2hhbmdlZDogdCB9O1xuICB9XG4gIGNsdXN0ZXIoeyBtYXA6IGUgfSkge1xuICAgIHJldHVybiB0aGlzLnN1cGVyQ2x1c3Rlci5nZXRDbHVzdGVycyhbLTE4MCwgLTkwLCAxODAsIDkwXSwgTWF0aC5yb3VuZChlLmdldFpvb20oKSkpLm1hcCgodCkgPT4gdGhpcy50cmFuc2Zvcm1DbHVzdGVyKHQpKTtcbiAgfVxuICB0cmFuc2Zvcm1DbHVzdGVyKHsgZ2VvbWV0cnk6IHsgY29vcmRpbmF0ZXM6IFtlLCB0XSB9LCBwcm9wZXJ0aWVzOiBzIH0pIHtcbiAgICBpZiAocy5jbHVzdGVyKVxuICAgICAgcmV0dXJuIG5ldyBIKHtcbiAgICAgICAgbWFya2VyczogdGhpcy5zdXBlckNsdXN0ZXIuZ2V0TGVhdmVzKHMuY2x1c3Rlcl9pZCwgMSAvIDApLm1hcCgobykgPT4gby5wcm9wZXJ0aWVzLm1hcmtlciksXG4gICAgICAgIHBvc2l0aW9uOiB7IGxhdDogdCwgbG5nOiBlIH1cbiAgICAgIH0pO1xuICAgIGNvbnN0IHIgPSBzLm1hcmtlcjtcbiAgICByZXR1cm4gbmV3IEgoe1xuICAgICAgbWFya2VyczogW3JdLFxuICAgICAgcG9zaXRpb246IGsuZ2V0UG9zaXRpb24ocilcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgcHQgZXh0ZW5kcyB1dCB7XG4gIGNvbnN0cnVjdG9yKGUpIHtcbiAgICB2YXIgeyBtYXhab29tOiB0LCByYWRpdXM6IHMgPSA2MCwgdmlld3BvcnRQYWRkaW5nOiByID0gNjAgfSA9IGUsIG8gPSBjZShlLCBbXCJtYXhab29tXCIsIFwicmFkaXVzXCIsIFwidmlld3BvcnRQYWRkaW5nXCJdKTtcbiAgICBzdXBlcih7IG1heFpvb206IHQsIHZpZXdwb3J0UGFkZGluZzogciB9KSwgdGhpcy5zdXBlckNsdXN0ZXIgPSBuZXcgVGUoT2JqZWN0LmFzc2lnbih7IG1heFpvb206IHRoaXMubWF4Wm9vbSwgcmFkaXVzOiBzIH0sIG8pKSwgdGhpcy5zdGF0ZSA9IHsgem9vbTogLTEsIHZpZXc6IFswLCAwLCAwLCAwXSB9O1xuICB9XG4gIGNhbGN1bGF0ZShlKSB7XG4gICAgY29uc3QgdCA9IHtcbiAgICAgIHpvb206IE1hdGgucm91bmQoZS5tYXAuZ2V0Wm9vbSgpKSxcbiAgICAgIHZpZXc6IENlKGUubWFwLmdldEJvdW5kcygpLCBlLm1hcENhbnZhc1Byb2plY3Rpb24sIHRoaXMudmlld3BvcnRQYWRkaW5nKVxuICAgIH07XG4gICAgbGV0IHMgPSAhJCh0aGlzLnN0YXRlLCB0KTtcbiAgICBpZiAoISQoZS5tYXJrZXJzLCB0aGlzLm1hcmtlcnMpKSB7XG4gICAgICBzID0gITAsIHRoaXMubWFya2VycyA9IFsuLi5lLm1hcmtlcnNdO1xuICAgICAgY29uc3QgciA9IHRoaXMubWFya2Vycy5tYXAoKG8pID0+IHtcbiAgICAgICAgY29uc3QgYSA9IGsuZ2V0UG9zaXRpb24obyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogXCJGZWF0dXJlXCIsXG4gICAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICAgIHR5cGU6IFwiUG9pbnRcIixcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBbYS5sbmcoKSwgYS5sYXQoKV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHByb3BlcnRpZXM6IHsgbWFya2VyOiBvIH1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zdXBlckNsdXN0ZXIubG9hZChyKTtcbiAgICB9XG4gICAgcmV0dXJuIHMgJiYgKHRoaXMuY2x1c3RlcnMgPSB0aGlzLmNsdXN0ZXIoZSksIHRoaXMuc3RhdGUgPSB0KSwgeyBjbHVzdGVyczogdGhpcy5jbHVzdGVycywgY2hhbmdlZDogcyB9O1xuICB9XG4gIGNsdXN0ZXIoeyBtYXA6IGUsIG1hcENhbnZhc1Byb2plY3Rpb246IHQgfSkge1xuICAgIGNvbnN0IHMgPSB7XG4gICAgICB6b29tOiBNYXRoLnJvdW5kKGUuZ2V0Wm9vbSgpKSxcbiAgICAgIHZpZXc6IENlKGUuZ2V0Qm91bmRzKCksIHQsIHRoaXMudmlld3BvcnRQYWRkaW5nKVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuc3VwZXJDbHVzdGVyLmdldENsdXN0ZXJzKHMudmlldywgcy56b29tKS5tYXAoKHIpID0+IHRoaXMudHJhbnNmb3JtQ2x1c3RlcihyKSk7XG4gIH1cbiAgdHJhbnNmb3JtQ2x1c3Rlcih7IGdlb21ldHJ5OiB7IGNvb3JkaW5hdGVzOiBbZSwgdF0gfSwgcHJvcGVydGllczogcyB9KSB7XG4gICAgaWYgKHMuY2x1c3RlcilcbiAgICAgIHJldHVybiBuZXcgSCh7XG4gICAgICAgIG1hcmtlcnM6IHRoaXMuc3VwZXJDbHVzdGVyLmdldExlYXZlcyhzLmNsdXN0ZXJfaWQsIDEgLyAwKS5tYXAoKG8pID0+IG8ucHJvcGVydGllcy5tYXJrZXIpLFxuICAgICAgICBwb3NpdGlvbjogeyBsYXQ6IHQsIGxuZzogZSB9XG4gICAgICB9KTtcbiAgICBjb25zdCByID0gcy5tYXJrZXI7XG4gICAgcmV0dXJuIG5ldyBIKHtcbiAgICAgIG1hcmtlcnM6IFtyXSxcbiAgICAgIHBvc2l0aW9uOiBrLmdldFBvc2l0aW9uKHIpXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIGZ0IHtcbiAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgIHRoaXMubWFya2VycyA9IHsgc3VtOiBlLmxlbmd0aCB9O1xuICAgIGNvbnN0IHMgPSB0Lm1hcCgobykgPT4gby5jb3VudCksIHIgPSBzLnJlZHVjZSgobywgYSkgPT4gbyArIGEsIDApO1xuICAgIHRoaXMuY2x1c3RlcnMgPSB7XG4gICAgICBjb3VudDogdC5sZW5ndGgsXG4gICAgICBtYXJrZXJzOiB7XG4gICAgICAgIG1lYW46IHIgLyB0Lmxlbmd0aCxcbiAgICAgICAgc3VtOiByLFxuICAgICAgICBtaW46IE1hdGgubWluKC4uLnMpLFxuICAgICAgICBtYXg6IE1hdGgubWF4KC4uLnMpXG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuY2xhc3MgbXQge1xuICAvKipcbiAgICogVGhlIGRlZmF1bHQgcmVuZGVyIGZ1bmN0aW9uIGZvciB0aGUgbGlicmFyeSB1c2VkIGJ5IHtAbGluayBNYXJrZXJDbHVzdGVyZXJ9LlxuICAgKlxuICAgKiBDdXJyZW50bHkgc2V0IHRvIHVzZSB0aGUgZm9sbG93aW5nOlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIC8vIGNoYW5nZSBjb2xvciBpZiB0aGlzIGNsdXN0ZXIgaGFzIG1vcmUgbWFya2VycyB0aGFuIHRoZSBtZWFuIGNsdXN0ZXJcbiAgICogY29uc3QgY29sb3IgPVxuICAgKiAgIGNvdW50ID4gTWF0aC5tYXgoMTAsIHN0YXRzLmNsdXN0ZXJzLm1hcmtlcnMubWVhbilcbiAgICogICAgID8gXCIjZmYwMDAwXCJcbiAgICogICAgIDogXCIjMDAwMGZmXCI7XG4gICAqXG4gICAqIC8vIGNyZWF0ZSBzdmcgdXJsIHdpdGggZmlsbCBjb2xvclxuICAgKiBjb25zdCBzdmcgPSB3aW5kb3cuYnRvYShgXG4gICAqIDxzdmcgZmlsbD1cIiR7Y29sb3J9XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQwIDI0MFwiPlxuICAgKiAgIDxjaXJjbGUgY3g9XCIxMjBcIiBjeT1cIjEyMFwiIG9wYWNpdHk9XCIuNlwiIHI9XCI3MFwiIC8+XG4gICAqICAgPGNpcmNsZSBjeD1cIjEyMFwiIGN5PVwiMTIwXCIgb3BhY2l0eT1cIi4zXCIgcj1cIjkwXCIgLz5cbiAgICogICA8Y2lyY2xlIGN4PVwiMTIwXCIgY3k9XCIxMjBcIiBvcGFjaXR5PVwiLjJcIiByPVwiMTEwXCIgLz5cbiAgICogICA8Y2lyY2xlIGN4PVwiMTIwXCIgY3k9XCIxMjBcIiBvcGFjaXR5PVwiLjFcIiByPVwiMTMwXCIgLz5cbiAgICogPC9zdmc+YCk7XG4gICAqXG4gICAqIC8vIGNyZWF0ZSBtYXJrZXIgdXNpbmcgc3ZnIGljb25cbiAgICogcmV0dXJuIG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuICAgKiAgIHBvc2l0aW9uLFxuICAgKiAgIGljb246IHtcbiAgICogICAgIHVybDogYGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJHtzdmd9YCxcbiAgICogICAgIHNjYWxlZFNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDQ1LCA0NSksXG4gICAqICAgfSxcbiAgICogICBsYWJlbDoge1xuICAgKiAgICAgdGV4dDogU3RyaW5nKGNvdW50KSxcbiAgICogICAgIGNvbG9yOiBcInJnYmEoMjU1LDI1NSwyNTUsMC45KVwiLFxuICAgKiAgICAgZm9udFNpemU6IFwiMTJweFwiLFxuICAgKiAgIH0sXG4gICAqICAgLy8gYWRqdXN0IHpJbmRleCB0byBiZSBhYm92ZSBvdGhlciBtYXJrZXJzXG4gICAqICAgekluZGV4OiAxMDAwICsgY291bnQsXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHJlbmRlcih7IGNvdW50OiBlLCBwb3NpdGlvbjogdCB9LCBzLCByKSB7XG4gICAgY29uc3QgYSA9IGA8c3ZnIGZpbGw9XCIke2UgPiBNYXRoLm1heCgxMCwgcy5jbHVzdGVycy5tYXJrZXJzLm1lYW4pID8gXCIjZmYwMDAwXCIgOiBcIiMwMDAwZmZcIn1cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNDAgMjQwXCIgd2lkdGg9XCI1MFwiIGhlaWdodD1cIjUwXCI+XG48Y2lyY2xlIGN4PVwiMTIwXCIgY3k9XCIxMjBcIiBvcGFjaXR5PVwiLjZcIiByPVwiNzBcIiAvPlxuPGNpcmNsZSBjeD1cIjEyMFwiIGN5PVwiMTIwXCIgb3BhY2l0eT1cIi4zXCIgcj1cIjkwXCIgLz5cbjxjaXJjbGUgY3g9XCIxMjBcIiBjeT1cIjEyMFwiIG9wYWNpdHk9XCIuMlwiIHI9XCIxMTBcIiAvPlxuPHRleHQgeD1cIjUwJVwiIHk9XCI1MCVcIiBzdHlsZT1cImZpbGw6I2ZmZlwiIHRleHQtYW5jaG9yPVwibWlkZGxlXCIgZm9udC1zaXplPVwiNTBcIiBkb21pbmFudC1iYXNlbGluZT1cIm1pZGRsZVwiIGZvbnQtZmFtaWx5PVwicm9ib3RvLGFyaWFsLHNhbnMtc2VyaWZcIj4ke2V9PC90ZXh0PlxuPC9zdmc+YCwgbCA9IGBDbHVzdGVyIG9mICR7ZX0gbWFya2Vyc2AsIGkgPSBOdW1iZXIoZ29vZ2xlLm1hcHMuTWFya2VyLk1BWF9aSU5ERVgpICsgZTtcbiAgICBpZiAoay5pc0FkdmFuY2VkTWFya2VyQXZhaWxhYmxlKHIpKSB7XG4gICAgICBjb25zdCB1ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHUuaW5uZXJIVE1MID0gYTtcbiAgICAgIGNvbnN0IGMgPSB1LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgYy5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCAyNSlcIik7XG4gICAgICBjb25zdCBoID0ge1xuICAgICAgICBtYXA6IHIsXG4gICAgICAgIHBvc2l0aW9uOiB0LFxuICAgICAgICB6SW5kZXg6IGksXG4gICAgICAgIHRpdGxlOiBsLFxuICAgICAgICBjb250ZW50OiBjXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBnb29nbGUubWFwcy5tYXJrZXIuQWR2YW5jZWRNYXJrZXJFbGVtZW50KGgpO1xuICAgIH1cbiAgICBjb25zdCBkID0ge1xuICAgICAgcG9zaXRpb246IHQsXG4gICAgICB6SW5kZXg6IGksXG4gICAgICB0aXRsZTogbCxcbiAgICAgIGljb246IHtcbiAgICAgICAgdXJsOiBgZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwke2J0b2EoYSl9YCxcbiAgICAgICAgYW5jaG9yOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMjUsIDI1KVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBnb29nbGUubWFwcy5NYXJrZXIoZCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGd0KG4sIGUpIHtcbiAgZm9yIChsZXQgdCBpbiBlLnByb3RvdHlwZSlcbiAgICBuLnByb3RvdHlwZVt0XSA9IGUucHJvdG90eXBlW3RdO1xufVxuY2xhc3MgdWUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBndCh1ZSwgZ29vZ2xlLm1hcHMuT3ZlcmxheVZpZXcpO1xuICB9XG59XG52YXIgajtcbihmdW5jdGlvbihuKSB7XG4gIG4uQ0xVU1RFUklOR19CRUdJTiA9IFwiY2x1c3RlcmluZ2JlZ2luXCIsIG4uQ0xVU1RFUklOR19FTkQgPSBcImNsdXN0ZXJpbmdlbmRcIiwgbi5DTFVTVEVSX0NMSUNLID0gXCJjbGlja1wiO1xufSkoaiB8fCAoaiA9IHt9KSk7XG5jb25zdCB2dCA9IChuLCBlLCB0KSA9PiB7XG4gIHQuZml0Qm91bmRzKGUuYm91bmRzKTtcbn07XG5jbGFzcyB5dCBleHRlbmRzIHVlIHtcbiAgY29uc3RydWN0b3IoeyBtYXA6IGUsIG1hcmtlcnM6IHQgPSBbXSwgYWxnb3JpdGhtT3B0aW9uczogcyA9IHt9LCBhbGdvcml0aG06IHIgPSBuZXcgaHQocyksIHJlbmRlcmVyOiBvID0gbmV3IG10KCksIG9uQ2x1c3RlckNsaWNrOiBhID0gdnQgfSkge1xuICAgIHN1cGVyKCksIHRoaXMubWFya2VycyA9IFsuLi50XSwgdGhpcy5jbHVzdGVycyA9IFtdLCB0aGlzLmFsZ29yaXRobSA9IHIsIHRoaXMucmVuZGVyZXIgPSBvLCB0aGlzLm9uQ2x1c3RlckNsaWNrID0gYSwgZSAmJiB0aGlzLnNldE1hcChlKTtcbiAgfVxuICBhZGRNYXJrZXIoZSwgdCkge1xuICAgIHRoaXMubWFya2Vycy5pbmNsdWRlcyhlKSB8fCAodGhpcy5tYXJrZXJzLnB1c2goZSksIHQgfHwgdGhpcy5yZW5kZXIoKSk7XG4gIH1cbiAgYWRkTWFya2VycyhlLCB0KSB7XG4gICAgZS5mb3JFYWNoKChzKSA9PiB7XG4gICAgICB0aGlzLmFkZE1hcmtlcihzLCAhMCk7XG4gICAgfSksIHQgfHwgdGhpcy5yZW5kZXIoKTtcbiAgfVxuICByZW1vdmVNYXJrZXIoZSwgdCkge1xuICAgIGNvbnN0IHMgPSB0aGlzLm1hcmtlcnMuaW5kZXhPZihlKTtcbiAgICByZXR1cm4gcyA9PT0gLTEgPyAhMSA6IChrLnNldE1hcChlLCBudWxsKSwgdGhpcy5tYXJrZXJzLnNwbGljZShzLCAxKSwgdCB8fCB0aGlzLnJlbmRlcigpLCAhMCk7XG4gIH1cbiAgcmVtb3ZlTWFya2VycyhlLCB0KSB7XG4gICAgbGV0IHMgPSAhMTtcbiAgICByZXR1cm4gZS5mb3JFYWNoKChyKSA9PiB7XG4gICAgICBzID0gdGhpcy5yZW1vdmVNYXJrZXIociwgITApIHx8IHM7XG4gICAgfSksIHMgJiYgIXQgJiYgdGhpcy5yZW5kZXIoKSwgcztcbiAgfVxuICBjbGVhck1hcmtlcnMoZSkge1xuICAgIHRoaXMubWFya2Vycy5sZW5ndGggPSAwLCBlIHx8IHRoaXMucmVuZGVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlY2FsY3VsYXRlcyBhbmQgZHJhd3MgYWxsIHRoZSBtYXJrZXIgY2x1c3RlcnMuXG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuZ2V0TWFwKCk7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBnb29nbGUubWFwcy5NYXAgJiYgZS5nZXRQcm9qZWN0aW9uKCkpIHtcbiAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcywgai5DTFVTVEVSSU5HX0JFR0lOLCB0aGlzKTtcbiAgICAgIGNvbnN0IHsgY2x1c3RlcnM6IHQsIGNoYW5nZWQ6IHMgfSA9IHRoaXMuYWxnb3JpdGhtLmNhbGN1bGF0ZSh7XG4gICAgICAgIG1hcmtlcnM6IHRoaXMubWFya2VycyxcbiAgICAgICAgbWFwOiBlLFxuICAgICAgICBtYXBDYW52YXNQcm9qZWN0aW9uOiB0aGlzLmdldFByb2plY3Rpb24oKVxuICAgICAgfSk7XG4gICAgICBpZiAocyB8fCBzID09IG51bGwpIHtcbiAgICAgICAgY29uc3QgciA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgYSBvZiB0KVxuICAgICAgICAgIGEubWFya2Vycy5sZW5ndGggPT0gMSAmJiByLmFkZChhLm1hcmtlcnNbMF0pO1xuICAgICAgICBjb25zdCBvID0gW107XG4gICAgICAgIGZvciAoY29uc3QgYSBvZiB0aGlzLmNsdXN0ZXJzKVxuICAgICAgICAgIGEubWFya2VyICE9IG51bGwgJiYgKGEubWFya2Vycy5sZW5ndGggPT0gMSA/IHIuaGFzKGEubWFya2VyKSB8fCBrLnNldE1hcChhLm1hcmtlciwgbnVsbCkgOiBvLnB1c2goYS5tYXJrZXIpKTtcbiAgICAgICAgdGhpcy5jbHVzdGVycyA9IHQsIHRoaXMucmVuZGVyQ2x1c3RlcnMoKSwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IG8uZm9yRWFjaCgoYSkgPT4gay5zZXRNYXAoYSwgbnVsbCkpKTtcbiAgICAgIH1cbiAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcywgai5DTFVTVEVSSU5HX0VORCwgdGhpcyk7XG4gICAgfVxuICB9XG4gIG9uQWRkKCkge1xuICAgIHRoaXMuaWRsZUxpc3RlbmVyID0gdGhpcy5nZXRNYXAoKS5hZGRMaXN0ZW5lcihcImlkbGVcIiwgdGhpcy5yZW5kZXIuYmluZCh0aGlzKSksIHRoaXMucmVuZGVyKCk7XG4gIH1cbiAgb25SZW1vdmUoKSB7XG4gICAgZ29vZ2xlLm1hcHMuZXZlbnQucmVtb3ZlTGlzdGVuZXIodGhpcy5pZGxlTGlzdGVuZXIpLCB0aGlzLnJlc2V0KCk7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5tYXJrZXJzLmZvckVhY2goKGUpID0+IGsuc2V0TWFwKGUsIG51bGwpKSwgdGhpcy5jbHVzdGVycy5mb3JFYWNoKChlKSA9PiBlLmRlbGV0ZSgpKSwgdGhpcy5jbHVzdGVycyA9IFtdO1xuICB9XG4gIHJlbmRlckNsdXN0ZXJzKCkge1xuICAgIGNvbnN0IGUgPSBuZXcgZnQodGhpcy5tYXJrZXJzLCB0aGlzLmNsdXN0ZXJzKSwgdCA9IHRoaXMuZ2V0TWFwKCk7XG4gICAgdGhpcy5jbHVzdGVycy5mb3JFYWNoKChzKSA9PiB7XG4gICAgICBzLm1hcmtlcnMubGVuZ3RoID09PSAxID8gcy5tYXJrZXIgPSBzLm1hcmtlcnNbMF0gOiAocy5tYXJrZXIgPSB0aGlzLnJlbmRlcmVyLnJlbmRlcihzLCBlLCB0KSwgcy5tYXJrZXJzLmZvckVhY2goKHIpID0+IGsuc2V0TWFwKHIsIG51bGwpKSwgdGhpcy5vbkNsdXN0ZXJDbGljayAmJiBzLm1hcmtlci5hZGRMaXN0ZW5lcihcbiAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAocikgPT4ge1xuICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcywgai5DTFVTVEVSX0NMSUNLLCBzKSwgdGhpcy5vbkNsdXN0ZXJDbGljayhyLCBzLCB0KTtcbiAgICAgICAgfVxuICAgICAgKSksIGsuc2V0TWFwKHMubWFya2VyLCB0KTtcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgYmUgPSBPYmplY3QudmFsdWVzKGopLCBUdCA9IFAoe1xuICBuYW1lOiBcIk1hcmtlckNsdXN0ZXJcIixcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiAoe30pXG4gICAgfVxuICB9LFxuICBlbWl0czogYmUsXG4gIHNldHVwKG4sIHsgZW1pdDogZSwgZXhwb3NlOiB0LCBzbG90czogcyB9KSB7XG4gICAgY29uc3QgciA9IHkoKSwgbyA9IEMoTiwgeSgpKSwgYSA9IEMoVSwgeSgpKTtcbiAgICByZXR1cm4gRyhMZSwgciksIE8oXG4gICAgICBvLFxuICAgICAgKCkgPT4ge1xuICAgICAgICBvLnZhbHVlICYmIChyLnZhbHVlID0gSShcbiAgICAgICAgICBuZXcgeXQoe1xuICAgICAgICAgICAgbWFwOiBvLnZhbHVlLFxuICAgICAgICAgICAgLy8gQmV0dGVyIHBlcmYgdGhhbiB0aGUgZGVmYXVsdCBgU3VwZXJDbHVzdGVyQWxnb3JpdGhtYC4gU2VlOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZW1hcHMvanMtbWFya2VyY2x1c3RlcmVyL3B1bGwvNjQwXG4gICAgICAgICAgICBhbGdvcml0aG06IG5ldyBwdChuLm9wdGlvbnMuYWxnb3JpdGhtT3B0aW9ucyA/PyB7fSksXG4gICAgICAgICAgICAuLi5uLm9wdGlvbnNcbiAgICAgICAgICB9KVxuICAgICAgICApLCBiZS5mb3JFYWNoKChsKSA9PiB7XG4gICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgKGkgPSByLnZhbHVlKSA9PSBudWxsIHx8IGkuYWRkTGlzdGVuZXIobCwgKGQpID0+IGUobCwgZCkpO1xuICAgICAgICB9KSk7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbW1lZGlhdGU6ICEwXG4gICAgICB9XG4gICAgKSwgQigoKSA9PiB7XG4gICAgICB2YXIgbDtcbiAgICAgIHIudmFsdWUgJiYgKChsID0gYS52YWx1ZSkgPT0gbnVsbCB8fCBsLmV2ZW50LmNsZWFySW5zdGFuY2VMaXN0ZW5lcnMoci52YWx1ZSksIHIudmFsdWUuY2xlYXJNYXJrZXJzKCksIHIudmFsdWUuc2V0TWFwKG51bGwpKTtcbiAgICB9KSwgdCh7IG1hcmtlckNsdXN0ZXI6IHIgfSksICgpID0+IHtcbiAgICAgIHZhciBsO1xuICAgICAgcmV0dXJuIChsID0gcy5kZWZhdWx0KSA9PSBudWxsID8gdm9pZCAwIDogbC5jYWxsKHMpO1xuICAgIH07XG4gIH1cbn0pLCB3dCA9IFAoe1xuICBpbmhlcml0QXR0cnM6ICExLFxuICBwcm9wczoge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIHJlcXVpcmVkOiAhMFxuICAgIH1cbiAgfSxcbiAgc2V0dXAobiwgeyBzbG90czogZSwgZW1pdDogdCwgZXhwb3NlOiBzIH0pIHtcbiAgICBjb25zdCByID0geSgpLCBvID0gSigoKSA9PiB7XG4gICAgICB2YXIgaTtcbiAgICAgIHJldHVybiAoaSA9IGUuZGVmYXVsdCkgPT0gbnVsbCA/IHZvaWQgMCA6IGkuY2FsbChlKS5zb21lKChkKSA9PiBkLnR5cGUgIT09IEVlKTtcbiAgICB9KSwgYSA9IEooKCkgPT4gKHtcbiAgICAgIC4uLm4ub3B0aW9ucyxcbiAgICAgIGVsZW1lbnQ6IHIudmFsdWVcbiAgICB9KSksIGwgPSBEKGVlLCBbXSwgYSwgdCk7XG4gICAgcmV0dXJuIHMoe1xuICAgICAgY3VzdG9tTWFya2VyOiBsXG4gICAgfSksIHsgY3VzdG9tTWFya2VyUmVmOiByLCBjdXN0b21NYXJrZXI6IGwsIGhhc1Nsb3RDb250ZW50OiBvIH07XG4gIH1cbn0pO1xuY29uc3QgX3QgPSB7XG4gIGtleTogMCxcbiAgY2xhc3M6IFwiY3VzdG9tLW1hcmtlci13cmFwcGVyXCJcbn07XG5mdW5jdGlvbiBrdChuLCBlLCB0LCBzLCByLCBvKSB7XG4gIHJldHVybiBuLmhhc1Nsb3RDb250ZW50ID8gKFkoKSwgWChcImRpdlwiLCBfdCwgW1xuICAgIGFlKFwiZGl2XCIsIFBlKHtcbiAgICAgIHJlZjogXCJjdXN0b21NYXJrZXJSZWZcIixcbiAgICAgIHN0eWxlOiB7IGN1cnNvcjogbi4kYXR0cnMub25DbGljayA/IFwicG9pbnRlclwiIDogdm9pZCAwIH1cbiAgICB9LCBuLiRhdHRycyksIFtcbiAgICAgIFEobi4kc2xvdHMsIFwiZGVmYXVsdFwiLCB7fSwgdm9pZCAwLCAhMClcbiAgICBdLCAxNilcbiAgXSkpIDogT2UoXCJcIiwgITApO1xufVxuY29uc3QgJHQgPSAvKiBAX19QVVJFX18gKi8gdGUod3QsIFtbXCJyZW5kZXJcIiwga3RdLCBbXCJfX3Njb3BlSWRcIiwgXCJkYXRhLXYtMmQyZDM0M2FcIl1dKSwgUnQgPSBQKHtcbiAgbmFtZTogXCJIZWF0bWFwTGF5ZXJcIixcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiAoe30pXG4gICAgfVxuICB9LFxuICBzZXR1cChuKSB7XG4gICAgY29uc3QgZSA9IHkoKSwgdCA9IEMoTiwgeSgpKSwgcyA9IEMoVSwgeSgpKTtcbiAgICByZXR1cm4gTyhcbiAgICAgIFt0LCAoKSA9PiBuLm9wdGlvbnNdLFxuICAgICAgKFtyLCBvXSwgW2EsIGxdKSA9PiB7XG4gICAgICAgIHZhciBkO1xuICAgICAgICBjb25zdCBpID0gISQobywgbCkgfHwgdC52YWx1ZSAhPT0gYTtcbiAgICAgICAgaWYgKHQudmFsdWUgJiYgcy52YWx1ZSAmJiBpKSB7XG4gICAgICAgICAgY29uc3QgdSA9IHN0cnVjdHVyZWRDbG9uZShvKTtcbiAgICAgICAgICBpZiAodS5kYXRhICYmICEodS5kYXRhIGluc3RhbmNlb2Ygcy52YWx1ZS5NVkNBcnJheSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBzLnZhbHVlLkxhdExuZztcbiAgICAgICAgICAgIHUuZGF0YSA9IChkID0gdS5kYXRhKSA9PSBudWxsID8gdm9pZCAwIDogZC5tYXAoKGgpID0+IGggaW5zdGFuY2VvZiBjIHx8IFwibG9jYXRpb25cIiBpbiBoICYmIChoLmxvY2F0aW9uIGluc3RhbmNlb2YgYyB8fCBoLmxvY2F0aW9uID09PSBudWxsKSA/IGggOiBcImxvY2F0aW9uXCIgaW4gaCA/IHsgLi4uaCwgbG9jYXRpb246IG5ldyBjKGgubG9jYXRpb24pIH0gOiBuZXcgYyhoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGUudmFsdWUgPyBlLnZhbHVlLnNldE9wdGlvbnModSkgOiBlLnZhbHVlID0gSShcbiAgICAgICAgICAgIG5ldyBzLnZhbHVlLnZpc3VhbGl6YXRpb24uSGVhdG1hcExheWVyKHtcbiAgICAgICAgICAgICAgLi4udSxcbiAgICAgICAgICAgICAgbWFwOiB0LnZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7IGltbWVkaWF0ZTogITAgfVxuICAgICksIEIoKCkgPT4ge1xuICAgICAgZS52YWx1ZSAmJiBlLnZhbHVlLnNldE1hcChudWxsKTtcbiAgICB9KSwgeyBoZWF0bWFwTGF5ZXI6IGUgfTtcbiAgfSxcbiAgcmVuZGVyOiAoKSA9PiBudWxsXG59KTtcbmV4cG9ydCB7XG4gIFN0IGFzIENpcmNsZSxcbiAgSXQgYXMgQ3VzdG9tQ29udHJvbCxcbiAgJHQgYXMgQ3VzdG9tTWFya2VyLFxuICBFdCBhcyBHb29nbGVNYXAsXG4gIFJ0IGFzIEhlYXRtYXBMYXllcixcbiAgQXQgYXMgSW5mb1dpbmRvdyxcbiAgUHQgYXMgTWFya2VyLFxuICBUdCBhcyBNYXJrZXJDbHVzdGVyLFxuICB4dCBhcyBQb2x5Z29uLFxuICBPdCBhcyBQb2x5bGluZSxcbiAgTHQgYXMgUmVjdGFuZ2xlXG59O1xuIiwiPHNjcmlwdCBzZXR1cD5cclxuaW1wb3J0IHsgR29vZ2xlTWFwLCBDdXN0b21NYXJrZXIgfSBmcm9tICd2dWUzLWdvb2dsZS1tYXAnXHJcblxyXG48L3NjcmlwdD5cclxuXHJcbjx0ZW1wbGF0ZT5cclxuICAgIDxzZWN0aW9uIHYtaWY9XCJvbkxpbmVcIj5cclxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwibXQtMTIgcHgtMiBweS0yIHJvdW5kZWQtc20gYm9yZGVyIGJvcmRlci1yZWQtNDAwIGJnLXNsYXRlLTUwXCIgQGNsaWNrPVwiZ2V0TXlMb2NhdGlvblwiPk15XHJcbiAgICAgICAgICAgIGxvY2F0aW9uPC9idXR0b24+XHJcbiAgICAgICAgPEdvb2dsZU1hcCA6YXBpLWtleT1cImdvb2dsZU1hcHNBcGlLZXlcIiBzdHlsZT1cIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDc1dmhcIiA6Y2VudGVyPVwibWFwQ2VudGVyXCIgOnpvb209XCJtYXBab29tXCJcclxuICAgICAgICAgICAgQGNsaWNrPVwiaGFuZGxlTWFwQ2xpY2tcIj5cclxuICAgICAgICAgICAgPGRpdiB2LWlmPVwib3duTG9jYXRpb25SZXF1ZXN0ZWRcIj5cclxuICAgICAgICAgICAgICAgIDxDdXN0b21NYXJrZXIgOm9wdGlvbnM9XCJtYXJrZXJPcHRpb25zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cInRleHQtYWxpZ246IGNlbnRlclwiIGNsYXNzPVwiaG92ZXI6Y3Vyc29yLXBvaW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBuYW1lPVwiZmEtbWFwLW1hcmtlci1hbHRcIiBzY2FsZT1cIjJcIiBmaWxsPVwicmVkXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvQ3VzdG9tTWFya2VyPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiB2LWlmPVwic2VsZWN0ZWRMb2NhdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgPEN1c3RvbU1hcmtlciA6b3B0aW9ucz1cInNlbGVjdGVkTG9jYXRpb25NYXJrZXJPcHRpb25zXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cInRleHQtYWxpZ246IGNlbnRlclwiIGNsYXNzPVwiaG92ZXI6Y3Vyc29yLXBvaW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbiBuYW1lPVwiZmEtbWFwLW1hcmtlci1hbHRcIiBzY2FsZT1cIjJcIiBmaWxsPVwib3JhbmdlXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvQ3VzdG9tTWFya2VyPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L0dvb2dsZU1hcD5cclxuICAgIDwvc2VjdGlvbj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbmltcG9ydCB7IGNoZWNrTG9jYXRpb25QZXJtaXNzaW9uIH0gZnJvbSAnQC9zdG9yZXMvZ2VvTG9jYXRpb24nO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIHVzZXI6IHtcclxuICAgICAgICAgICAgdHlwZTogT2JqZWN0LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25MaW5lOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBkYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGdvb2dsZU1hcHNBcGlLZXk6IGltcG9ydC5tZXRhLmVudi5WSVRFX0dPT0dMRV9NQVBTX0FQSV9LRVksXHJcbiAgICAgICAgICAgIG1hcFpvb206IDIsXHJcbiAgICAgICAgICAgIG1hcENlbnRlcjogeyBsYXQ6IDMzLCBsbmc6IDQ0IH0sXHJcbiAgICAgICAgICAgIGxhdGl0dWRlOiAnJyxcclxuICAgICAgICAgICAgbG9uZ2l0dWRlOiAnJyxcclxuICAgICAgICAgICAgdXNlclBvc2l0aW9uOiB7fSxcclxuICAgICAgICAgICAgbWFya2VyT3B0aW9uczoge30sXHJcbiAgICAgICAgICAgIG93bkxvY2F0aW9uUmVxdWVzdGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgc2VsZWN0ZWRMb2NhdGlvbk1hcmtlck9wdGlvbnM6IHt9LFxyXG4gICAgICAgICAgICBzZWxlY3RlZExvY2F0aW9uQ2VudGVyOiB7IGxhdDogMCwgbG5nOiAwIH0sXHJcbiAgICAgICAgICAgIHNlbGVjdGVkTG9jYXRpb246IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBhc3luYyBnZXRNeUxvY2F0aW9uKCkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXNlclBvc2l0aW9uID0gYXdhaXQgY2hlY2tMb2NhdGlvblBlcm1pc3Npb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGF0aXR1ZGUgPSB1c2VyUG9zaXRpb24uY29vcmRzLmxhdGl0dWRlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvbmdpdHVkZSA9IHVzZXJQb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVzZXJQb3NpdGlvbiA9IHsgbGF0OiB0aGlzLmxhdGl0dWRlLCBsbmc6IHRoaXMubG9uZ2l0dWRlIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubWFya2VyT3B0aW9ucyA9IHsgcG9zaXRpb246IHRoaXMudXNlclBvc2l0aW9uLCBsYWJlbDogJ1UnLCB0aXRsZTogJ0N1cnJlbnQgTG9jYXRpb24nIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubWFwQ2VudGVyID0gdGhpcy51c2VyUG9zaXRpb25cclxuICAgICAgICAgICAgICAgIHRoaXMubWFwWm9vbSA9IDEyXHJcbiAgICAgICAgICAgICAgICB0aGlzLm93bkxvY2F0aW9uUmVxdWVzdGVkID0gdHJ1ZVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBsb2NhdGlvbjonLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgZXJyb3JcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFuZGxlTWFwQ2xpY2soZXZlbnQpIHtcclxuICAgICAgICAgICAgLy8gR2V0IHRoZSBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlIG9mIHRoZSBjbGlja2VkIHBvaW50XHJcbiAgICAgICAgICAgIGNvbnN0IGNsaWNrZWRMYXRMbmcgPSBldmVudC5sYXRMbmc7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhdCA9IGNsaWNrZWRMYXRMbmcubGF0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxuZyA9IGNsaWNrZWRMYXRMbmcubG5nKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkTG9jYXRpb25DZW50ZXIgPSB7IGxhdDogbGF0LCBsbmc6IGxuZyB9XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRMb2NhdGlvbiA9IHRydWVcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZExvY2F0aW9uTWFya2VyT3B0aW9ucyA9IHsgcG9zaXRpb246IHRoaXMuc2VsZWN0ZWRMb2NhdGlvbkNlbnRlciB9XHJcbiAgICAgICAgICAgIHRoaXMubWFwQ2VudGVyID0gdGhpcy5zZWxlY3RlZExvY2F0aW9uQ2VudGVyXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcblxyXG59XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPjwvc3R5bGU+Il0sIm5hbWVzIjpbImEiLCJkIiwicWUiLCJCZSIsIm4iLCJzZSIsIk4iLCJVIiwiTGUiLCJlZSIsIlNlIiwicSIsIlVlIiwicyIsIm8iLCJsIiwiYyIsImkiLCJEZSIsImRlIiwiUiIsIlQiLCJoIiwicCIsIm0iLCJmIiwiZyIsInYiLCJ3IiwiXyIsIkUiLCJiIiwieCIsIkZlIiwiciIsImhlIiwicGUiLCJWZSIsIlAiLCJ5IiwiRyIsIk8iLCJJIiwiWiIsIk0iLCJGIiwiTWUiLCJCIiwidGUiLCJ6ZSIsIkdlIiwiWSIsIlgiLCJhZSIsIlEiLCJaZSIsIk5lIiwiRXQiLCJIZSIsIldlIiwiJCIsIktlIiwiSmUiLCJEIiwiQyIsIkoiLCJqIiwid3QiLCJFZSIsIl90Iiwia3QiLCJQZSIsIk9lIiwiJHQiLCJfX2RlZmF1bHRfXyIsInVzZXJQb3NpdGlvbiIsImNoZWNrTG9jYXRpb25QZXJtaXNzaW9uIiwiZXJyb3IiLCJldmVudCIsImNsaWNrZWRMYXRMbmciLCJsYXQiLCJs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LEVBQUUsTUFBTSxFQUFHLENBQ1prRCxFQUFFbEQsRUFBRSxPQUFRLFVBQVcsQ0FBQSxFQUFJLE9BQVEsRUFBRSxDQUN0QyxFQUFFLEVBQUUsQ0FDTixDQUFBLEdBQUtvRSxFQUFHLEdBQUksRUFBRSxDQUNqQixDQUNLLE1BQUNDLEVBQXFCekIsRUFBR21CLEdBQUksQ0FBQyxDQUFDLFNBQVVHLEVBQUUsRUFBRyxDQUFDLFlBQWEsaUJBQWlCLENBQUMsQ0FBQyxtS0Nyd0RwRkksR0FBZSxDQUNYLE1BQU8sQ0FDSCxLQUFNLENBQ0YsS0FBTSxNQUNWLEVBQ0EsT0FBUSxDQUNKLEtBQU0sT0FDVixDQUNKLEVBQ0EsTUFBTyxDQUNJLE1BQUEsQ0FDSCxpQkFBa0IsMENBQ2xCLFFBQVMsRUFDVCxVQUFXLENBQUUsSUFBSyxHQUFJLElBQUssRUFBRyxFQUM5QixTQUFVLEdBQ1YsVUFBVyxHQUNYLGFBQWMsQ0FBQyxFQUNmLGNBQWUsQ0FBQyxFQUNoQixxQkFBc0IsR0FDdEIsOEJBQStCLENBQUMsRUFDaEMsdUJBQXdCLENBQUUsSUFBSyxFQUFHLElBQUssQ0FBRSxFQUN6QyxpQkFBa0IsRUFBQSxDQUUxQixFQUNBLFFBQVMsQ0FDTCxNQUFNLGVBQWdCLENBQ2QsR0FBQSxDQUNNLE1BQUFDLEVBQWUsTUFBTUMsS0FDdEIsS0FBQSxTQUFXRCxFQUFhLE9BQU8sU0FDL0IsS0FBQSxVQUFZQSxFQUFhLE9BQU8sVUFDckMsS0FBSyxhQUFlLENBQUUsSUFBSyxLQUFLLFNBQVUsSUFBSyxLQUFLLFdBQy9DLEtBQUEsY0FBZ0IsQ0FBRSxTQUFVLEtBQUssYUFBYyxNQUFPLElBQUssTUFBTyxvQkFDdkUsS0FBSyxVQUFZLEtBQUssYUFDdEIsS0FBSyxRQUFVLEdBQ2YsS0FBSyxxQkFBdUIsU0FDdkJFLEVBQU8sQ0FDSixRQUFBLE1BQU0sMEJBQTJCQSxDQUFLLENBRWxELENBQ0osRUFDQSxlQUFlQyxFQUFPLENBRWxCLE1BQU1DLEVBQWdCRCxFQUFNLE9BQ3RCRSxFQUFNRCxFQUFjLE1BQ3BCRSxFQUFNRixFQUFjLE1BRXJCLEtBQUEsdUJBQXlCLENBQUUsSUFBQUMsRUFBVSxJQUFBQyxDQUFTLEVBQ25ELEtBQUssaUJBQW1CLEdBQ3hCLEtBQUssOEJBQWdDLENBQUUsU0FBVSxLQUFLLHNCQUF1QixFQUM3RSxLQUFLLFVBQVksS0FBSyxzQkFDMUIsQ0FDSixDQUdKIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzBdfQ==
