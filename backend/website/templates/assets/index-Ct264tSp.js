import{_ as F,a as pe,c as me,b as he}from"./offlineWorker-DhH_RA-K.js";import{r as U,o as d,c as m,a,F as N,e as B,t as O,f as x,v as te,g as L,h as v,i as be,b as C,j as ge,k as oe,l as _,p as T,m as V,q as fe,s as se,x as ie,y as ye,z as ve,A as z,C as we,B as _e,D as M,E as xe,G as $,w as q,u as D,n as G,H as K}from"./index-CXXDljtV.js";const ke={emits:["submitForm"],props:{formObj:{type:Object}},data(){return{payload:{formName:this.formObj.formName}}},methods:{submitForm(){this.$emit("submitForm",this.payload)}}},Ce={class:"flex flex-wrap gap-x-6"},Le={class:"rounded-lg border border-gray-700 bg-[#161b22] flex flex-col text-white px-4 py-3"},Se={class:"block uppercase text-white text-md font-bold"},Pe=["for"],Oe={class:"relative mb-3"},Ie=["id","onUpdate:modelValue"],Ee=["id","onUpdate:modelValue"],Ne={key:2,class:"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-white"},Re=a("svg",{class:"fill-current h-4 w-4",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20"},[a("path",{d:"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"})],-1),Ue=[Re],Me={key:3,class:"text-sm"},Fe={class:"pb-10 flex justify-center"};function je(o,e,t,n,s,i){const r=U("v-icon");return d(),m(N,null,[a("div",Ce,[(d(!0),m(N,null,B(t.formObj,(c,h)=>(d(),m("section",{key:h,class:"pb-4 px-4 w-full"},[a("div",Le,[a("label",Se,O(c.title),1),(d(!0),m(N,null,B(c.formEntries,(u,b)=>(d(),m("div",{key:b,class:""},[a("label",{class:"block uppercase text-white text-sm mb-2",for:u.label},O(u.title),9,Pe),a("div",Oe,[u.textarea?x((d(),m("textarea",{key:1,class:"shadow bg-black appearance-none border border-gray-700 rounded w-full py-1 px-3 leading-tight focus:outline-none focus:shadow-outline",id:u.label,"onUpdate:modelValue":l=>s.payload[u.payloadLabel]=l,rows:"4",maxlength:"250"},null,8,Ee)),[[L,s.payload[u.payloadLabel]]]):x((d(),m("select",{key:0,class:"shadow bg-black appearance-none border border-gray-700 rounded w-full py-1 px-3 leading-tight focus:outline-none focus:shadow-outline",id:u.label,"onUpdate:modelValue":l=>s.payload[u.payloadLabel]=l},[(d(!0),m(N,null,B(u.options,(l,g)=>(d(),m("option",{key:g},O(l),1))),128))],8,Ie)),[[te,s.payload[u.payloadLabel]]]),u.textarea?v("",!0):(d(),m("div",Ne,Ue)),u.textarea?(d(),m("span",Me,O(s.payload[u.payloadLabel]?s.payload[u.payloadLabel].length:0)+"/250",1)):v("",!0)])]))),128))])]))),128))]),a("section",Fe,[a("button",{class:"bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded",onClick:e[0]||(e[0]=(...c)=>i.submitForm&&i.submitForm(...c))},[be("Submit "),C(r,{name:"io-send"})])])],64)}const qe=F(ke,[["render",je]]),Ae=[{title:"Security risks",formName:"security",formEntries:[{label:"risk-armed-groups",payloadLabel:"armedGroupsPresence",title:"Presence of armed groups",options:["Present","Absent","Unknown"]},{label:"risk-report",payloadLabel:"reportOfViolence",title:"Reports of violence or unrest",options:["Confirmed","Suspected","Not reported"]},{label:"risk-local-enforcement",payloadLabel:"localEnforcementPresence",title:"Law enforcement or military presence",options:["Present","Absent","Unknown"]},{label:"risk-comments",payloadLabel:"securityRiskComments",title:"Additional Comments",textarea:!0}]},{title:"Incidents",formName:"incidents",formEntries:[{label:"incidents-reported",payloadLabel:"incidentsReported",title:"Reported incidents",options:["Looting","Theft","Vandalism","Violence","No reported incidents"]},{label:"incidents-risk-to-relief",payloadLabel:"riskToRelief",title:"Security incidents affecting relief efforts",options:["High risk","Moderate risk","Low risk","Unknown"]},{label:"incidents-comments",payloadLabel:"incidentsComments",title:"Additional Comments",textarea:!0}]}],Be=[{title:"Roads",formName:"roads",formEntries:[{title:"Condition",label:"road-condition",payloadLabel:"roadCondition",options:["Clear","Damaged","Blocked"]},{title:"Type of damage",label:"road-damage",payloadLabel:"roadDamage",options:["Flooded","Debris","Collapsed","None"]},{title:"Accessibility",label:"road-access",payloadLabel:"roadAccess",options:["Passable","Impassable"]},{label:"road-comments",payloadLabel:"roadComments",title:"Additional Comments",textarea:!0}]},{title:"Buildings",formName:"buildings",formEntries:[{title:"Structural Integrity",label:"building-integrity",payloadLabel:"buildingIntegrity",options:["Intact","Damaged","Collapsed"]},{title:"Type",label:"building-type",payloadLabel:"buildingType",options:["Residential","Commercial","Government","None"]},{title:"Damage Assessment",label:"building-damage",payloadLabel:"buildingDamage",options:["Minor","Moderate","Severe"]},{label:"building-comments",payloadLabel:"buildingComments",title:"Additional Comments",textarea:!0}]},{title:"Utilities",formName:"utilities",formEntries:[{title:"Power Supply",label:"utility-power",payloadLabel:"utilityPower",options:["Available","Outages","Generators"]},{title:"Water Supply",label:"utility-water",payloadLabel:"utilityWater",options:["Functional","Contaminated","Shortages"]},{title:"Communications",label:"utility-comms",payloadLabel:"utilityComms",options:["Functional","Cell Service Only","Internet Connectivity","Limited"]},{label:"utility-comments",payloadLabel:"utilityComments",title:"Additional Comments",textarea:!0}]}],Te=[{title:"Communications",formName:"communications",formEntries:[{label:"comms-infrastructure",payloadLabel:"commsInfrastructure",title:"Status of cell towers and internet infrastructure",options:["Fully operational","Partly operational","Offline"]},{label:"comms-phone-and-internet",payloadLabel:"commsPhoneAndInternet",title:"Reliability of phone and internet connectivity",options:["High (consistent signal and bandwidth)","Moderate (intermittent signal and/or reduced bandwidth)","Low (unreliable signal and insufficient bandwidth)"]},{label:"comms-availablity",payloadLabel:"commsAvailability",title:"Availability of communication devices",options:["Abundant (phones, radios, satellite phones)","Limited (some devices available, may not be enough for all teams)","Scarce (very few devices, priority for critical communications only)"]},{label:"comms-alternative",payloadLabel:"commsAlternative",title:"Alternative communication methods",options:["Satellite phones","High-frequency radios","None"]},{label:"comms-comments",payloadLabel:"commsComments",title:"Additional Comments",textarea:!0}]},{title:"Connectivity",formName:"connectivity",formEntries:[{label:"connect-electricity",payloadLabel:"connectElectricity",title:"Electricity Availability",options:["Stable grid supply","Occasional outages, backup available","Unstable grid, reliance on generators"]},{label:"connect-fuel-availability",payloadLabel:"connectFuelAvailability",title:"Fuel Availability for Generators",options:["Sufficient (reliable supply chain)","Limited (supply chain disruptions possible)","Scarce (no reliable supply chain)"]},{label:"connect-backup-power",payloadLabel:"connectBackupPower",title:"Backup Power Sources",options:["Solar panels (available and reliable)","Batteries (available but unreliable)","None"]},{label:"connect-local-control",payloadLabel:"connectLocalControl",title:"Local Control of Electricity Supply",options:["Government-controlled grid","Independent local entities","No local control, dependent on external sources"]},{label:"connect-comments",payloadLabel:"connectComments",title:"Additional Comments",textarea:!0}]}];function re(){return"permissions"in navigator&&"geolocation"in navigator?navigator.permissions.query({name:"geolocation"}).then(function(o){return o.state==="granted"?W():new Promise((e,t)=>{navigator.geolocation.getCurrentPosition(e,t)})}):"geolocation"in navigator?W():(console.error("Geolocation is not supported by this browser."),Promise.reject("Geolocation is not supported by this browser."))}function W(){return new Promise((o,e)=>{navigator.geolocation.getCurrentPosition(o,e)})}const $e={components:{BoilerplateForm:qe},props:{onLine:{type:Boolean}},data(){return{infrastructureForm:Be,securityForm:Ae,communicationsForm:Te,selectedForm:"Infrastructure",items:[]}},methods:{async submitForm(o){if(navigator.onLine){console.log(`I am online! ${o}`);try{const e=await re();console.log("Latitude: "+e.coords.latitude),console.log("Longitude: "+e.coords.longitude),console.log("Timestamp: "+e.timestamp);const t=new Date(e.timestamp);console.log(t)}catch(e){console.error("Error getting location:",e)}}else this.addItemToDb(JSON.stringify(o))},async addItemToDb(o){try{const e={payload:o},t=await pe(e);this.items.push({id:t,...e}),console.log("added item")}catch(e){console.error(e),alert("Failed to add item")}},loadForm(){switch(this.selectedForm.toLowerCase()){case"infrastructure":return this.infrastructureForm;case"security":return this.securityForm;case"communication":return this.communicationsForm}}}},De={class:"mt-12 mb-16 pt-4"},Ve={class:"w-full px-3 mb-6"},ze=a("label",{class:"block uppercase text-white text-md font-bold mb-2",for:"grid-state"}," Category ",-1),Ge={class:"relative"},Ke=a("option",null,"Infrastructure",-1),He=a("option",null,"Medical",-1),Ze=a("option",null,"Security",-1),We=a("option",null,"Logistics",-1),Je=a("option",null,"Environment",-1),Xe=a("option",null,"Health",-1),Ye=a("option",null,"Communication",-1),Qe=[Ke,He,Ze,We,Je,Xe,Ye],et=a("div",{class:"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-white"},[a("svg",{class:"fill-current h-4 w-4",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20"},[a("path",{d:"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"})])],-1);function tt(o,e,t,n,s,i){const r=U("BoilerplateForm");return d(),m("section",De,[a("form",{class:"w-full max-w-lg mx-auto flex flex-col",onSubmit:e[1]||(e[1]=ge(()=>{},["prevent"]))},[a("div",Ve,[ze,a("div",Ge,[x(a("select",{class:"shadow bg-black text-white appearance-none border border-gray-700 rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline",id:"grid-state","onUpdate:modelValue":e[0]||(e[0]=c=>s.selectedForm=c)},Qe,512),[[te,s.selectedForm]]),et])]),C(r,{formObj:i.loadForm(),onSubmitForm:i.submitForm},null,8,["formObj","onSubmitForm"])],32)])}const ot=F($e,[["render",tt]]);(function(){try{if(typeof document<"u"){var o=document.createElement("style");o.appendChild(document.createTextNode(".mapdiv[data-v-dbf82c40]{width:100%;height:100%}.custom-control-wrapper[data-v-d099a3a6]{display:none}.mapdiv .custom-control-wrapper[data-v-d099a3a6]{display:inline-block}.info-window-wrapper[data-v-cbe1707b]{display:none}.mapdiv .info-window-wrapper[data-v-cbe1707b]{display:inline-block}.custom-marker-wrapper[data-v-2d2d343a]{display:none}.mapdiv .custom-marker-wrapper[data-v-2d2d343a]{display:inline-block}")),document.head.appendChild(o)}}catch(e){console.error("vite-plugin-css-injected-by-js",e)}})();var st=Object.defineProperty,it=(o,e,t)=>e in o?st(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t,J=(o,e,t)=>(it(o,typeof e!="symbol"?e+"":e,t),t);const ne=Symbol("map"),ae=Symbol("api"),rt=Symbol("markerCluster"),A=Symbol("CustomMarker"),nt=Symbol("mapTilesLoaded"),le=["click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","rightclick"];/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function at(o,e,t,n){function s(i){return i instanceof t?i:new t(function(r){r(i)})}return new(t||(t=Promise))(function(i,r){function c(b){try{u(n.next(b))}catch(l){r(l)}}function h(b){try{u(n.throw(b))}catch(l){r(l)}}function u(b){b.done?i(b.value):s(b.value).then(c,h)}u((n=n.apply(o,e||[])).next())})}var lt=function o(e,t){if(e===t)return!0;if(e&&t&&typeof e=="object"&&typeof t=="object"){if(e.constructor!==t.constructor)return!1;var n,s,i;if(Array.isArray(e)){if(n=e.length,n!=t.length)return!1;for(s=n;s--!==0;)if(!o(e[s],t[s]))return!1;return!0}if(e.constructor===RegExp)return e.source===t.source&&e.flags===t.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===t.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===t.toString();if(i=Object.keys(e),n=i.length,n!==Object.keys(t).length)return!1;for(s=n;s--!==0;)if(!Object.prototype.hasOwnProperty.call(t,i[s]))return!1;for(s=n;s--!==0;){var r=i[s];if(!o(e[r],t[r]))return!1}return!0}return e!==e&&t!==t};const X="__googleMapsScriptId";var R;(function(o){o[o.INITIALIZED=0]="INITIALIZED",o[o.LOADING=1]="LOADING",o[o.SUCCESS=2]="SUCCESS",o[o.FAILURE=3]="FAILURE"})(R||(R={}));class P{constructor({apiKey:e,authReferrerPolicy:t,channel:n,client:s,id:i=X,language:r,libraries:c=[],mapIds:h,nonce:u,region:b,retries:l=3,url:g="https://maps.googleapis.com/maps/api/js",version:y}){if(this.callbacks=[],this.done=!1,this.loading=!1,this.errors=[],this.apiKey=e,this.authReferrerPolicy=t,this.channel=n,this.client=s,this.id=i||X,this.language=r,this.libraries=c,this.mapIds=h,this.nonce=u,this.region=b,this.retries=l,this.url=g,this.version=y,P.instance){if(!lt(this.options,P.instance.options))throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(P.instance.options)}`);return P.instance}P.instance=this}get options(){return{version:this.version,apiKey:this.apiKey,channel:this.channel,client:this.client,id:this.id,libraries:this.libraries,language:this.language,region:this.region,mapIds:this.mapIds,nonce:this.nonce,url:this.url,authReferrerPolicy:this.authReferrerPolicy}}get status(){return this.errors.length?R.FAILURE:this.done?R.SUCCESS:this.loading?R.LOADING:R.INITIALIZED}get failed(){return this.done&&!this.loading&&this.errors.length>=this.retries+1}createUrl(){let e=this.url;return e+="?callback=__googleMapsCallback",this.apiKey&&(e+=`&key=${this.apiKey}`),this.channel&&(e+=`&channel=${this.channel}`),this.client&&(e+=`&client=${this.client}`),this.libraries.length>0&&(e+=`&libraries=${this.libraries.join(",")}`),this.language&&(e+=`&language=${this.language}`),this.region&&(e+=`&region=${this.region}`),this.version&&(e+=`&v=${this.version}`),this.mapIds&&(e+=`&map_ids=${this.mapIds.join(",")}`),this.authReferrerPolicy&&(e+=`&auth_referrer_policy=${this.authReferrerPolicy}`),e}deleteScript(){const e=document.getElementById(this.id);e&&e.remove()}load(){return this.loadPromise()}loadPromise(){return new Promise((e,t)=>{this.loadCallback(n=>{n?t(n.error):e(window.google)})})}importLibrary(e){return this.execute(),google.maps.importLibrary(e)}loadCallback(e){this.callbacks.push(e),this.execute()}setScript(){var e,t;if(document.getElementById(this.id)){this.callback();return}const n={key:this.apiKey,channel:this.channel,client:this.client,libraries:this.libraries.length&&this.libraries,v:this.version,mapIds:this.mapIds,language:this.language,region:this.region,authReferrerPolicy:this.authReferrerPolicy};Object.keys(n).forEach(i=>!n[i]&&delete n[i]),!((t=(e=window==null?void 0:window.google)===null||e===void 0?void 0:e.maps)===null||t===void 0)&&t.importLibrary||(i=>{let r,c,h,u="The Google Maps JavaScript API",b="google",l="importLibrary",g="__ib__",y=document,p=window;p=p[b]||(p[b]={});const f=p.maps||(p.maps={}),w=new Set,k=new URLSearchParams,I=()=>r||(r=new Promise((S,E)=>at(this,void 0,void 0,function*(){var j;yield c=y.createElement("script"),c.id=this.id,k.set("libraries",[...w]+"");for(h in i)k.set(h.replace(/[A-Z]/g,Z=>"_"+Z[0].toLowerCase()),i[h]);k.set("callback",b+".maps."+g),c.src=this.url+"?"+k,f[g]=S,c.onerror=()=>r=E(Error(u+" could not load.")),c.nonce=this.nonce||((j=y.querySelector("script[nonce]"))===null||j===void 0?void 0:j.nonce)||"",y.head.append(c)})));f[l]?console.warn(u+" only loads once. Ignoring:",i):f[l]=(S,...E)=>w.add(S)&&I().then(()=>f[l](S,...E))})(n);const s=this.libraries.map(i=>this.importLibrary(i));s.length||s.push(this.importLibrary("core")),Promise.all(s).then(()=>this.callback(),i=>{const r=new ErrorEvent("error",{error:i});this.loadErrorCallback(r)})}reset(){this.deleteScript(),this.done=!1,this.loading=!1,this.errors=[],this.onerrorEvent=null}resetIfRetryingFailed(){this.failed&&this.reset()}loadErrorCallback(e){if(this.errors.push(e),this.errors.length<=this.retries){const t=this.errors.length*Math.pow(2,this.errors.length);console.error(`Failed to load Google Maps script, retrying in ${t} ms.`),setTimeout(()=>{this.deleteScript(),this.setScript()},t)}else this.onerrorEvent=e,this.callback()}callback(){this.done=!0,this.loading=!1,this.callbacks.forEach(e=>{e(this.onerrorEvent)}),this.callbacks=[]}execute(){if(this.resetIfRetryingFailed(),this.done)this.callback();else{if(window.google&&window.google.maps&&window.google.maps.version){console.warn("Google Maps already loaded outside @googlemaps/js-api-loader.This may result in undesirable behavior as options and script parameters may not match."),this.callback();return}this.loading||(this.loading=!0,this.setScript())}}}function ct(o){return class extends o.OverlayView{constructor(e){super(),J(this,"element"),J(this,"opts");const{element:t,...n}=e;this.element=t,this.opts=n,this.opts.map&&this.setMap(this.opts.map)}getPosition(){return this.opts.position?this.opts.position instanceof o.LatLng?this.opts.position:new o.LatLng(this.opts.position):null}getVisible(){if(!this.element)return!1;const e=this.element;return e.style.display!=="none"&&e.style.visibility!=="hidden"&&(e.style.opacity===""||Number(e.style.opacity)>.01)}onAdd(){if(!this.element)return;const e=this.getPanes();e&&e.overlayMouseTarget.appendChild(this.element)}draw(){if(!this.element)return;const e=this.getProjection(),t=e==null?void 0:e.fromLatLngToDivPixel(this.getPosition());if(t){this.element.style.position="absolute";const n=this.element.offsetHeight,s=this.element.offsetWidth;let i,r;switch(this.opts.anchorPoint){case"TOP_CENTER":i=t.x-s/2,r=t.y;break;case"BOTTOM_CENTER":i=t.x-s/2,r=t.y-n;break;case"LEFT_CENTER":i=t.x,r=t.y-n/2;break;case"RIGHT_CENTER":i=t.x-s,r=t.y-n/2;break;case"TOP_LEFT":i=t.x,r=t.y;break;case"TOP_RIGHT":i=t.x-s,r=t.y;break;case"BOTTOM_LEFT":i=t.x,r=t.y-n;break;case"BOTTOM_RIGHT":i=t.x-s,r=t.y-n;break;default:i=t.x-s/2,r=t.y-n/2}this.element.style.left=i+"px",this.element.style.top=r+"px",this.element.style.transform=`translateX(${this.opts.offsetX||0}px) translateY(${this.opts.offsetY||0}px)`,this.opts.zIndex&&(this.element.style.zIndex=this.opts.zIndex.toString())}}onRemove(){this.element&&this.element.remove()}setOptions(e){const{element:t,...n}=e;this.element=t,this.opts=n,this.draw()}}}let Y;const Q=["bounds_changed","center_changed","click","contextmenu","dblclick","drag","dragend","dragstart","heading_changed","idle","isfractionalzoomenabled_changed","mapcapabilities_changed","maptypeid_changed","mousemove","mouseout","mouseover","projection_changed","renderingtype_changed","rightclick","tilesloaded","tilt_changed","zoom_changed"],dt=oe({props:{apiPromise:{type:Promise},apiKey:{type:String,default:""},version:{type:String,default:"weekly"},libraries:{type:Array,default:()=>["places"]},region:{type:String,required:!1},language:{type:String,required:!1},backgroundColor:{type:String,required:!1},center:{type:Object,default:()=>({lat:0,lng:0})},clickableIcons:{type:Boolean,required:!1,default:void 0},controlSize:{type:Number,required:!1},disableDefaultUi:{type:Boolean,required:!1,default:void 0},disableDoubleClickZoom:{type:Boolean,required:!1,default:void 0},draggable:{type:Boolean,required:!1,default:void 0},draggableCursor:{type:String,required:!1},draggingCursor:{type:String,required:!1},fullscreenControl:{type:Boolean,required:!1,default:void 0},fullscreenControlPosition:{type:String,required:!1},gestureHandling:{type:String,required:!1},heading:{type:Number,required:!1},isFractionalZoomEnabled:{type:Boolean,required:!1,default:void 0},keyboardShortcuts:{type:Boolean,required:!1,default:void 0},mapTypeControl:{type:Boolean,required:!1,default:void 0},mapTypeControlOptions:{type:Object,required:!1},mapTypeId:{type:[Number,String],required:!1},mapId:{type:String,required:!1},maxZoom:{type:Number,required:!1},minZoom:{type:Number,required:!1},noClear:{type:Boolean,required:!1,default:void 0},panControl:{type:Boolean,required:!1,default:void 0},panControlPosition:{type:String,required:!1},restriction:{type:Object,required:!1},rotateControl:{type:Boolean,required:!1,default:void 0},rotateControlPosition:{type:String,required:!1},scaleControl:{type:Boolean,required:!1,default:void 0},scaleControlStyle:{type:Number,required:!1},scrollwheel:{type:Boolean,required:!1,default:void 0},streetView:{type:Object,required:!1},streetViewControl:{type:Boolean,required:!1,default:void 0},streetViewControlPosition:{type:String,required:!1},styles:{type:Array,required:!1},tilt:{type:Number,required:!1},zoom:{type:Number,required:!1},zoomControl:{type:Boolean,required:!1,default:void 0},zoomControlPosition:{type:String,required:!1},nonce:{type:String,default:""}},emits:Q,setup(o,{emit:e}){const t=_(),n=_(!1),s=_(),i=_(),r=_(!1);T(ne,s),T(ae,i),T(nt,r);const c=()=>{const l={...o};Object.keys(l).forEach(p=>{l[p]===void 0&&delete l[p]});const g=p=>{var f;return p?{position:(f=i.value)==null?void 0:f.ControlPosition[p]}:{}},y={scaleControlOptions:o.scaleControlStyle?{style:o.scaleControlStyle}:{},panControlOptions:g(o.panControlPosition),zoomControlOptions:g(o.zoomControlPosition),rotateControlOptions:g(o.rotateControlPosition),streetViewControlOptions:g(o.streetViewControlPosition),fullscreenControlOptions:g(o.fullscreenControlPosition),disableDefaultUI:o.disableDefaultUi};return{...l,...y}},h=V([i,s],([l,g])=>{const y=l,p=g;y&&p&&(y.event.addListenerOnce(p,"tilesloaded",()=>{r.value=!0}),setTimeout(h,0))},{immediate:!0}),u=()=>{try{const{apiKey:l,region:g,version:y,language:p,libraries:f,nonce:w}=o;Y=new P({apiKey:l,region:g,version:y,language:p,libraries:f,nonce:w})}catch(l){console.error(l)}},b=l=>{i.value=M(l.maps),s.value=M(new l.maps.Map(t.value,c()));const g=ct(i.value);i.value[A]=g,Q.forEach(p=>{var f;(f=s.value)==null||f.addListener(p,w=>e(p,w))}),n.value=!0;const y=Object.keys(o).filter(p=>!["apiPromise","apiKey","version","libraries","region","language","center","zoom","nonce"].includes(p)).map(p=>xe(o,p));V([()=>o.center,()=>o.zoom,...y],([p,f],[w,k])=>{var I,S,E;const{center:j,zoom:Z,...de}=c();(I=s.value)==null||I.setOptions(de),f!==void 0&&f!==k&&((S=s.value)==null||S.setZoom(f));const ue=!w||p.lng!==w.lng||p.lat!==w.lat;p&&ue&&((E=s.value)==null||E.panTo(p))})};return fe(()=>{o.apiPromise&&o.apiPromise instanceof Promise?o.apiPromise.then(b):(u(),Y.load().then(b))}),se(()=>{var l;r.value=!1,s.value&&((l=i.value)==null||l.event.clearInstanceListeners(s.value))}),{mapRef:t,ready:n,map:s,api:i,mapTilesLoaded:r}}}),ce=(o,e)=>{const t=o.__vccOpts||o;for(const[n,s]of e)t[n]=s;return t},ut={ref:"mapRef",class:"mapdiv"};function pt(o,e,t,n,s,i){return d(),m("div",null,[a("div",ut,null,512),ie(o.$slots,"default",ye(ve({ready:o.ready,map:o.map,api:o.api,mapTilesLoaded:o.mapTilesLoaded})),void 0,!0)])}const mt=ce(dt,[["render",pt],["__scopeId","data-v-dbf82c40"]]);function ht(o){return o&&o.__esModule&&Object.prototype.hasOwnProperty.call(o,"default")?o.default:o}var bt=function o(e,t){if(e===t)return!0;if(e&&t&&typeof e=="object"&&typeof t=="object"){if(e.constructor!==t.constructor)return!1;var n,s,i;if(Array.isArray(e)){if(n=e.length,n!=t.length)return!1;for(s=n;s--!==0;)if(!o(e[s],t[s]))return!1;return!0}if(e.constructor===RegExp)return e.source===t.source&&e.flags===t.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===t.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===t.toString();if(i=Object.keys(e),n=i.length,n!==Object.keys(t).length)return!1;for(s=n;s--!==0;)if(!Object.prototype.hasOwnProperty.call(t,i[s]))return!1;for(s=n;s--!==0;){var r=i[s];if(!o(e[r],t[r]))return!1}return!0}return e!==e&&t!==t};const gt=ht(bt),ft=o=>o==="Marker",yt=o=>o===A,vt=(o,e,t,n)=>{const s=_(),i=$(ne,_()),r=$(ae,_()),c=$(rt,_()),h=z(()=>!!(c.value&&r.value&&(s.value instanceof r.value.Marker||s.value instanceof r.value[A])));return V([i,t],(u,[b,l])=>{var g,y,p;const f=!gt(t.value,l)||i.value!==b;!i.value||!r.value||!f||(s.value?(s.value.setOptions(t.value),h.value&&((g=c.value)==null||g.removeMarker(s.value),(y=c.value)==null||y.addMarker(s.value))):(ft(o)?s.value=M(new r.value[o](t.value)):yt(o)?s.value=M(new r.value[o](t.value)):s.value=M(new r.value[o]({...t.value,map:i.value})),h.value?(p=c.value)==null||p.addMarker(s.value):s.value.setMap(i.value),e.forEach(w=>{var k;(k=s.value)==null||k.addListener(w,I=>n(w,I))})))},{immediate:!0}),se(()=>{var u,b;s.value&&((u=r.value)==null||u.event.clearInstanceListeners(s.value),h.value?(b=c.value)==null||b.removeMarker(s.value):s.value.setMap(null))}),s};le.concat(["bounds_changed"]);le.concat(["center_changed","radius_changed"]);var H;(function(o){o.CLUSTERING_BEGIN="clusteringbegin",o.CLUSTERING_END="clusteringend",o.CLUSTER_CLICK="click"})(H||(H={}));Object.values(H);const wt=oe({inheritAttrs:!1,props:{options:{type:Object,required:!0}},setup(o,{slots:e,emit:t,expose:n}){const s=_(),i=z(()=>{var h;return(h=e.default)==null?void 0:h.call(e).some(u=>u.type!==we)}),r=z(()=>({...o.options,element:s.value})),c=vt(A,[],r,t);return n({customMarker:c}),{customMarkerRef:s,customMarker:c,hasSlotContent:i}}}),_t={key:0,class:"custom-marker-wrapper"};function xt(o,e,t,n,s,i){return o.hasSlotContent?(d(),m("div",_t,[a("div",_e({ref:"customMarkerRef",style:{cursor:o.$attrs.onClick?"pointer":void 0}},o.$attrs),[ie(o.$slots,"default",{},void 0,!0)],16)])):v("",!0)}const ee=ce(wt,[["render",xt],["__scopeId","data-v-2d2d343a"]]),kt={key:0},Ct={key:0},Lt={style:{"text-align":"center"},class:"hover:cursor-pointer"},St={key:1},Pt={style:{"text-align":"center"},class:"hover:cursor-pointer"},Ot={props:{user:{type:Object},onLine:{type:Boolean}},data(){return{googleMapsApiKey:"AIzaSyDXjC1FcOxhFWaPYaPqA4jnjocup7wr0fw",mapZoom:2,mapCenter:{lat:33,lng:44},latitude:"",longitude:"",userPosition:{},markerOptions:{},ownLocationRequested:!1,selectedLocationMarkerOptions:{},selectedLocationCenter:{lat:0,lng:0},selectedLocation:!1}},methods:{async getMyLocation(){try{const o=await re();this.latitude=o.coords.latitude,this.longitude=o.coords.longitude,this.userPosition={lat:this.latitude,lng:this.longitude},this.markerOptions={position:this.userPosition,label:"U",title:"Current Location"},this.mapCenter=this.userPosition,this.mapZoom=12,this.ownLocationRequested=!0}catch(o){console.error("Error getting location:",o)}},handleMapClick(o){const e=o.latLng,t=e.lat(),n=e.lng();this.selectedLocationCenter={lat:t,lng:n},this.selectedLocation=!0,this.selectedLocationMarkerOptions={position:this.selectedLocationCenter},this.mapCenter=this.selectedLocationCenter}}},It=Object.assign(Ot,{__name:"MapView",setup(o){return(e,t)=>{const n=U("v-icon");return o.onLine?(d(),m("section",kt,[a("button",{class:"mt-12 px-2 py-2 rounded-sm border border-red-400 bg-slate-50",onClick:t[0]||(t[0]=(...s)=>e.getMyLocation&&e.getMyLocation(...s))},"My location"),C(D(mt),{"api-key":e.googleMapsApiKey,style:{width:"100%",height:"75vh"},center:e.mapCenter,zoom:e.mapZoom,onClick:e.handleMapClick},{default:q(()=>[e.ownLocationRequested?(d(),m("div",Ct,[C(D(ee),{options:e.markerOptions},{default:q(()=>[a("div",Lt,[C(n,{name:"fa-map-marker-alt",scale:"2",fill:"red"})])]),_:1},8,["options"])])):v("",!0),e.selectedLocation?(d(),m("div",St,[C(D(ee),{options:e.selectedLocationMarkerOptions},{default:q(()=>[a("div",Pt,[C(n,{name:"fa-map-marker-alt",scale:"2",fill:"orange"})])]),_:1},8,["options"])])):v("",!0)]),_:1},8,["api-key","center","zoom","onClick"])])):v("",!0)}}}),Et={props:{user:{type:Object},onLine:{type:Boolean}},components:{},data(){return{username:"",password:"",incorrectCredentials:!1,errorMessage:"",editingName:!1,editedName:this.user.name}},methods:{async login(){try{await this.user.apiLogin(this.username,this.password),this.incorrectCredentials=!1,this.$toast.success("Login successful"),this.$router.push("/")}catch(o){console.log(o.status),o.status===401?(this.incorrectCredentials=!0,this.errorMessage="Incorrect username or password"):o.status===404?(this.incorrectCredentials=!0,this.errorMessage="User not found"):console.log("Other error:",o)}},editName(){this.editingName=!0},async saveName(){if(this.editedName!=this.user.name)try{await this.user.apiEditUser(this.editedName),this.$toast.success("Profile updated")}catch(o){console.log(o.status),o.status===401?this.$toast.error("Error updating profile"):console.log("Other error:",o)}this.editingName=!1}}},Nt={key:0,class:"mt-12 pt-6"},Rt={class:"max-w-xs mx-auto rounded-lg border border-gray-700 bg-[#161b22] flex flex-col text-white px-4 py-3"},Ut=a("label",{class:"block uppercase text-white text-sm mb-2",for:"username"},"Username",-1),Mt=a("label",{class:"block uppercase text-white text-sm mb-2",for:"password"},"Password",-1),Ft={key:0,class:"text-red-500 text-sm mb-3"},jt={class:"mt-5 max-w-xs mx-auto rounded-lg border border-gray-700 bg-[#161b22] flex flex-col text-white px-4 py-3"},qt=a("label",{class:"block uppercase text-white text-sm mb-2",for:"username"},"Not registered?",-1),At=a("button",{class:"bg-orange-500 hover:bg-orange-600 text-white font-bold py-1 px-4 rounded w-full"},"Create an account",-1),Bt={key:1,class:"mt-12 pt-6 pb-4"},Tt={class:"max-w-xs mx-auto rounded-lg border border-gray-700 bg-[#161b22] flex flex-col text-white px-4 py-3"},$t={class:"flex justify-between mb-2"},Dt={class:"flex"},Vt=a("label",{class:"block uppercase text-white text-sm",for:"username"},"Username:",-1),zt={class:"px-4 text-sm"},Gt={class:"flex mb-2"},Kt=a("label",{class:"block uppercase text-white text-sm",for:"password"},"Name:",-1),Ht={key:0,class:"px-4 text-sm"},Zt={key:1,class:"px-4"},Wt={key:2},Jt=a("div",{class:"max-w-xs mx-auto rounded-lg border border-gray-700 bg-[#161b22] flex flex-col text-white px-4 py-3"}," Previous updates ",-1),Xt=[Jt];function Yt(o,e,t,n,s,i){const r=U("RouterLink"),c=U("v-icon");return d(),m(N,null,[!t.user.loggedIn&&t.onLine?(d(),m("section",Nt,[a("div",Rt,[Ut,x(a("input",{class:"shadow bg-black appearance-none border border-gray-700 rounded w-full py-1 px-3 leading-tight focus:outline-none focus:shadow-outline mb-3",id:"username",type:"text","onUpdate:modelValue":e[0]||(e[0]=h=>s.username=h)},null,512),[[L,s.username]]),Mt,x(a("input",{class:G(["shadow bg-black appearance-none border border-gray-700 rounded w-full py-1 px-3 leading-tight focus:outline-none focus:shadow-outline",{"mb-3":!s.incorrectCredentials}]),id:"password",type:"password","onUpdate:modelValue":e[1]||(e[1]=h=>s.password=h)},null,2),[[L,s.password]]),s.incorrectCredentials?(d(),m("span",Ft,"["+O(s.errorMessage)+"]",1)):v("",!0),a("button",{class:"bg-orange-500 hover:bg-orange-600 text-white font-bold py-1 px-4 rounded",onClick:e[2]||(e[2]=(...h)=>i.login&&i.login(...h))},"Sign in")]),a("div",jt,[qt,C(r,{to:"/register"},{default:q(()=>[At]),_:1})])])):v("",!0),t.user.loggedIn&&t.onLine?(d(),m("section",Bt,[a("div",Tt,[a("div",$t,[a("div",Dt,[Vt,a("p",zt,O(t.user.username),1)]),s.editingName?(d(),K(c,{key:1,name:"fa-save",class:"hover:cursor-pointer",onClick:i.saveName},null,8,["onClick"])):(d(),K(c,{key:0,name:"fa-edit",class:"hover:cursor-pointer",onClick:i.editName},null,8,["onClick"]))]),a("div",Gt,[Kt,s.editingName?(d(),m("div",Zt,[x(a("input",{class:"bg-black appearance-none border border-gray-700 rounded w-full py-1 px-3 leading-tight focus:outline-none focus:shadow-outline","onUpdate:modelValue":e[3]||(e[3]=h=>s.editedName=h)},null,512),[[L,s.editedName]])])):(d(),m("p",Ht,O(t.user.name),1))])])])):v("",!0),t.user.loggedIn&&t.onLine?(d(),m("section",Wt,Xt)):v("",!0)],64)}const Qt=F(Et,[["render",Yt]]),eo={emits:["submitRegistration"],props:{usernameInUse:{type:Boolean}},data(){return{name:"",username:"",password:"",password2:""}},methods:{submitForm(){const o={name:this.name,username:this.username,password:this.password};console.log("submit form"),this.$emit("submitRegistration",o)},checkDisabledButton(){return!this.name||!this.username||!this.password||!this.password2||this.checkPassword()},checkPassword(){return this.password2&&this.password!=this.password2}}},to={class:"pt-3"},oo={class:"max-w-xs mx-auto rounded-lg border border-gray-700 bg-[#161b22] flex flex-col text-white px-4 py-3"},so=a("label",{class:"block uppercase text-white font-semibold mb-2"}," Register ",-1),io={class:"w-full mb-3"},ro=a("label",{class:"block uppercase text-white text-sm mb-2",for:"name"}," Name ",-1),no=a("label",{class:"block uppercase text-white text-sm mb-2",for:"username"}," Username ",-1),ao={key:0,class:"text-red-500 mb-3"},lo=a("label",{class:"block uppercase text-white text-sm mb-2",for:"password"}," Password ",-1),co=a("label",{class:"block uppercase text-white text-sm mb-2",for:"password2"}," Re-enter Password ",-1),uo={key:1,class:"text-red-500 text-sm"},po=["disabled"];function mo(o,e,t,n,s,i){return d(),m("section",to,[a("div",oo,[so,a("div",io,[ro,x(a("input",{class:"shadow bg-black appearance-none border border-gray-700 rounded w-full py-1 px-3 leading-tight focus:outline-none focus:shadow-outline mb-3",id:"name",type:"text","onUpdate:modelValue":e[0]||(e[0]=r=>s.name=r)},null,512),[[L,s.name]]),no,x(a("input",{class:G(["sshadow bg-black appearance-none border border-gray-700 rounded w-full py-1 px-3 leading-tight focus:outline-none focus:shadow-outline mb-3",{"mb-3":!t.usernameInUse}]),id:"username",type:"text","onUpdate:modelValue":e[1]||(e[1]=r=>s.username=r)},null,2),[[L,s.username]]),t.usernameInUse?(d(),m("span",ao,"[Username already taken]")):v("",!0),lo,x(a("input",{class:"shadow bg-black appearance-none border border-gray-700 rounded w-full py-1 px-3 leading-tight focus:outline-none focus:shadow-outline mb-3",id:"password",type:"password","onUpdate:modelValue":e[2]||(e[2]=r=>s.password=r)},null,512),[[L,s.password]]),co,x(a("input",{class:"shadow bg-black appearance-none border border-gray-700 rounded w-full py-1 px-3 leading-tight focus:outline-none focus:shadow-outline",id:"password2",type:"password","onUpdate:modelValue":e[3]||(e[3]=r=>s.password2=r)},null,512),[[L,s.password2]]),i.checkPassword()?(d(),m("span",uo,"[Passwords must match]")):v("",!0)]),a("button",{class:G(["bg-orange-500 text-white font-bold py-1 px-4 rounded",i.checkDisabledButton()?"opacity-50":"hover:bg-orange-600 hover:cursor-pointer"]),onClick:e[4]||(e[4]=(...r)=>i.submitForm&&i.submitForm(...r)),disabled:i.checkDisabledButton()},"Sign Up ",10,po)])])}const ho=F(eo,[["render",mo]]),bo={props:{user:{type:Object},onLine:{type:Boolean}},components:{RegisterUser:ho},data(){return{usernameInUse:!1}},methods:{async submitRegistration(o){try{this.usernameInUse=!1;const e=await this.user.api_register(o)}catch(e){console.log(e.status),e.status===409?this.usernameInUse=!0:console.log("Other error:",e)}}}},go={key:0,class:"mt-12 px-3 py-3 block uppercase text-white text-md font-bold bg-slate-400 text-center"},fo={class:"mt-12 mb-16 pt-3 bg-black"};function yo(o,e,t,n,s,i){const r=U("RegisterUser");return d(),m(N,null,[t.onLine?v("",!0):(d(),m("div",go," No accesss in offline mode ")),a("section",fo,[!t.user.logged_in||!t.onLine?(d(),K(r,{key:0,onSubmitRegistration:i.submitRegistration,usernameInUse:s.usernameInUse},null,8,["onSubmitRegistration","usernameInUse"])):v("",!0)])],64)}const vo=F(bo,[["render",yo]]),xo=me({history:he("/"),routes:[{path:"/",name:"home",component:ot},{path:"/map",name:"map",component:It},{path:"/profile",name:"profile",component:Qt},{path:"/register",name:"register",component:vo}]});export{xo as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
